
distance_input_capture_mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08005b40  08005b40  00015b40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e28  08005e28  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08005e28  08005e28  00015e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e30  08005e30  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e30  08005e30  00015e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e34  08005e34  00015e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  200001dc  08006014  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08006014  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a445  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000182b  00000000  00000000  0002a651  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009f0  00000000  00000000  0002be80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000928  00000000  00000000  0002c870  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021542  00000000  00000000  0002d198  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000075bf  00000000  00000000  0004e6da  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7f4b  00000000  00000000  00055c99  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011dbe4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036b4  00000000  00000000  0011dc60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b24 	.word	0x08005b24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08005b24 	.word	0x08005b24

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eae:	f000 fc49 	bl	8001744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb2:	f000 f879 	bl	8000fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb6:	f000 f991 	bl	80011dc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000eba:	f000 f8d3 	bl	8001064 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ebe:	f000 f91d 	bl	80010fc <MX_TIM3_Init>
  while (1)
  {
      // printf("Start..\n\r");
       //HAL_Delay(1000);
    /* USER CODE END WHILE */
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2120      	movs	r1, #32
 8000ec6:	482f      	ldr	r0, [pc, #188]	; (8000f84 <main+0xdc>)
 8000ec8:	f000 ff7c 	bl	8001dc4 <HAL_GPIO_WritePin>
		usDelay(3);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f000 fa33 	bl	8001338 <usDelay>

		//*** START Ultrasonic measure routine ***//
		//1. Output 10 usec TRIG
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	2120      	movs	r1, #32
 8000ed6:	482b      	ldr	r0, [pc, #172]	; (8000f84 <main+0xdc>)
 8000ed8:	f000 ff74 	bl	8001dc4 <HAL_GPIO_WritePin>
		usDelay(10);
 8000edc:	200a      	movs	r0, #10
 8000ede:	f000 fa2b 	bl	8001338 <usDelay>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2120      	movs	r1, #32
 8000ee6:	4827      	ldr	r0, [pc, #156]	; (8000f84 <main+0xdc>)
 8000ee8:	f000 ff6c 	bl	8001dc4 <HAL_GPIO_WritePin>

		//2. ECHO signal pulse width

		//Start IC timer
		HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000eec:	2100      	movs	r1, #0
 8000eee:	4826      	ldr	r0, [pc, #152]	; (8000f88 <main+0xe0>)
 8000ef0:	f001 fc04 	bl	80026fc <HAL_TIM_IC_Start_IT>
		//Wait for IC flag
		uint32_t startTick = HAL_GetTick();
 8000ef4:	f000 fc8c 	bl	8001810 <HAL_GetTick>
 8000ef8:	6078      	str	r0, [r7, #4]
		do
		{
			if(icFlag) break;
 8000efa:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <main+0xe4>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d108      	bne.n	8000f14 <main+0x6c>
		}while((HAL_GetTick() - startTick) < 500);  //500ms
 8000f02:	f000 fc85 	bl	8001810 <HAL_GetTick>
 8000f06:	4602      	mov	r2, r0
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f10:	d3f3      	bcc.n	8000efa <main+0x52>
 8000f12:	e000      	b.n	8000f16 <main+0x6e>
			if(icFlag) break;
 8000f14:	bf00      	nop
		icFlag = 0;
 8000f16:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <main+0xe4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
		HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	481a      	ldr	r0, [pc, #104]	; (8000f88 <main+0xe0>)
 8000f20:	f001 fc54 	bl	80027cc <HAL_TIM_IC_Stop_IT>

		//Calculate distance in cm
		if(edge2Time > edge1Time)
 8000f24:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <main+0xe8>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <main+0xec>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d914      	bls.n	8000f5a <main+0xb2>
		{
			distance = ((edge2Time - edge1Time) + 0.0f)*speedOfSound;
 8000f30:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <main+0xe8>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <main+0xec>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	ee07 3a90 	vmov	s15, r3
 8000f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f42:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000f98 <main+0xf0>
 8000f46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f4a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000f9c <main+0xf4>
 8000f4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <main+0xf8>)
 8000f54:	edc3 7a00 	vstr	s15, [r3]
 8000f58:	e003      	b.n	8000f62 <main+0xba>
		}
		else
		{
			distance = 0.0f;
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <main+0xf8>)
 8000f5c:	f04f 0200 	mov.w	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
		}

		printf("Distance (cm) = %.1f\n\r",distance);
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <main+0xf8>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff faee 	bl	8000548 <__aeabi_f2d>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	460c      	mov	r4, r1
 8000f70:	461a      	mov	r2, r3
 8000f72:	4623      	mov	r3, r4
 8000f74:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <main+0xfc>)
 8000f76:	f002 ff09 	bl	8003d8c <iprintf>
		HAL_Delay(500);
 8000f7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f7e:	f000 fc53 	bl	8001828 <HAL_Delay>
  {
 8000f82:	e79e      	b.n	8000ec2 <main+0x1a>
 8000f84:	40020400 	.word	0x40020400
 8000f88:	20000214 	.word	0x20000214
 8000f8c:	200001f8 	.word	0x200001f8
 8000f90:	20000200 	.word	0x20000200
 8000f94:	200001fc 	.word	0x200001fc
 8000f98:	00000000 	.word	0x00000000
 8000f9c:	3c8c7e28 	.word	0x3c8c7e28
 8000fa0:	20000210 	.word	0x20000210
 8000fa4:	08005b40 	.word	0x08005b40

08000fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b094      	sub	sp, #80	; 0x50
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	f107 0320 	add.w	r3, r7, #32
 8000fb2:	2230      	movs	r2, #48	; 0x30
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f002 fa84 	bl	80034c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	4b22      	ldr	r3, [pc, #136]	; (800105c <SystemClock_Config+0xb4>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	4a21      	ldr	r2, [pc, #132]	; (800105c <SystemClock_Config+0xb4>)
 8000fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fda:	6413      	str	r3, [r2, #64]	; 0x40
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	; (800105c <SystemClock_Config+0xb4>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <SystemClock_Config+0xb8>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a1b      	ldr	r2, [pc, #108]	; (8001060 <SystemClock_Config+0xb8>)
 8000ff2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b19      	ldr	r3, [pc, #100]	; (8001060 <SystemClock_Config+0xb8>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001004:	2302      	movs	r3, #2
 8001006:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001008:	2301      	movs	r3, #1
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100c:	2310      	movs	r3, #16
 800100e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001010:	2300      	movs	r3, #0
 8001012:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001014:	f107 0320 	add.w	r3, r7, #32
 8001018:	4618      	mov	r0, r3
 800101a:	f000 ff07 	bl	8001e2c <HAL_RCC_OscConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001024:	f000 f9c0 	bl	80013a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001028:	230f      	movs	r3, #15
 800102a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800102c:	2300      	movs	r3, #0
 800102e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f001 f962 	bl	800230c <HAL_RCC_ClockConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800104e:	f000 f9ab 	bl	80013a8 <Error_Handler>
  }
}
 8001052:	bf00      	nop
 8001054:	3750      	adds	r7, #80	; 0x50
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40023800 	.word	0x40023800
 8001060:	40007000 	.word	0x40007000

08001064 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001078:	463b      	mov	r3, r7
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001080:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <MX_TIM2_Init+0x94>)
 8001082:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001086:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <MX_TIM2_Init+0x94>)
 800108a:	220f      	movs	r2, #15
 800108c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108e:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <MX_TIM2_Init+0x94>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <MX_TIM2_Init+0x94>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <MX_TIM2_Init+0x94>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <MX_TIM2_Init+0x94>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010a6:	4814      	ldr	r0, [pc, #80]	; (80010f8 <MX_TIM2_Init+0x94>)
 80010a8:	f001 fac8 	bl	800263c <HAL_TIM_Base_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80010b2:	f000 f979 	bl	80013a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010bc:	f107 0308 	add.w	r3, r7, #8
 80010c0:	4619      	mov	r1, r3
 80010c2:	480d      	ldr	r0, [pc, #52]	; (80010f8 <MX_TIM2_Init+0x94>)
 80010c4:	f001 fd96 	bl	8002bf4 <HAL_TIM_ConfigClockSource>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80010ce:	f000 f96b 	bl	80013a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010da:	463b      	mov	r3, r7
 80010dc:	4619      	mov	r1, r3
 80010de:	4806      	ldr	r0, [pc, #24]	; (80010f8 <MX_TIM2_Init+0x94>)
 80010e0:	f002 f936 	bl	8003350 <HAL_TIMEx_MasterConfigSynchronization>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80010ea:	f000 f95d 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000254 	.word	0x20000254

080010fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 0318 	add.w	r3, r7, #24
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800111a:	463b      	mov	r3, r7
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001126:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <MX_TIM3_Init+0xd8>)
 8001128:	4a2b      	ldr	r2, [pc, #172]	; (80011d8 <MX_TIM3_Init+0xdc>)
 800112a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 800112c:	4b29      	ldr	r3, [pc, #164]	; (80011d4 <MX_TIM3_Init+0xd8>)
 800112e:	220f      	movs	r2, #15
 8001130:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001132:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <MX_TIM3_Init+0xd8>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8001138:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <MX_TIM3_Init+0xd8>)
 800113a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800113e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001140:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <MX_TIM3_Init+0xd8>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001146:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <MX_TIM3_Init+0xd8>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800114c:	4821      	ldr	r0, [pc, #132]	; (80011d4 <MX_TIM3_Init+0xd8>)
 800114e:	f001 fa75 	bl	800263c <HAL_TIM_Base_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001158:	f000 f926 	bl	80013a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001160:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001162:	f107 0318 	add.w	r3, r7, #24
 8001166:	4619      	mov	r1, r3
 8001168:	481a      	ldr	r0, [pc, #104]	; (80011d4 <MX_TIM3_Init+0xd8>)
 800116a:	f001 fd43 	bl	8002bf4 <HAL_TIM_ConfigClockSource>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001174:	f000 f918 	bl	80013a8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001178:	4816      	ldr	r0, [pc, #88]	; (80011d4 <MX_TIM3_Init+0xd8>)
 800117a:	f001 fa8a 	bl	8002692 <HAL_TIM_IC_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001184:	f000 f910 	bl	80013a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001188:	2300      	movs	r3, #0
 800118a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	4619      	mov	r1, r3
 8001196:	480f      	ldr	r0, [pc, #60]	; (80011d4 <MX_TIM3_Init+0xd8>)
 8001198:	f002 f8da 	bl	8003350 <HAL_TIMEx_MasterConfigSynchronization>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80011a2:	f000 f901 	bl	80013a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80011a6:	230a      	movs	r3, #10
 80011a8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011aa:	2301      	movs	r3, #1
 80011ac:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 4;
 80011b2:	2304      	movs	r3, #4
 80011b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011b6:	463b      	mov	r3, r7
 80011b8:	2200      	movs	r2, #0
 80011ba:	4619      	mov	r1, r3
 80011bc:	4805      	ldr	r0, [pc, #20]	; (80011d4 <MX_TIM3_Init+0xd8>)
 80011be:	f001 fc7d 	bl	8002abc <HAL_TIM_IC_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80011c8:	f000 f8ee 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	3728      	adds	r7, #40	; 0x28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000214 	.word	0x20000214
 80011d8:	40000400 	.word	0x40000400

080011dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	4b30      	ldr	r3, [pc, #192]	; (80012b8 <MX_GPIO_Init+0xdc>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a2f      	ldr	r2, [pc, #188]	; (80012b8 <MX_GPIO_Init+0xdc>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <MX_GPIO_Init+0xdc>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	4b29      	ldr	r3, [pc, #164]	; (80012b8 <MX_GPIO_Init+0xdc>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a28      	ldr	r2, [pc, #160]	; (80012b8 <MX_GPIO_Init+0xdc>)
 8001218:	f043 0308 	orr.w	r3, r3, #8
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <MX_GPIO_Init+0xdc>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	603b      	str	r3, [r7, #0]
 800122e:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <MX_GPIO_Init+0xdc>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a21      	ldr	r2, [pc, #132]	; (80012b8 <MX_GPIO_Init+0xdc>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <MX_GPIO_Init+0xdc>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800124c:	481b      	ldr	r0, [pc, #108]	; (80012bc <MX_GPIO_Init+0xe0>)
 800124e:	f000 fdb9 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	2120      	movs	r1, #32
 8001256:	481a      	ldr	r0, [pc, #104]	; (80012c0 <MX_GPIO_Init+0xe4>)
 8001258:	f000 fdb4 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800125c:	2301      	movs	r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	4619      	mov	r1, r3
 800126e:	4815      	ldr	r0, [pc, #84]	; (80012c4 <MX_GPIO_Init+0xe8>)
 8001270:	f000 fc0e 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001274:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001278:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	2301      	movs	r3, #1
 800127c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	4619      	mov	r1, r3
 800128c:	480b      	ldr	r0, [pc, #44]	; (80012bc <MX_GPIO_Init+0xe0>)
 800128e:	f000 fbff 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001292:	2320      	movs	r3, #32
 8001294:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001296:	2301      	movs	r3, #1
 8001298:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	4619      	mov	r1, r3
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_GPIO_Init+0xe4>)
 80012aa:	f000 fbf1 	bl	8001a90 <HAL_GPIO_Init>

}
 80012ae:	bf00      	nop
 80012b0:	3720      	adds	r7, #32
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020c00 	.word	0x40020c00
 80012c0:	40020400 	.word	0x40020400
 80012c4:	40020000 	.word	0x40020000

080012c8 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80012d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012d4:	4813      	ldr	r0, [pc, #76]	; (8001324 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80012d6:	f000 fd8e 	bl	8001df6 <HAL_GPIO_TogglePin>

		if(captureIdx == 0) //Fisrt edge
 80012da:	4b13      	ldr	r3, [pc, #76]	; (8001328 <HAL_TIM_IC_CaptureCallback+0x60>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10a      	bne.n	80012f8 <HAL_TIM_IC_CaptureCallback+0x30>
		{
			edge1Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); //__HAL_TIM_GetCounter(&htim3);//
 80012e2:	2100      	movs	r1, #0
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f001 fd3d 	bl	8002d64 <HAL_TIM_ReadCapturedValue>
 80012ea:	4602      	mov	r2, r0
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_TIM_IC_CaptureCallback+0x64>)
 80012ee:	601a      	str	r2, [r3, #0]

			captureIdx = 1;
 80012f0:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <HAL_TIM_IC_CaptureCallback+0x60>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
		{
			edge2Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
			captureIdx = 0;
			icFlag = 1;
		}
}
 80012f6:	e010      	b.n	800131a <HAL_TIM_IC_CaptureCallback+0x52>
		else if(captureIdx == 1) //Second edge
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <HAL_TIM_IC_CaptureCallback+0x60>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d10c      	bne.n	800131a <HAL_TIM_IC_CaptureCallback+0x52>
			edge2Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001300:	2100      	movs	r1, #0
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f001 fd2e 	bl	8002d64 <HAL_TIM_ReadCapturedValue>
 8001308:	4602      	mov	r2, r0
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <HAL_TIM_IC_CaptureCallback+0x68>)
 800130c:	601a      	str	r2, [r3, #0]
			captureIdx = 0;
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
			icFlag = 1;
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40020c00 	.word	0x40020c00
 8001328:	200001f9 	.word	0x200001f9
 800132c:	200001fc 	.word	0x200001fc
 8001330:	20000200 	.word	0x20000200
 8001334:	200001f8 	.word	0x200001f8

08001338 <usDelay>:

/* USER CODE BEGIN 4 */
void usDelay(uint32_t uSec)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d801      	bhi.n	800134a <usDelay+0x12>
 8001346:	2302      	movs	r3, #2
 8001348:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1; 	/*sets the value in the auto-reload register*/
 800134a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3b01      	subs	r3, #1
 8001352:	62d3      	str	r3, [r2, #44]	; 0x2c
	usTIM->EGR = 1; 			/*Re-initialises the timer*/
 8001354:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001358:	2201      	movs	r2, #1
 800135a:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1; 		//Resets the flag
 800135c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001366:	f023 0301 	bic.w	r3, r3, #1
 800136a:	6113      	str	r3, [r2, #16]
	usTIM->CR1 |= 1; 		//Enables the counter
 800136c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	6013      	str	r3, [r2, #0]
	while((usTIM->SR&0x0001) != 1);
 800137c:	bf00      	nop
 800137e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	2b01      	cmp	r3, #1
 800138a:	d1f8      	bne.n	800137e <usDelay+0x46>
	usTIM->SR &= ~(0x0001);
 800138c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001396:	f023 0301 	bic.w	r3, r3, #1
 800139a:	6113      	str	r3, [r2, #16]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <HAL_MspInit+0x4c>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	4a0f      	ldr	r2, [pc, #60]	; (8001404 <HAL_MspInit+0x4c>)
 80013c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013cc:	6453      	str	r3, [r2, #68]	; 0x44
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <HAL_MspInit+0x4c>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	603b      	str	r3, [r7, #0]
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_MspInit+0x4c>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a08      	ldr	r2, [pc, #32]	; (8001404 <HAL_MspInit+0x4c>)
 80013e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_MspInit+0x4c>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800

08001408 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001428:	d10e      	bne.n	8001448 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <HAL_TIM_Base_MspInit+0xbc>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a24      	ldr	r2, [pc, #144]	; (80014c4 <HAL_TIM_Base_MspInit+0xbc>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <HAL_TIM_Base_MspInit+0xbc>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001446:	e038      	b.n	80014ba <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM3)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <HAL_TIM_Base_MspInit+0xc0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d133      	bne.n	80014ba <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <HAL_TIM_Base_MspInit+0xbc>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a1a      	ldr	r2, [pc, #104]	; (80014c4 <HAL_TIM_Base_MspInit+0xbc>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
 8001462:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <HAL_TIM_Base_MspInit+0xbc>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <HAL_TIM_Base_MspInit+0xbc>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a13      	ldr	r2, [pc, #76]	; (80014c4 <HAL_TIM_Base_MspInit+0xbc>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <HAL_TIM_Base_MspInit+0xbc>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800148a:	2340      	movs	r3, #64	; 0x40
 800148c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800149a:	2302      	movs	r3, #2
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	4809      	ldr	r0, [pc, #36]	; (80014cc <HAL_TIM_Base_MspInit+0xc4>)
 80014a6:	f000 faf3 	bl	8001a90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	201d      	movs	r0, #29
 80014b0:	f000 fab7 	bl	8001a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014b4:	201d      	movs	r0, #29
 80014b6:	f000 fad0 	bl	8001a5a <HAL_NVIC_EnableIRQ>
}
 80014ba:	bf00      	nop
 80014bc:	3728      	adds	r7, #40	; 0x28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40000400 	.word	0x40000400
 80014cc:	40020000 	.word	0x40020000

080014d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <HardFault_Handler+0x4>

080014e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <MemManage_Handler+0x4>

080014ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <BusFault_Handler+0x4>

080014f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <UsageFault_Handler+0x4>

080014f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001524:	f000 f960 	bl	80017e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}

0800152c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <TIM3_IRQHandler+0x10>)
 8001532:	f001 f9bb 	bl	80028ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000214 	.word	0x20000214

08001540 <ITM_SendChar>:
#define DEMCR                  *((volatile uint32_t*) 0xE000EDFCU )
#define ITM_STIMULUS_PORT0     *((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN           *((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
    //Enable TRCENA
    DEMCR |= ( 1 << 24);
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <ITM_SendChar+0x48>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <ITM_SendChar+0x48>)
 8001550:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001554:	6013      	str	r3, [r2, #0]

    //enable stimulus port 0
    ITM_TRACE_EN |= ( 1 << 0);
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <ITM_SendChar+0x4c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a0c      	ldr	r2, [pc, #48]	; (800158c <ITM_SendChar+0x4c>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6013      	str	r3, [r2, #0]

    // read FIFO status in bit [0]:
    while(!(ITM_STIMULUS_PORT0 & 1));
 8001562:	bf00      	nop
 8001564:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f8      	beq.n	8001564 <ITM_SendChar+0x24>

    //Write to ITM stimulus port0
    ITM_STIMULUS_PORT0 = ch;
 8001572:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	6013      	str	r3, [r2, #0]
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000edfc 	.word	0xe000edfc
 800158c:	e0000e00 	.word	0xe0000e00

08001590 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	e00a      	b.n	80015b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015a2:	f3af 8000 	nop.w
 80015a6:	4601      	mov	r1, r0
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	1c5a      	adds	r2, r3, #1
 80015ac:	60ba      	str	r2, [r7, #8]
 80015ae:	b2ca      	uxtb	r2, r1
 80015b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3301      	adds	r3, #1
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	429a      	cmp	r2, r3
 80015be:	dbf0      	blt.n	80015a2 <_read+0x12>
	}

return len;
 80015c0:	687b      	ldr	r3, [r7, #4]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	60f8      	str	r0, [r7, #12]
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	e009      	b.n	80015f0 <_write+0x26>
    {
        //__io_putchar(*ptr++);
        ITM_SendChar(*ptr++);
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	60ba      	str	r2, [r7, #8]
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ffab 	bl	8001540 <ITM_SendChar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	3301      	adds	r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	dbf1      	blt.n	80015dc <_write+0x12>
    }
    return len;
 80015f8:	687b      	ldr	r3, [r7, #4]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <_close>:

int _close(int file)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
	return -1;
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800162a:	605a      	str	r2, [r3, #4]
	return 0;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <_isatty>:

int _isatty(int file)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
	return 1;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
	return 0;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
	...

0800166c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <_sbrk+0x50>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d102      	bne.n	8001682 <_sbrk+0x16>
		heap_end = &end;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <_sbrk+0x50>)
 800167e:	4a10      	ldr	r2, [pc, #64]	; (80016c0 <_sbrk+0x54>)
 8001680:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <_sbrk+0x50>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <_sbrk+0x50>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4413      	add	r3, r2
 8001690:	466a      	mov	r2, sp
 8001692:	4293      	cmp	r3, r2
 8001694:	d907      	bls.n	80016a6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001696:	f001 feeb 	bl	8003470 <__errno>
 800169a:	4602      	mov	r2, r0
 800169c:	230c      	movs	r3, #12
 800169e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295
 80016a4:	e006      	b.n	80016b4 <_sbrk+0x48>
	}

	heap_end += incr;
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <_sbrk+0x50>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	4a03      	ldr	r2, [pc, #12]	; (80016bc <_sbrk+0x50>)
 80016b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80016b2:	68fb      	ldr	r3, [r7, #12]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000204 	.word	0x20000204
 80016c0:	200002a0 	.word	0x200002a0

080016c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <SystemInit+0x28>)
 80016ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ce:	4a07      	ldr	r2, [pc, #28]	; (80016ec <SystemInit+0x28>)
 80016d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <SystemInit+0x28>)
 80016da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016de:	609a      	str	r2, [r3, #8]
#endif
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001728 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016f6:	e003      	b.n	8001700 <LoopCopyDataInit>

080016f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016fe:	3104      	adds	r1, #4

08001700 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001700:	480b      	ldr	r0, [pc, #44]	; (8001730 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001704:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001706:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001708:	d3f6      	bcc.n	80016f8 <CopyDataInit>
  ldr  r2, =_sbss
 800170a:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800170c:	e002      	b.n	8001714 <LoopFillZerobss>

0800170e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800170e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001710:	f842 3b04 	str.w	r3, [r2], #4

08001714 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001716:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001718:	d3f9      	bcc.n	800170e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800171a:	f7ff ffd3 	bl	80016c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800171e:	f001 fead 	bl	800347c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001722:	f7ff fbc1 	bl	8000ea8 <main>
  bx  lr    
 8001726:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001728:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800172c:	08005e38 	.word	0x08005e38
  ldr  r0, =_sdata
 8001730:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001734:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001738:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 800173c:	2000029c 	.word	0x2000029c

08001740 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001740:	e7fe      	b.n	8001740 <ADC_IRQHandler>
	...

08001744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <HAL_Init+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <HAL_Init+0x40>)
 800174e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001752:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_Init+0x40>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <HAL_Init+0x40>)
 800175a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800175e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001760:	4b08      	ldr	r3, [pc, #32]	; (8001784 <HAL_Init+0x40>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a07      	ldr	r2, [pc, #28]	; (8001784 <HAL_Init+0x40>)
 8001766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800176c:	2003      	movs	r0, #3
 800176e:	f000 f94d 	bl	8001a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001772:	2000      	movs	r0, #0
 8001774:	f000 f808 	bl	8001788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001778:	f7ff fe1e 	bl	80013b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40023c00 	.word	0x40023c00

08001788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_InitTick+0x54>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_InitTick+0x58>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4619      	mov	r1, r3
 800179a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179e:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 f965 	bl	8001a76 <HAL_SYSTICK_Config>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e00e      	b.n	80017d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b0f      	cmp	r3, #15
 80017ba:	d80a      	bhi.n	80017d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017bc:	2200      	movs	r2, #0
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295
 80017c4:	f000 f92d 	bl	8001a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c8:	4a06      	ldr	r2, [pc, #24]	; (80017e4 <HAL_InitTick+0x5c>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	e000      	b.n	80017d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000000 	.word	0x20000000
 80017e0:	20000008 	.word	0x20000008
 80017e4:	20000004 	.word	0x20000004

080017e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_IncTick+0x20>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_IncTick+0x24>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4413      	add	r3, r2
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <HAL_IncTick+0x24>)
 80017fa:	6013      	str	r3, [r2, #0]
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000008 	.word	0x20000008
 800180c:	20000294 	.word	0x20000294

08001810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return uwTick;
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <HAL_GetTick+0x14>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20000294 	.word	0x20000294

08001828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff ffee 	bl	8001810 <HAL_GetTick>
 8001834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001840:	d005      	beq.n	800184e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_Delay+0x40>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800184e:	bf00      	nop
 8001850:	f7ff ffde 	bl	8001810 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	429a      	cmp	r2, r3
 800185e:	d8f7      	bhi.n	8001850 <HAL_Delay+0x28>
  {
  }
}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000008 	.word	0x20000008

0800186c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <__NVIC_SetPriorityGrouping+0x44>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001888:	4013      	ands	r3, r2
 800188a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800189c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189e:	4a04      	ldr	r2, [pc, #16]	; (80018b0 <__NVIC_SetPriorityGrouping+0x44>)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	60d3      	str	r3, [r2, #12]
}
 80018a4:	bf00      	nop
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <__NVIC_GetPriorityGrouping+0x18>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	0a1b      	lsrs	r3, r3, #8
 80018be:	f003 0307 	and.w	r3, r3, #7
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	db0b      	blt.n	80018fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	f003 021f 	and.w	r2, r3, #31
 80018e8:	4907      	ldr	r1, [pc, #28]	; (8001908 <__NVIC_EnableIRQ+0x38>)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	095b      	lsrs	r3, r3, #5
 80018f0:	2001      	movs	r0, #1
 80018f2:	fa00 f202 	lsl.w	r2, r0, r2
 80018f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000e100 	.word	0xe000e100

0800190c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	6039      	str	r1, [r7, #0]
 8001916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191c:	2b00      	cmp	r3, #0
 800191e:	db0a      	blt.n	8001936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	b2da      	uxtb	r2, r3
 8001924:	490c      	ldr	r1, [pc, #48]	; (8001958 <__NVIC_SetPriority+0x4c>)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	0112      	lsls	r2, r2, #4
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	440b      	add	r3, r1
 8001930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001934:	e00a      	b.n	800194c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4908      	ldr	r1, [pc, #32]	; (800195c <__NVIC_SetPriority+0x50>)
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	3b04      	subs	r3, #4
 8001944:	0112      	lsls	r2, r2, #4
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	440b      	add	r3, r1
 800194a:	761a      	strb	r2, [r3, #24]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000e100 	.word	0xe000e100
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001960:	b480      	push	{r7}
 8001962:	b089      	sub	sp, #36	; 0x24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f1c3 0307 	rsb	r3, r3, #7
 800197a:	2b04      	cmp	r3, #4
 800197c:	bf28      	it	cs
 800197e:	2304      	movcs	r3, #4
 8001980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3304      	adds	r3, #4
 8001986:	2b06      	cmp	r3, #6
 8001988:	d902      	bls.n	8001990 <NVIC_EncodePriority+0x30>
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3b03      	subs	r3, #3
 800198e:	e000      	b.n	8001992 <NVIC_EncodePriority+0x32>
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	f04f 32ff 	mov.w	r2, #4294967295
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43da      	mvns	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	401a      	ands	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
 80019b2:	43d9      	mvns	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	4313      	orrs	r3, r2
         );
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3724      	adds	r7, #36	; 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d8:	d301      	bcc.n	80019de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019da:	2301      	movs	r3, #1
 80019dc:	e00f      	b.n	80019fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019de:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <SysTick_Config+0x40>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e6:	210f      	movs	r1, #15
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ec:	f7ff ff8e 	bl	800190c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <SysTick_Config+0x40>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f6:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <SysTick_Config+0x40>)
 80019f8:	2207      	movs	r2, #7
 80019fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	e000e010 	.word	0xe000e010

08001a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ff29 	bl	800186c <__NVIC_SetPriorityGrouping>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
 8001a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a34:	f7ff ff3e 	bl	80018b4 <__NVIC_GetPriorityGrouping>
 8001a38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	68b9      	ldr	r1, [r7, #8]
 8001a3e:	6978      	ldr	r0, [r7, #20]
 8001a40:	f7ff ff8e 	bl	8001960 <NVIC_EncodePriority>
 8001a44:	4602      	mov	r2, r0
 8001a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff5d 	bl	800190c <__NVIC_SetPriority>
}
 8001a52:	bf00      	nop
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	4603      	mov	r3, r0
 8001a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff31 	bl	80018d0 <__NVIC_EnableIRQ>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ffa2 	bl	80019c8 <SysTick_Config>
 8001a84:	4603      	mov	r3, r0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b089      	sub	sp, #36	; 0x24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
 8001aaa:	e16b      	b.n	8001d84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aac:	2201      	movs	r2, #1
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	f040 815a 	bne.w	8001d7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d00b      	beq.n	8001aea <HAL_GPIO_Init+0x5a>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d007      	beq.n	8001aea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ade:	2b11      	cmp	r3, #17
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b12      	cmp	r3, #18
 8001ae8:	d130      	bne.n	8001b4c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	2203      	movs	r2, #3
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b20:	2201      	movs	r2, #1
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 0201 	and.w	r2, r3, #1
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	2203      	movs	r2, #3
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0xfc>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b12      	cmp	r3, #18
 8001b8a:	d123      	bne.n	8001bd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	08da      	lsrs	r2, r3, #3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3208      	adds	r2, #8
 8001b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	220f      	movs	r2, #15
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	08da      	lsrs	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3208      	adds	r2, #8
 8001bce:	69b9      	ldr	r1, [r7, #24]
 8001bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	2203      	movs	r2, #3
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0203 	and.w	r2, r3, #3
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80b4 	beq.w	8001d7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	4b5f      	ldr	r3, [pc, #380]	; (8001d98 <HAL_GPIO_Init+0x308>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	4a5e      	ldr	r2, [pc, #376]	; (8001d98 <HAL_GPIO_Init+0x308>)
 8001c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c24:	6453      	str	r3, [r2, #68]	; 0x44
 8001c26:	4b5c      	ldr	r3, [pc, #368]	; (8001d98 <HAL_GPIO_Init+0x308>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c32:	4a5a      	ldr	r2, [pc, #360]	; (8001d9c <HAL_GPIO_Init+0x30c>)
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	089b      	lsrs	r3, r3, #2
 8001c38:	3302      	adds	r3, #2
 8001c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	220f      	movs	r2, #15
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a51      	ldr	r2, [pc, #324]	; (8001da0 <HAL_GPIO_Init+0x310>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d02b      	beq.n	8001cb6 <HAL_GPIO_Init+0x226>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a50      	ldr	r2, [pc, #320]	; (8001da4 <HAL_GPIO_Init+0x314>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d025      	beq.n	8001cb2 <HAL_GPIO_Init+0x222>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4f      	ldr	r2, [pc, #316]	; (8001da8 <HAL_GPIO_Init+0x318>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d01f      	beq.n	8001cae <HAL_GPIO_Init+0x21e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4e      	ldr	r2, [pc, #312]	; (8001dac <HAL_GPIO_Init+0x31c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d019      	beq.n	8001caa <HAL_GPIO_Init+0x21a>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4d      	ldr	r2, [pc, #308]	; (8001db0 <HAL_GPIO_Init+0x320>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d013      	beq.n	8001ca6 <HAL_GPIO_Init+0x216>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a4c      	ldr	r2, [pc, #304]	; (8001db4 <HAL_GPIO_Init+0x324>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d00d      	beq.n	8001ca2 <HAL_GPIO_Init+0x212>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a4b      	ldr	r2, [pc, #300]	; (8001db8 <HAL_GPIO_Init+0x328>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d007      	beq.n	8001c9e <HAL_GPIO_Init+0x20e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a4a      	ldr	r2, [pc, #296]	; (8001dbc <HAL_GPIO_Init+0x32c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d101      	bne.n	8001c9a <HAL_GPIO_Init+0x20a>
 8001c96:	2307      	movs	r3, #7
 8001c98:	e00e      	b.n	8001cb8 <HAL_GPIO_Init+0x228>
 8001c9a:	2308      	movs	r3, #8
 8001c9c:	e00c      	b.n	8001cb8 <HAL_GPIO_Init+0x228>
 8001c9e:	2306      	movs	r3, #6
 8001ca0:	e00a      	b.n	8001cb8 <HAL_GPIO_Init+0x228>
 8001ca2:	2305      	movs	r3, #5
 8001ca4:	e008      	b.n	8001cb8 <HAL_GPIO_Init+0x228>
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	e006      	b.n	8001cb8 <HAL_GPIO_Init+0x228>
 8001caa:	2303      	movs	r3, #3
 8001cac:	e004      	b.n	8001cb8 <HAL_GPIO_Init+0x228>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e002      	b.n	8001cb8 <HAL_GPIO_Init+0x228>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <HAL_GPIO_Init+0x228>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	69fa      	ldr	r2, [r7, #28]
 8001cba:	f002 0203 	and.w	r2, r2, #3
 8001cbe:	0092      	lsls	r2, r2, #2
 8001cc0:	4093      	lsls	r3, r2
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cc8:	4934      	ldr	r1, [pc, #208]	; (8001d9c <HAL_GPIO_Init+0x30c>)
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	089b      	lsrs	r3, r3, #2
 8001cce:	3302      	adds	r3, #2
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cd6:	4b3a      	ldr	r3, [pc, #232]	; (8001dc0 <HAL_GPIO_Init+0x330>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cfa:	4a31      	ldr	r2, [pc, #196]	; (8001dc0 <HAL_GPIO_Init+0x330>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d00:	4b2f      	ldr	r3, [pc, #188]	; (8001dc0 <HAL_GPIO_Init+0x330>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d24:	4a26      	ldr	r2, [pc, #152]	; (8001dc0 <HAL_GPIO_Init+0x330>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d2a:	4b25      	ldr	r3, [pc, #148]	; (8001dc0 <HAL_GPIO_Init+0x330>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d4e:	4a1c      	ldr	r2, [pc, #112]	; (8001dc0 <HAL_GPIO_Init+0x330>)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d54:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <HAL_GPIO_Init+0x330>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d78:	4a11      	ldr	r2, [pc, #68]	; (8001dc0 <HAL_GPIO_Init+0x330>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3301      	adds	r3, #1
 8001d82:	61fb      	str	r3, [r7, #28]
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	2b0f      	cmp	r3, #15
 8001d88:	f67f ae90 	bls.w	8001aac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d8c:	bf00      	nop
 8001d8e:	3724      	adds	r7, #36	; 0x24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40013800 	.word	0x40013800
 8001da0:	40020000 	.word	0x40020000
 8001da4:	40020400 	.word	0x40020400
 8001da8:	40020800 	.word	0x40020800
 8001dac:	40020c00 	.word	0x40020c00
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40021400 	.word	0x40021400
 8001db8:	40021800 	.word	0x40021800
 8001dbc:	40021c00 	.word	0x40021c00
 8001dc0:	40013c00 	.word	0x40013c00

08001dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	807b      	strh	r3, [r7, #2]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd4:	787b      	ldrb	r3, [r7, #1]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dda:	887a      	ldrh	r2, [r7, #2]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001de0:	e003      	b.n	8001dea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001de2:	887b      	ldrh	r3, [r7, #2]
 8001de4:	041a      	lsls	r2, r3, #16
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	619a      	str	r2, [r3, #24]
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695a      	ldr	r2, [r3, #20]
 8001e06:	887b      	ldrh	r3, [r7, #2]
 8001e08:	401a      	ands	r2, r3
 8001e0a:	887b      	ldrh	r3, [r7, #2]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d104      	bne.n	8001e1a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e10:	887b      	ldrh	r3, [r7, #2]
 8001e12:	041a      	lsls	r2, r3, #16
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001e18:	e002      	b.n	8001e20 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001e1a:	887a      	ldrh	r2, [r7, #2]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	619a      	str	r2, [r3, #24]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e25b      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d075      	beq.n	8001f36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e4a:	4ba3      	ldr	r3, [pc, #652]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d00c      	beq.n	8001e70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e56:	4ba0      	ldr	r3, [pc, #640]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d112      	bne.n	8001e88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e62:	4b9d      	ldr	r3, [pc, #628]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e6e:	d10b      	bne.n	8001e88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e70:	4b99      	ldr	r3, [pc, #612]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d05b      	beq.n	8001f34 <HAL_RCC_OscConfig+0x108>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d157      	bne.n	8001f34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e236      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e90:	d106      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x74>
 8001e92:	4b91      	ldr	r3, [pc, #580]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a90      	ldr	r2, [pc, #576]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	e01d      	b.n	8001edc <HAL_RCC_OscConfig+0xb0>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x98>
 8001eaa:	4b8b      	ldr	r3, [pc, #556]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a8a      	ldr	r2, [pc, #552]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	4b88      	ldr	r3, [pc, #544]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a87      	ldr	r2, [pc, #540]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e00b      	b.n	8001edc <HAL_RCC_OscConfig+0xb0>
 8001ec4:	4b84      	ldr	r3, [pc, #528]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a83      	ldr	r2, [pc, #524]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	4b81      	ldr	r3, [pc, #516]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a80      	ldr	r2, [pc, #512]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d013      	beq.n	8001f0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7ff fc94 	bl	8001810 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eec:	f7ff fc90 	bl	8001810 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b64      	cmp	r3, #100	; 0x64
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e1fb      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efe:	4b76      	ldr	r3, [pc, #472]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0xc0>
 8001f0a:	e014      	b.n	8001f36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0c:	f7ff fc80 	bl	8001810 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f14:	f7ff fc7c 	bl	8001810 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b64      	cmp	r3, #100	; 0x64
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e1e7      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f26:	4b6c      	ldr	r3, [pc, #432]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0xe8>
 8001f32:	e000      	b.n	8001f36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d063      	beq.n	800200a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f42:	4b65      	ldr	r3, [pc, #404]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00b      	beq.n	8001f66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f4e:	4b62      	ldr	r3, [pc, #392]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d11c      	bne.n	8001f94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f5a:	4b5f      	ldr	r3, [pc, #380]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d116      	bne.n	8001f94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f66:	4b5c      	ldr	r3, [pc, #368]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d005      	beq.n	8001f7e <HAL_RCC_OscConfig+0x152>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d001      	beq.n	8001f7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e1bb      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7e:	4b56      	ldr	r3, [pc, #344]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4952      	ldr	r1, [pc, #328]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f92:	e03a      	b.n	800200a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d020      	beq.n	8001fde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f9c:	4b4f      	ldr	r3, [pc, #316]	; (80020dc <HAL_RCC_OscConfig+0x2b0>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa2:	f7ff fc35 	bl	8001810 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001faa:	f7ff fc31 	bl	8001810 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e19c      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbc:	4b46      	ldr	r3, [pc, #280]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc8:	4b43      	ldr	r3, [pc, #268]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4940      	ldr	r1, [pc, #256]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	600b      	str	r3, [r1, #0]
 8001fdc:	e015      	b.n	800200a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fde:	4b3f      	ldr	r3, [pc, #252]	; (80020dc <HAL_RCC_OscConfig+0x2b0>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe4:	f7ff fc14 	bl	8001810 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fec:	f7ff fc10 	bl	8001810 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e17b      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffe:	4b36      	ldr	r3, [pc, #216]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d030      	beq.n	8002078 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d016      	beq.n	800204c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800201e:	4b30      	ldr	r3, [pc, #192]	; (80020e0 <HAL_RCC_OscConfig+0x2b4>)
 8002020:	2201      	movs	r2, #1
 8002022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002024:	f7ff fbf4 	bl	8001810 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800202c:	f7ff fbf0 	bl	8001810 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e15b      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203e:	4b26      	ldr	r3, [pc, #152]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8002040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0x200>
 800204a:	e015      	b.n	8002078 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800204c:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <HAL_RCC_OscConfig+0x2b4>)
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002052:	f7ff fbdd 	bl	8001810 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800205a:	f7ff fbd9 	bl	8001810 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e144      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206c:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 800206e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1f0      	bne.n	800205a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 80a0 	beq.w	80021c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002086:	2300      	movs	r3, #0
 8002088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208a:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10f      	bne.n	80020b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a0e      	ldr	r2, [pc, #56]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
 80020a6:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b2:	2301      	movs	r3, #1
 80020b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_RCC_OscConfig+0x2b8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d121      	bne.n	8002106 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c2:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <HAL_RCC_OscConfig+0x2b8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a07      	ldr	r2, [pc, #28]	; (80020e4 <HAL_RCC_OscConfig+0x2b8>)
 80020c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ce:	f7ff fb9f 	bl	8001810 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d4:	e011      	b.n	80020fa <HAL_RCC_OscConfig+0x2ce>
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800
 80020dc:	42470000 	.word	0x42470000
 80020e0:	42470e80 	.word	0x42470e80
 80020e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e8:	f7ff fb92 	bl	8001810 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e0fd      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fa:	4b81      	ldr	r3, [pc, #516]	; (8002300 <HAL_RCC_OscConfig+0x4d4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d106      	bne.n	800211c <HAL_RCC_OscConfig+0x2f0>
 800210e:	4b7d      	ldr	r3, [pc, #500]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002112:	4a7c      	ldr	r2, [pc, #496]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6713      	str	r3, [r2, #112]	; 0x70
 800211a:	e01c      	b.n	8002156 <HAL_RCC_OscConfig+0x32a>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b05      	cmp	r3, #5
 8002122:	d10c      	bne.n	800213e <HAL_RCC_OscConfig+0x312>
 8002124:	4b77      	ldr	r3, [pc, #476]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 8002126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002128:	4a76      	ldr	r2, [pc, #472]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 800212a:	f043 0304 	orr.w	r3, r3, #4
 800212e:	6713      	str	r3, [r2, #112]	; 0x70
 8002130:	4b74      	ldr	r3, [pc, #464]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 8002132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002134:	4a73      	ldr	r2, [pc, #460]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	6713      	str	r3, [r2, #112]	; 0x70
 800213c:	e00b      	b.n	8002156 <HAL_RCC_OscConfig+0x32a>
 800213e:	4b71      	ldr	r3, [pc, #452]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 8002140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002142:	4a70      	ldr	r2, [pc, #448]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 8002144:	f023 0301 	bic.w	r3, r3, #1
 8002148:	6713      	str	r3, [r2, #112]	; 0x70
 800214a:	4b6e      	ldr	r3, [pc, #440]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 800214c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214e:	4a6d      	ldr	r2, [pc, #436]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 8002150:	f023 0304 	bic.w	r3, r3, #4
 8002154:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d015      	beq.n	800218a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215e:	f7ff fb57 	bl	8001810 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002164:	e00a      	b.n	800217c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002166:	f7ff fb53 	bl	8001810 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	f241 3288 	movw	r2, #5000	; 0x1388
 8002174:	4293      	cmp	r3, r2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e0bc      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217c:	4b61      	ldr	r3, [pc, #388]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0ee      	beq.n	8002166 <HAL_RCC_OscConfig+0x33a>
 8002188:	e014      	b.n	80021b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218a:	f7ff fb41 	bl	8001810 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002190:	e00a      	b.n	80021a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002192:	f7ff fb3d 	bl	8001810 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e0a6      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a8:	4b56      	ldr	r3, [pc, #344]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1ee      	bne.n	8002192 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021b4:	7dfb      	ldrb	r3, [r7, #23]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d105      	bne.n	80021c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ba:	4b52      	ldr	r3, [pc, #328]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a51      	ldr	r2, [pc, #324]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 80021c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 8092 	beq.w	80022f4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021d0:	4b4c      	ldr	r3, [pc, #304]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 030c 	and.w	r3, r3, #12
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d05c      	beq.n	8002296 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d141      	bne.n	8002268 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e4:	4b48      	ldr	r3, [pc, #288]	; (8002308 <HAL_RCC_OscConfig+0x4dc>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7ff fb11 	bl	8001810 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f2:	f7ff fb0d 	bl	8001810 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e078      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002204:	4b3f      	ldr	r3, [pc, #252]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1f0      	bne.n	80021f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69da      	ldr	r2, [r3, #28]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	019b      	lsls	r3, r3, #6
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002226:	085b      	lsrs	r3, r3, #1
 8002228:	3b01      	subs	r3, #1
 800222a:	041b      	lsls	r3, r3, #16
 800222c:	431a      	orrs	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002232:	061b      	lsls	r3, r3, #24
 8002234:	4933      	ldr	r1, [pc, #204]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 8002236:	4313      	orrs	r3, r2
 8002238:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800223a:	4b33      	ldr	r3, [pc, #204]	; (8002308 <HAL_RCC_OscConfig+0x4dc>)
 800223c:	2201      	movs	r2, #1
 800223e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7ff fae6 	bl	8001810 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002248:	f7ff fae2 	bl	8001810 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e04d      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800225a:	4b2a      	ldr	r3, [pc, #168]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCC_OscConfig+0x41c>
 8002266:	e045      	b.n	80022f4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002268:	4b27      	ldr	r3, [pc, #156]	; (8002308 <HAL_RCC_OscConfig+0x4dc>)
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226e:	f7ff facf 	bl	8001810 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002276:	f7ff facb 	bl	8001810 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e036      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002288:	4b1e      	ldr	r3, [pc, #120]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f0      	bne.n	8002276 <HAL_RCC_OscConfig+0x44a>
 8002294:	e02e      	b.n	80022f4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e029      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022a2:	4b18      	ldr	r3, [pc, #96]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d11c      	bne.n	80022f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d115      	bne.n	80022f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022ca:	4013      	ands	r3, r2
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d10d      	bne.n	80022f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022de:	429a      	cmp	r2, r3
 80022e0:	d106      	bne.n	80022f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40007000 	.word	0x40007000
 8002304:	40023800 	.word	0x40023800
 8002308:	42470060 	.word	0x42470060

0800230c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0cc      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002320:	4b68      	ldr	r3, [pc, #416]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d90c      	bls.n	8002348 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232e:	4b65      	ldr	r3, [pc, #404]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	4b63      	ldr	r3, [pc, #396]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d001      	beq.n	8002348 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0b8      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d020      	beq.n	8002396 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002360:	4b59      	ldr	r3, [pc, #356]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4a58      	ldr	r2, [pc, #352]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800236a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002378:	4b53      	ldr	r3, [pc, #332]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	4a52      	ldr	r2, [pc, #328]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002382:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002384:	4b50      	ldr	r3, [pc, #320]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	494d      	ldr	r1, [pc, #308]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	4313      	orrs	r3, r2
 8002394:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d044      	beq.n	800242c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d107      	bne.n	80023ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023aa:	4b47      	ldr	r3, [pc, #284]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d119      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e07f      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d003      	beq.n	80023ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ca:	4b3f      	ldr	r3, [pc, #252]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e06f      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023da:	4b3b      	ldr	r3, [pc, #236]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e067      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ea:	4b37      	ldr	r3, [pc, #220]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f023 0203 	bic.w	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4934      	ldr	r1, [pc, #208]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023fc:	f7ff fa08 	bl	8001810 <HAL_GetTick>
 8002400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002402:	e00a      	b.n	800241a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002404:	f7ff fa04 	bl	8001810 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e04f      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241a:	4b2b      	ldr	r3, [pc, #172]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 020c 	and.w	r2, r3, #12
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	429a      	cmp	r2, r3
 800242a:	d1eb      	bne.n	8002404 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800242c:	4b25      	ldr	r3, [pc, #148]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 030f 	and.w	r3, r3, #15
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d20c      	bcs.n	8002454 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002442:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d001      	beq.n	8002454 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e032      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002460:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4916      	ldr	r1, [pc, #88]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	4313      	orrs	r3, r2
 8002470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d009      	beq.n	8002492 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800247e:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	490e      	ldr	r1, [pc, #56]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002492:	f000 f821 	bl	80024d8 <HAL_RCC_GetSysClockFreq>
 8002496:	4601      	mov	r1, r0
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	5cd3      	ldrb	r3, [r2, r3]
 80024a6:	fa21 f303 	lsr.w	r3, r1, r3
 80024aa:	4a09      	ldr	r2, [pc, #36]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff f968 	bl	8001788 <HAL_InitTick>

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023c00 	.word	0x40023c00
 80024c8:	40023800 	.word	0x40023800
 80024cc:	08005b58 	.word	0x08005b58
 80024d0:	20000000 	.word	0x20000000
 80024d4:	20000004 	.word	0x20000004

080024d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	607b      	str	r3, [r7, #4]
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	2300      	movs	r3, #0
 80024e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024ee:	4b50      	ldr	r3, [pc, #320]	; (8002630 <HAL_RCC_GetSysClockFreq+0x158>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d007      	beq.n	800250a <HAL_RCC_GetSysClockFreq+0x32>
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d008      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0x38>
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f040 808d 	bne.w	800261e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002504:	4b4b      	ldr	r3, [pc, #300]	; (8002634 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002506:	60bb      	str	r3, [r7, #8]
       break;
 8002508:	e08c      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800250a:	4b4b      	ldr	r3, [pc, #300]	; (8002638 <HAL_RCC_GetSysClockFreq+0x160>)
 800250c:	60bb      	str	r3, [r7, #8]
      break;
 800250e:	e089      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002510:	4b47      	ldr	r3, [pc, #284]	; (8002630 <HAL_RCC_GetSysClockFreq+0x158>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002518:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800251a:	4b45      	ldr	r3, [pc, #276]	; (8002630 <HAL_RCC_GetSysClockFreq+0x158>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d023      	beq.n	800256e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002526:	4b42      	ldr	r3, [pc, #264]	; (8002630 <HAL_RCC_GetSysClockFreq+0x158>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	099b      	lsrs	r3, r3, #6
 800252c:	f04f 0400 	mov.w	r4, #0
 8002530:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	ea03 0501 	and.w	r5, r3, r1
 800253c:	ea04 0602 	and.w	r6, r4, r2
 8002540:	4a3d      	ldr	r2, [pc, #244]	; (8002638 <HAL_RCC_GetSysClockFreq+0x160>)
 8002542:	fb02 f106 	mul.w	r1, r2, r6
 8002546:	2200      	movs	r2, #0
 8002548:	fb02 f205 	mul.w	r2, r2, r5
 800254c:	440a      	add	r2, r1
 800254e:	493a      	ldr	r1, [pc, #232]	; (8002638 <HAL_RCC_GetSysClockFreq+0x160>)
 8002550:	fba5 0101 	umull	r0, r1, r5, r1
 8002554:	1853      	adds	r3, r2, r1
 8002556:	4619      	mov	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f04f 0400 	mov.w	r4, #0
 800255e:	461a      	mov	r2, r3
 8002560:	4623      	mov	r3, r4
 8002562:	f7fe fb21 	bl	8000ba8 <__aeabi_uldivmod>
 8002566:	4603      	mov	r3, r0
 8002568:	460c      	mov	r4, r1
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	e049      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800256e:	4b30      	ldr	r3, [pc, #192]	; (8002630 <HAL_RCC_GetSysClockFreq+0x158>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	099b      	lsrs	r3, r3, #6
 8002574:	f04f 0400 	mov.w	r4, #0
 8002578:	f240 11ff 	movw	r1, #511	; 0x1ff
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	ea03 0501 	and.w	r5, r3, r1
 8002584:	ea04 0602 	and.w	r6, r4, r2
 8002588:	4629      	mov	r1, r5
 800258a:	4632      	mov	r2, r6
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	f04f 0400 	mov.w	r4, #0
 8002594:	0154      	lsls	r4, r2, #5
 8002596:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800259a:	014b      	lsls	r3, r1, #5
 800259c:	4619      	mov	r1, r3
 800259e:	4622      	mov	r2, r4
 80025a0:	1b49      	subs	r1, r1, r5
 80025a2:	eb62 0206 	sbc.w	r2, r2, r6
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	f04f 0400 	mov.w	r4, #0
 80025ae:	0194      	lsls	r4, r2, #6
 80025b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025b4:	018b      	lsls	r3, r1, #6
 80025b6:	1a5b      	subs	r3, r3, r1
 80025b8:	eb64 0402 	sbc.w	r4, r4, r2
 80025bc:	f04f 0100 	mov.w	r1, #0
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	00e2      	lsls	r2, r4, #3
 80025c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80025ca:	00d9      	lsls	r1, r3, #3
 80025cc:	460b      	mov	r3, r1
 80025ce:	4614      	mov	r4, r2
 80025d0:	195b      	adds	r3, r3, r5
 80025d2:	eb44 0406 	adc.w	r4, r4, r6
 80025d6:	f04f 0100 	mov.w	r1, #0
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	02a2      	lsls	r2, r4, #10
 80025e0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80025e4:	0299      	lsls	r1, r3, #10
 80025e6:	460b      	mov	r3, r1
 80025e8:	4614      	mov	r4, r2
 80025ea:	4618      	mov	r0, r3
 80025ec:	4621      	mov	r1, r4
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f04f 0400 	mov.w	r4, #0
 80025f4:	461a      	mov	r2, r3
 80025f6:	4623      	mov	r3, r4
 80025f8:	f7fe fad6 	bl	8000ba8 <__aeabi_uldivmod>
 80025fc:	4603      	mov	r3, r0
 80025fe:	460c      	mov	r4, r1
 8002600:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002602:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_RCC_GetSysClockFreq+0x158>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	0c1b      	lsrs	r3, r3, #16
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	3301      	adds	r3, #1
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	fbb2 f3f3 	udiv	r3, r2, r3
 800261a:	60bb      	str	r3, [r7, #8]
      break;
 800261c:	e002      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800261e:	4b05      	ldr	r3, [pc, #20]	; (8002634 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002620:	60bb      	str	r3, [r7, #8]
      break;
 8002622:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002624:	68bb      	ldr	r3, [r7, #8]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800
 8002634:	00f42400 	.word	0x00f42400
 8002638:	017d7840 	.word	0x017d7840

0800263c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e01d      	b.n	800268a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d106      	bne.n	8002668 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7fe fed0 	bl	8001408 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2202      	movs	r2, #2
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3304      	adds	r3, #4
 8002678:	4619      	mov	r1, r3
 800267a:	4610      	mov	r0, r2
 800267c:	f000 fbde 	bl	8002e3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e01d      	b.n	80026e0 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d106      	bne.n	80026be <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f815 	bl	80026e8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2202      	movs	r2, #2
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3304      	adds	r3, #4
 80026ce:	4619      	mov	r1, r3
 80026d0:	4610      	mov	r0, r2
 80026d2:	f000 fbb3 	bl	8002e3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b0c      	cmp	r3, #12
 800270a:	d841      	bhi.n	8002790 <HAL_TIM_IC_Start_IT+0x94>
 800270c:	a201      	add	r2, pc, #4	; (adr r2, 8002714 <HAL_TIM_IC_Start_IT+0x18>)
 800270e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002712:	bf00      	nop
 8002714:	08002749 	.word	0x08002749
 8002718:	08002791 	.word	0x08002791
 800271c:	08002791 	.word	0x08002791
 8002720:	08002791 	.word	0x08002791
 8002724:	0800275b 	.word	0x0800275b
 8002728:	08002791 	.word	0x08002791
 800272c:	08002791 	.word	0x08002791
 8002730:	08002791 	.word	0x08002791
 8002734:	0800276d 	.word	0x0800276d
 8002738:	08002791 	.word	0x08002791
 800273c:	08002791 	.word	0x08002791
 8002740:	08002791 	.word	0x08002791
 8002744:	0800277f 	.word	0x0800277f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0202 	orr.w	r2, r2, #2
 8002756:	60da      	str	r2, [r3, #12]
      break;
 8002758:	e01b      	b.n	8002792 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0204 	orr.w	r2, r2, #4
 8002768:	60da      	str	r2, [r3, #12]
      break;
 800276a:	e012      	b.n	8002792 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0208 	orr.w	r2, r2, #8
 800277a:	60da      	str	r2, [r3, #12]
      break;
 800277c:	e009      	b.n	8002792 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 0210 	orr.w	r2, r2, #16
 800278c:	60da      	str	r2, [r3, #12]
      break;
 800278e:	e000      	b.n	8002792 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8002790:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2201      	movs	r2, #1
 8002798:	6839      	ldr	r1, [r7, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f000 fdb2 	bl	8003304 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2b06      	cmp	r3, #6
 80027b0:	d007      	beq.n	80027c2 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 0201 	orr.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b0c      	cmp	r3, #12
 80027da:	d841      	bhi.n	8002860 <HAL_TIM_IC_Stop_IT+0x94>
 80027dc:	a201      	add	r2, pc, #4	; (adr r2, 80027e4 <HAL_TIM_IC_Stop_IT+0x18>)
 80027de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e2:	bf00      	nop
 80027e4:	08002819 	.word	0x08002819
 80027e8:	08002861 	.word	0x08002861
 80027ec:	08002861 	.word	0x08002861
 80027f0:	08002861 	.word	0x08002861
 80027f4:	0800282b 	.word	0x0800282b
 80027f8:	08002861 	.word	0x08002861
 80027fc:	08002861 	.word	0x08002861
 8002800:	08002861 	.word	0x08002861
 8002804:	0800283d 	.word	0x0800283d
 8002808:	08002861 	.word	0x08002861
 800280c:	08002861 	.word	0x08002861
 8002810:	08002861 	.word	0x08002861
 8002814:	0800284f 	.word	0x0800284f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0202 	bic.w	r2, r2, #2
 8002826:	60da      	str	r2, [r3, #12]
      break;
 8002828:	e01b      	b.n	8002862 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0204 	bic.w	r2, r2, #4
 8002838:	60da      	str	r2, [r3, #12]
      break;
 800283a:	e012      	b.n	8002862 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0208 	bic.w	r2, r2, #8
 800284a:	60da      	str	r2, [r3, #12]
      break;
 800284c:	e009      	b.n	8002862 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0210 	bic.w	r2, r2, #16
 800285c:	60da      	str	r2, [r3, #12]
      break;
 800285e:	e000      	b.n	8002862 <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8002860:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2200      	movs	r2, #0
 8002868:	6839      	ldr	r1, [r7, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f000 fd4a 	bl	8003304 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6a1a      	ldr	r2, [r3, #32]
 8002876:	f241 1311 	movw	r3, #4369	; 0x1111
 800287a:	4013      	ands	r3, r2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10f      	bne.n	80028a0 <HAL_TIM_IC_Stop_IT+0xd4>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6a1a      	ldr	r2, [r3, #32]
 8002886:	f240 4344 	movw	r3, #1092	; 0x444
 800288a:	4013      	ands	r3, r2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d107      	bne.n	80028a0 <HAL_TIM_IC_Stop_IT+0xd4>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0201 	bic.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop

080028ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d122      	bne.n	8002908 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d11b      	bne.n	8002908 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0202 	mvn.w	r2, #2
 80028d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fe fcea 	bl	80012c8 <HAL_TIM_IC_CaptureCallback>
 80028f4:	e005      	b.n	8002902 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 fa82 	bl	8002e00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 fa89 	bl	8002e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	2b04      	cmp	r3, #4
 8002914:	d122      	bne.n	800295c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b04      	cmp	r3, #4
 8002922:	d11b      	bne.n	800295c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0204 	mvn.w	r2, #4
 800292c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2202      	movs	r2, #2
 8002932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7fe fcc0 	bl	80012c8 <HAL_TIM_IC_CaptureCallback>
 8002948:	e005      	b.n	8002956 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 fa58 	bl	8002e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 fa5f 	bl	8002e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b08      	cmp	r3, #8
 8002968:	d122      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b08      	cmp	r3, #8
 8002976:	d11b      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f06f 0208 	mvn.w	r2, #8
 8002980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2204      	movs	r2, #4
 8002986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fe fc96 	bl	80012c8 <HAL_TIM_IC_CaptureCallback>
 800299c:	e005      	b.n	80029aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 fa2e 	bl	8002e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 fa35 	bl	8002e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f003 0310 	and.w	r3, r3, #16
 80029ba:	2b10      	cmp	r3, #16
 80029bc:	d122      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0310 	and.w	r3, r3, #16
 80029c8:	2b10      	cmp	r3, #16
 80029ca:	d11b      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f06f 0210 	mvn.w	r2, #16
 80029d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2208      	movs	r2, #8
 80029da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7fe fc6c 	bl	80012c8 <HAL_TIM_IC_CaptureCallback>
 80029f0:	e005      	b.n	80029fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 fa04 	bl	8002e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 fa0b 	bl	8002e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d10e      	bne.n	8002a30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d107      	bne.n	8002a30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0201 	mvn.w	r2, #1
 8002a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f9de 	bl	8002dec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3a:	2b80      	cmp	r3, #128	; 0x80
 8002a3c:	d10e      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a48:	2b80      	cmp	r3, #128	; 0x80
 8002a4a:	d107      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 fd00 	bl	800345c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a66:	2b40      	cmp	r3, #64	; 0x40
 8002a68:	d10e      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a74:	2b40      	cmp	r3, #64	; 0x40
 8002a76:	d107      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f9d0 	bl	8002e28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f003 0320 	and.w	r3, r3, #32
 8002a92:	2b20      	cmp	r3, #32
 8002a94:	d10e      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b20      	cmp	r3, #32
 8002aa2:	d107      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0220 	mvn.w	r2, #32
 8002aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fcca 	bl	8003448 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e08a      	b.n	8002bec <HAL_TIM_IC_ConfigChannel+0x130>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d11b      	bne.n	8002b24 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6818      	ldr	r0, [r3, #0]
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	6819      	ldr	r1, [r3, #0]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f000 fa3e 	bl	8002f7c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699a      	ldr	r2, [r3, #24]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 020c 	bic.w	r2, r2, #12
 8002b0e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6999      	ldr	r1, [r3, #24]
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	619a      	str	r2, [r3, #24]
 8002b22:	e05a      	b.n	8002bda <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d11c      	bne.n	8002b64 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	6819      	ldr	r1, [r3, #0]
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f000 fac2 	bl	80030c2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699a      	ldr	r2, [r3, #24]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b4c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6999      	ldr	r1, [r3, #24]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	021a      	lsls	r2, r3, #8
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	619a      	str	r2, [r3, #24]
 8002b62:	e03a      	b.n	8002bda <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d11b      	bne.n	8002ba2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	6819      	ldr	r1, [r3, #0]
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f000 fb0f 	bl	800319c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	69da      	ldr	r2, [r3, #28]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 020c 	bic.w	r2, r2, #12
 8002b8c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	69d9      	ldr	r1, [r3, #28]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	61da      	str	r2, [r3, #28]
 8002ba0:	e01b      	b.n	8002bda <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	6819      	ldr	r1, [r3, #0]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f000 fb2f 	bl	8003214 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	69da      	ldr	r2, [r3, #28]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002bc4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69d9      	ldr	r1, [r3, #28]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	021a      	lsls	r2, r3, #8
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_TIM_ConfigClockSource+0x18>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e0a6      	b.n	8002d5a <HAL_TIM_ConfigClockSource+0x166>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c32:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b40      	cmp	r3, #64	; 0x40
 8002c42:	d067      	beq.n	8002d14 <HAL_TIM_ConfigClockSource+0x120>
 8002c44:	2b40      	cmp	r3, #64	; 0x40
 8002c46:	d80b      	bhi.n	8002c60 <HAL_TIM_ConfigClockSource+0x6c>
 8002c48:	2b10      	cmp	r3, #16
 8002c4a:	d073      	beq.n	8002d34 <HAL_TIM_ConfigClockSource+0x140>
 8002c4c:	2b10      	cmp	r3, #16
 8002c4e:	d802      	bhi.n	8002c56 <HAL_TIM_ConfigClockSource+0x62>
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d06f      	beq.n	8002d34 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002c54:	e078      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	d06c      	beq.n	8002d34 <HAL_TIM_ConfigClockSource+0x140>
 8002c5a:	2b30      	cmp	r3, #48	; 0x30
 8002c5c:	d06a      	beq.n	8002d34 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002c5e:	e073      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c60:	2b70      	cmp	r3, #112	; 0x70
 8002c62:	d00d      	beq.n	8002c80 <HAL_TIM_ConfigClockSource+0x8c>
 8002c64:	2b70      	cmp	r3, #112	; 0x70
 8002c66:	d804      	bhi.n	8002c72 <HAL_TIM_ConfigClockSource+0x7e>
 8002c68:	2b50      	cmp	r3, #80	; 0x50
 8002c6a:	d033      	beq.n	8002cd4 <HAL_TIM_ConfigClockSource+0xe0>
 8002c6c:	2b60      	cmp	r3, #96	; 0x60
 8002c6e:	d041      	beq.n	8002cf4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002c70:	e06a      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c76:	d066      	beq.n	8002d46 <HAL_TIM_ConfigClockSource+0x152>
 8002c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c7c:	d017      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002c7e:	e063      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	6899      	ldr	r1, [r3, #8]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f000 fb18 	bl	80032c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ca2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	609a      	str	r2, [r3, #8]
      break;
 8002cac:	e04c      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6899      	ldr	r1, [r3, #8]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f000 fb01 	bl	80032c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cd0:	609a      	str	r2, [r3, #8]
      break;
 8002cd2:	e039      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6818      	ldr	r0, [r3, #0]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	6859      	ldr	r1, [r3, #4]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	f000 f9bf 	bl	8003064 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2150      	movs	r1, #80	; 0x50
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 face 	bl	800328e <TIM_ITRx_SetConfig>
      break;
 8002cf2:	e029      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6818      	ldr	r0, [r3, #0]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	6859      	ldr	r1, [r3, #4]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	461a      	mov	r2, r3
 8002d02:	f000 fa1b 	bl	800313c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2160      	movs	r1, #96	; 0x60
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 fabe 	bl	800328e <TIM_ITRx_SetConfig>
      break;
 8002d12:	e019      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6818      	ldr	r0, [r3, #0]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	6859      	ldr	r1, [r3, #4]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	461a      	mov	r2, r3
 8002d22:	f000 f99f 	bl	8003064 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2140      	movs	r1, #64	; 0x40
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 faae 	bl	800328e <TIM_ITRx_SetConfig>
      break;
 8002d32:	e009      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4610      	mov	r0, r2
 8002d40:	f000 faa5 	bl	800328e <TIM_ITRx_SetConfig>
      break;
 8002d44:	e000      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002d46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b0c      	cmp	r3, #12
 8002d76:	d831      	bhi.n	8002ddc <HAL_TIM_ReadCapturedValue+0x78>
 8002d78:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7e:	bf00      	nop
 8002d80:	08002db5 	.word	0x08002db5
 8002d84:	08002ddd 	.word	0x08002ddd
 8002d88:	08002ddd 	.word	0x08002ddd
 8002d8c:	08002ddd 	.word	0x08002ddd
 8002d90:	08002dbf 	.word	0x08002dbf
 8002d94:	08002ddd 	.word	0x08002ddd
 8002d98:	08002ddd 	.word	0x08002ddd
 8002d9c:	08002ddd 	.word	0x08002ddd
 8002da0:	08002dc9 	.word	0x08002dc9
 8002da4:	08002ddd 	.word	0x08002ddd
 8002da8:	08002ddd 	.word	0x08002ddd
 8002dac:	08002ddd 	.word	0x08002ddd
 8002db0:	08002dd3 	.word	0x08002dd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dba:	60fb      	str	r3, [r7, #12]

      break;
 8002dbc:	e00f      	b.n	8002dde <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc4:	60fb      	str	r3, [r7, #12]

      break;
 8002dc6:	e00a      	b.n	8002dde <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dce:	60fb      	str	r3, [r7, #12]

      break;
 8002dd0:	e005      	b.n	8002dde <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	60fb      	str	r3, [r7, #12]

      break;
 8002dda:	e000      	b.n	8002dde <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002ddc:	bf00      	nop
  }

  return tmpreg;
 8002dde:	68fb      	ldr	r3, [r7, #12]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a40      	ldr	r2, [pc, #256]	; (8002f50 <TIM_Base_SetConfig+0x114>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d013      	beq.n	8002e7c <TIM_Base_SetConfig+0x40>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e5a:	d00f      	beq.n	8002e7c <TIM_Base_SetConfig+0x40>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a3d      	ldr	r2, [pc, #244]	; (8002f54 <TIM_Base_SetConfig+0x118>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d00b      	beq.n	8002e7c <TIM_Base_SetConfig+0x40>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a3c      	ldr	r2, [pc, #240]	; (8002f58 <TIM_Base_SetConfig+0x11c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d007      	beq.n	8002e7c <TIM_Base_SetConfig+0x40>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a3b      	ldr	r2, [pc, #236]	; (8002f5c <TIM_Base_SetConfig+0x120>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d003      	beq.n	8002e7c <TIM_Base_SetConfig+0x40>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a3a      	ldr	r2, [pc, #232]	; (8002f60 <TIM_Base_SetConfig+0x124>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d108      	bne.n	8002e8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a2f      	ldr	r2, [pc, #188]	; (8002f50 <TIM_Base_SetConfig+0x114>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d02b      	beq.n	8002eee <TIM_Base_SetConfig+0xb2>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e9c:	d027      	beq.n	8002eee <TIM_Base_SetConfig+0xb2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a2c      	ldr	r2, [pc, #176]	; (8002f54 <TIM_Base_SetConfig+0x118>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d023      	beq.n	8002eee <TIM_Base_SetConfig+0xb2>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a2b      	ldr	r2, [pc, #172]	; (8002f58 <TIM_Base_SetConfig+0x11c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d01f      	beq.n	8002eee <TIM_Base_SetConfig+0xb2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a2a      	ldr	r2, [pc, #168]	; (8002f5c <TIM_Base_SetConfig+0x120>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d01b      	beq.n	8002eee <TIM_Base_SetConfig+0xb2>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a29      	ldr	r2, [pc, #164]	; (8002f60 <TIM_Base_SetConfig+0x124>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d017      	beq.n	8002eee <TIM_Base_SetConfig+0xb2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a28      	ldr	r2, [pc, #160]	; (8002f64 <TIM_Base_SetConfig+0x128>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d013      	beq.n	8002eee <TIM_Base_SetConfig+0xb2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a27      	ldr	r2, [pc, #156]	; (8002f68 <TIM_Base_SetConfig+0x12c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00f      	beq.n	8002eee <TIM_Base_SetConfig+0xb2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a26      	ldr	r2, [pc, #152]	; (8002f6c <TIM_Base_SetConfig+0x130>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00b      	beq.n	8002eee <TIM_Base_SetConfig+0xb2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a25      	ldr	r2, [pc, #148]	; (8002f70 <TIM_Base_SetConfig+0x134>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d007      	beq.n	8002eee <TIM_Base_SetConfig+0xb2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a24      	ldr	r2, [pc, #144]	; (8002f74 <TIM_Base_SetConfig+0x138>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d003      	beq.n	8002eee <TIM_Base_SetConfig+0xb2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a23      	ldr	r2, [pc, #140]	; (8002f78 <TIM_Base_SetConfig+0x13c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d108      	bne.n	8002f00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a0a      	ldr	r2, [pc, #40]	; (8002f50 <TIM_Base_SetConfig+0x114>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d003      	beq.n	8002f34 <TIM_Base_SetConfig+0xf8>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a0c      	ldr	r2, [pc, #48]	; (8002f60 <TIM_Base_SetConfig+0x124>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d103      	bne.n	8002f3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	615a      	str	r2, [r3, #20]
}
 8002f42:	bf00      	nop
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40010000 	.word	0x40010000
 8002f54:	40000400 	.word	0x40000400
 8002f58:	40000800 	.word	0x40000800
 8002f5c:	40000c00 	.word	0x40000c00
 8002f60:	40010400 	.word	0x40010400
 8002f64:	40014000 	.word	0x40014000
 8002f68:	40014400 	.word	0x40014400
 8002f6c:	40014800 	.word	0x40014800
 8002f70:	40001800 	.word	0x40001800
 8002f74:	40001c00 	.word	0x40001c00
 8002f78:	40002000 	.word	0x40002000

08002f7c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
 8002f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	f023 0201 	bic.w	r2, r3, #1
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	4a28      	ldr	r2, [pc, #160]	; (8003048 <TIM_TI1_SetConfig+0xcc>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d01b      	beq.n	8002fe2 <TIM_TI1_SetConfig+0x66>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb0:	d017      	beq.n	8002fe2 <TIM_TI1_SetConfig+0x66>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4a25      	ldr	r2, [pc, #148]	; (800304c <TIM_TI1_SetConfig+0xd0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d013      	beq.n	8002fe2 <TIM_TI1_SetConfig+0x66>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4a24      	ldr	r2, [pc, #144]	; (8003050 <TIM_TI1_SetConfig+0xd4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00f      	beq.n	8002fe2 <TIM_TI1_SetConfig+0x66>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4a23      	ldr	r2, [pc, #140]	; (8003054 <TIM_TI1_SetConfig+0xd8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d00b      	beq.n	8002fe2 <TIM_TI1_SetConfig+0x66>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4a22      	ldr	r2, [pc, #136]	; (8003058 <TIM_TI1_SetConfig+0xdc>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d007      	beq.n	8002fe2 <TIM_TI1_SetConfig+0x66>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4a21      	ldr	r2, [pc, #132]	; (800305c <TIM_TI1_SetConfig+0xe0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d003      	beq.n	8002fe2 <TIM_TI1_SetConfig+0x66>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	4a20      	ldr	r2, [pc, #128]	; (8003060 <TIM_TI1_SetConfig+0xe4>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d101      	bne.n	8002fe6 <TIM_TI1_SetConfig+0x6a>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <TIM_TI1_SetConfig+0x6c>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f023 0303 	bic.w	r3, r3, #3
 8002ff2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	e003      	b.n	8003006 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800300c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	b2db      	uxtb	r3, r3
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	4313      	orrs	r3, r2
 8003018:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	f023 030a 	bic.w	r3, r3, #10
 8003020:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f003 030a 	and.w	r3, r3, #10
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	4313      	orrs	r3, r2
 800302c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	621a      	str	r2, [r3, #32]
}
 800303a:	bf00      	nop
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40010000 	.word	0x40010000
 800304c:	40000400 	.word	0x40000400
 8003050:	40000800 	.word	0x40000800
 8003054:	40000c00 	.word	0x40000c00
 8003058:	40010400 	.word	0x40010400
 800305c:	40014000 	.word	0x40014000
 8003060:	40001800 	.word	0x40001800

08003064 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003064:	b480      	push	{r7}
 8003066:	b087      	sub	sp, #28
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	f023 0201 	bic.w	r2, r3, #1
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800308e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4313      	orrs	r3, r2
 8003098:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f023 030a 	bic.w	r3, r3, #10
 80030a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	621a      	str	r2, [r3, #32]
}
 80030b6:	bf00      	nop
 80030b8:	371c      	adds	r7, #28
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b087      	sub	sp, #28
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	60f8      	str	r0, [r7, #12]
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	607a      	str	r2, [r7, #4]
 80030ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	f023 0210 	bic.w	r2, r3, #16
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	021b      	lsls	r3, r3, #8
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003100:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	031b      	lsls	r3, r3, #12
 8003106:	b29b      	uxth	r3, r3
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	4313      	orrs	r3, r2
 800310c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003114:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	621a      	str	r2, [r3, #32]
}
 8003130:	bf00      	nop
 8003132:	371c      	adds	r7, #28
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f023 0210 	bic.w	r2, r3, #16
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003166:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	031b      	lsls	r3, r3, #12
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	4313      	orrs	r3, r2
 8003170:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003178:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	621a      	str	r2, [r3, #32]
}
 8003190:	bf00      	nop
 8003192:	371c      	adds	r7, #28
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f023 0303 	bic.w	r3, r3, #3
 80031c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80031ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	021b      	lsls	r3, r3, #8
 80031f2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	621a      	str	r2, [r3, #32]
}
 8003208:	bf00      	nop
 800320a:	371c      	adds	r7, #28
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003214:	b480      	push	{r7}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
 8003220:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003240:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	021b      	lsls	r3, r3, #8
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003252:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	031b      	lsls	r3, r3, #12
 8003258:	b29b      	uxth	r3, r3
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	4313      	orrs	r3, r2
 800325e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003266:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	031b      	lsls	r3, r3, #12
 800326c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	621a      	str	r2, [r3, #32]
}
 8003282:	bf00      	nop
 8003284:	371c      	adds	r7, #28
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800328e:	b480      	push	{r7}
 8003290:	b085      	sub	sp, #20
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f043 0307 	orr.w	r3, r3, #7
 80032b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	609a      	str	r2, [r3, #8]
}
 80032b8:	bf00      	nop
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	021a      	lsls	r2, r3, #8
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	431a      	orrs	r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	609a      	str	r2, [r3, #8]
}
 80032f8:	bf00      	nop
 80032fa:	371c      	adds	r7, #28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f003 031f 	and.w	r3, r3, #31
 8003316:	2201      	movs	r2, #1
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a1a      	ldr	r2, [r3, #32]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	43db      	mvns	r3, r3
 8003326:	401a      	ands	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a1a      	ldr	r2, [r3, #32]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	fa01 f303 	lsl.w	r3, r1, r3
 800333c:	431a      	orrs	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	621a      	str	r2, [r3, #32]
}
 8003342:	bf00      	nop
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003364:	2302      	movs	r3, #2
 8003366:	e05a      	b.n	800341e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a21      	ldr	r2, [pc, #132]	; (800342c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d022      	beq.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b4:	d01d      	beq.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a1d      	ldr	r2, [pc, #116]	; (8003430 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d018      	beq.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a1b      	ldr	r2, [pc, #108]	; (8003434 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d013      	beq.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a1a      	ldr	r2, [pc, #104]	; (8003438 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d00e      	beq.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a18      	ldr	r2, [pc, #96]	; (800343c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d009      	beq.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a17      	ldr	r2, [pc, #92]	; (8003440 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d004      	beq.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a15      	ldr	r2, [pc, #84]	; (8003444 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d10c      	bne.n	800340c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	4313      	orrs	r3, r2
 8003402:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	40010000 	.word	0x40010000
 8003430:	40000400 	.word	0x40000400
 8003434:	40000800 	.word	0x40000800
 8003438:	40000c00 	.word	0x40000c00
 800343c:	40010400 	.word	0x40010400
 8003440:	40014000 	.word	0x40014000
 8003444:	40001800 	.word	0x40001800

08003448 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <__errno>:
 8003470:	4b01      	ldr	r3, [pc, #4]	; (8003478 <__errno+0x8>)
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	2000000c 	.word	0x2000000c

0800347c <__libc_init_array>:
 800347c:	b570      	push	{r4, r5, r6, lr}
 800347e:	4e0d      	ldr	r6, [pc, #52]	; (80034b4 <__libc_init_array+0x38>)
 8003480:	4c0d      	ldr	r4, [pc, #52]	; (80034b8 <__libc_init_array+0x3c>)
 8003482:	1ba4      	subs	r4, r4, r6
 8003484:	10a4      	asrs	r4, r4, #2
 8003486:	2500      	movs	r5, #0
 8003488:	42a5      	cmp	r5, r4
 800348a:	d109      	bne.n	80034a0 <__libc_init_array+0x24>
 800348c:	4e0b      	ldr	r6, [pc, #44]	; (80034bc <__libc_init_array+0x40>)
 800348e:	4c0c      	ldr	r4, [pc, #48]	; (80034c0 <__libc_init_array+0x44>)
 8003490:	f002 fb48 	bl	8005b24 <_init>
 8003494:	1ba4      	subs	r4, r4, r6
 8003496:	10a4      	asrs	r4, r4, #2
 8003498:	2500      	movs	r5, #0
 800349a:	42a5      	cmp	r5, r4
 800349c:	d105      	bne.n	80034aa <__libc_init_array+0x2e>
 800349e:	bd70      	pop	{r4, r5, r6, pc}
 80034a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034a4:	4798      	blx	r3
 80034a6:	3501      	adds	r5, #1
 80034a8:	e7ee      	b.n	8003488 <__libc_init_array+0xc>
 80034aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034ae:	4798      	blx	r3
 80034b0:	3501      	adds	r5, #1
 80034b2:	e7f2      	b.n	800349a <__libc_init_array+0x1e>
 80034b4:	08005e30 	.word	0x08005e30
 80034b8:	08005e30 	.word	0x08005e30
 80034bc:	08005e30 	.word	0x08005e30
 80034c0:	08005e34 	.word	0x08005e34

080034c4 <memset>:
 80034c4:	4402      	add	r2, r0
 80034c6:	4603      	mov	r3, r0
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d100      	bne.n	80034ce <memset+0xa>
 80034cc:	4770      	bx	lr
 80034ce:	f803 1b01 	strb.w	r1, [r3], #1
 80034d2:	e7f9      	b.n	80034c8 <memset+0x4>

080034d4 <__cvt>:
 80034d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034d8:	ec55 4b10 	vmov	r4, r5, d0
 80034dc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80034de:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80034e2:	2d00      	cmp	r5, #0
 80034e4:	460e      	mov	r6, r1
 80034e6:	4691      	mov	r9, r2
 80034e8:	4619      	mov	r1, r3
 80034ea:	bfb8      	it	lt
 80034ec:	4622      	movlt	r2, r4
 80034ee:	462b      	mov	r3, r5
 80034f0:	f027 0720 	bic.w	r7, r7, #32
 80034f4:	bfbb      	ittet	lt
 80034f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80034fa:	461d      	movlt	r5, r3
 80034fc:	2300      	movge	r3, #0
 80034fe:	232d      	movlt	r3, #45	; 0x2d
 8003500:	bfb8      	it	lt
 8003502:	4614      	movlt	r4, r2
 8003504:	2f46      	cmp	r7, #70	; 0x46
 8003506:	700b      	strb	r3, [r1, #0]
 8003508:	d004      	beq.n	8003514 <__cvt+0x40>
 800350a:	2f45      	cmp	r7, #69	; 0x45
 800350c:	d100      	bne.n	8003510 <__cvt+0x3c>
 800350e:	3601      	adds	r6, #1
 8003510:	2102      	movs	r1, #2
 8003512:	e000      	b.n	8003516 <__cvt+0x42>
 8003514:	2103      	movs	r1, #3
 8003516:	ab03      	add	r3, sp, #12
 8003518:	9301      	str	r3, [sp, #4]
 800351a:	ab02      	add	r3, sp, #8
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	4632      	mov	r2, r6
 8003520:	4653      	mov	r3, sl
 8003522:	ec45 4b10 	vmov	d0, r4, r5
 8003526:	f000 fcd7 	bl	8003ed8 <_dtoa_r>
 800352a:	2f47      	cmp	r7, #71	; 0x47
 800352c:	4680      	mov	r8, r0
 800352e:	d102      	bne.n	8003536 <__cvt+0x62>
 8003530:	f019 0f01 	tst.w	r9, #1
 8003534:	d026      	beq.n	8003584 <__cvt+0xb0>
 8003536:	2f46      	cmp	r7, #70	; 0x46
 8003538:	eb08 0906 	add.w	r9, r8, r6
 800353c:	d111      	bne.n	8003562 <__cvt+0x8e>
 800353e:	f898 3000 	ldrb.w	r3, [r8]
 8003542:	2b30      	cmp	r3, #48	; 0x30
 8003544:	d10a      	bne.n	800355c <__cvt+0x88>
 8003546:	2200      	movs	r2, #0
 8003548:	2300      	movs	r3, #0
 800354a:	4620      	mov	r0, r4
 800354c:	4629      	mov	r1, r5
 800354e:	f7fd fabb 	bl	8000ac8 <__aeabi_dcmpeq>
 8003552:	b918      	cbnz	r0, 800355c <__cvt+0x88>
 8003554:	f1c6 0601 	rsb	r6, r6, #1
 8003558:	f8ca 6000 	str.w	r6, [sl]
 800355c:	f8da 3000 	ldr.w	r3, [sl]
 8003560:	4499      	add	r9, r3
 8003562:	2200      	movs	r2, #0
 8003564:	2300      	movs	r3, #0
 8003566:	4620      	mov	r0, r4
 8003568:	4629      	mov	r1, r5
 800356a:	f7fd faad 	bl	8000ac8 <__aeabi_dcmpeq>
 800356e:	b938      	cbnz	r0, 8003580 <__cvt+0xac>
 8003570:	2230      	movs	r2, #48	; 0x30
 8003572:	9b03      	ldr	r3, [sp, #12]
 8003574:	454b      	cmp	r3, r9
 8003576:	d205      	bcs.n	8003584 <__cvt+0xb0>
 8003578:	1c59      	adds	r1, r3, #1
 800357a:	9103      	str	r1, [sp, #12]
 800357c:	701a      	strb	r2, [r3, #0]
 800357e:	e7f8      	b.n	8003572 <__cvt+0x9e>
 8003580:	f8cd 900c 	str.w	r9, [sp, #12]
 8003584:	9b03      	ldr	r3, [sp, #12]
 8003586:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003588:	eba3 0308 	sub.w	r3, r3, r8
 800358c:	4640      	mov	r0, r8
 800358e:	6013      	str	r3, [r2, #0]
 8003590:	b004      	add	sp, #16
 8003592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003596 <__exponent>:
 8003596:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003598:	2900      	cmp	r1, #0
 800359a:	4604      	mov	r4, r0
 800359c:	bfba      	itte	lt
 800359e:	4249      	neglt	r1, r1
 80035a0:	232d      	movlt	r3, #45	; 0x2d
 80035a2:	232b      	movge	r3, #43	; 0x2b
 80035a4:	2909      	cmp	r1, #9
 80035a6:	f804 2b02 	strb.w	r2, [r4], #2
 80035aa:	7043      	strb	r3, [r0, #1]
 80035ac:	dd20      	ble.n	80035f0 <__exponent+0x5a>
 80035ae:	f10d 0307 	add.w	r3, sp, #7
 80035b2:	461f      	mov	r7, r3
 80035b4:	260a      	movs	r6, #10
 80035b6:	fb91 f5f6 	sdiv	r5, r1, r6
 80035ba:	fb06 1115 	mls	r1, r6, r5, r1
 80035be:	3130      	adds	r1, #48	; 0x30
 80035c0:	2d09      	cmp	r5, #9
 80035c2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80035c6:	f103 32ff 	add.w	r2, r3, #4294967295
 80035ca:	4629      	mov	r1, r5
 80035cc:	dc09      	bgt.n	80035e2 <__exponent+0x4c>
 80035ce:	3130      	adds	r1, #48	; 0x30
 80035d0:	3b02      	subs	r3, #2
 80035d2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80035d6:	42bb      	cmp	r3, r7
 80035d8:	4622      	mov	r2, r4
 80035da:	d304      	bcc.n	80035e6 <__exponent+0x50>
 80035dc:	1a10      	subs	r0, r2, r0
 80035de:	b003      	add	sp, #12
 80035e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035e2:	4613      	mov	r3, r2
 80035e4:	e7e7      	b.n	80035b6 <__exponent+0x20>
 80035e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035ea:	f804 2b01 	strb.w	r2, [r4], #1
 80035ee:	e7f2      	b.n	80035d6 <__exponent+0x40>
 80035f0:	2330      	movs	r3, #48	; 0x30
 80035f2:	4419      	add	r1, r3
 80035f4:	7083      	strb	r3, [r0, #2]
 80035f6:	1d02      	adds	r2, r0, #4
 80035f8:	70c1      	strb	r1, [r0, #3]
 80035fa:	e7ef      	b.n	80035dc <__exponent+0x46>

080035fc <_printf_float>:
 80035fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003600:	b08d      	sub	sp, #52	; 0x34
 8003602:	460c      	mov	r4, r1
 8003604:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003608:	4616      	mov	r6, r2
 800360a:	461f      	mov	r7, r3
 800360c:	4605      	mov	r5, r0
 800360e:	f001 fae5 	bl	8004bdc <_localeconv_r>
 8003612:	6803      	ldr	r3, [r0, #0]
 8003614:	9304      	str	r3, [sp, #16]
 8003616:	4618      	mov	r0, r3
 8003618:	f7fc fdda 	bl	80001d0 <strlen>
 800361c:	2300      	movs	r3, #0
 800361e:	930a      	str	r3, [sp, #40]	; 0x28
 8003620:	f8d8 3000 	ldr.w	r3, [r8]
 8003624:	9005      	str	r0, [sp, #20]
 8003626:	3307      	adds	r3, #7
 8003628:	f023 0307 	bic.w	r3, r3, #7
 800362c:	f103 0208 	add.w	r2, r3, #8
 8003630:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003634:	f8d4 b000 	ldr.w	fp, [r4]
 8003638:	f8c8 2000 	str.w	r2, [r8]
 800363c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003640:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003644:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003648:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800364c:	9307      	str	r3, [sp, #28]
 800364e:	f8cd 8018 	str.w	r8, [sp, #24]
 8003652:	f04f 32ff 	mov.w	r2, #4294967295
 8003656:	4ba7      	ldr	r3, [pc, #668]	; (80038f4 <_printf_float+0x2f8>)
 8003658:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800365c:	f7fd fa66 	bl	8000b2c <__aeabi_dcmpun>
 8003660:	bb70      	cbnz	r0, 80036c0 <_printf_float+0xc4>
 8003662:	f04f 32ff 	mov.w	r2, #4294967295
 8003666:	4ba3      	ldr	r3, [pc, #652]	; (80038f4 <_printf_float+0x2f8>)
 8003668:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800366c:	f7fd fa40 	bl	8000af0 <__aeabi_dcmple>
 8003670:	bb30      	cbnz	r0, 80036c0 <_printf_float+0xc4>
 8003672:	2200      	movs	r2, #0
 8003674:	2300      	movs	r3, #0
 8003676:	4640      	mov	r0, r8
 8003678:	4649      	mov	r1, r9
 800367a:	f7fd fa2f 	bl	8000adc <__aeabi_dcmplt>
 800367e:	b110      	cbz	r0, 8003686 <_printf_float+0x8a>
 8003680:	232d      	movs	r3, #45	; 0x2d
 8003682:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003686:	4a9c      	ldr	r2, [pc, #624]	; (80038f8 <_printf_float+0x2fc>)
 8003688:	4b9c      	ldr	r3, [pc, #624]	; (80038fc <_printf_float+0x300>)
 800368a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800368e:	bf8c      	ite	hi
 8003690:	4690      	movhi	r8, r2
 8003692:	4698      	movls	r8, r3
 8003694:	2303      	movs	r3, #3
 8003696:	f02b 0204 	bic.w	r2, fp, #4
 800369a:	6123      	str	r3, [r4, #16]
 800369c:	6022      	str	r2, [r4, #0]
 800369e:	f04f 0900 	mov.w	r9, #0
 80036a2:	9700      	str	r7, [sp, #0]
 80036a4:	4633      	mov	r3, r6
 80036a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80036a8:	4621      	mov	r1, r4
 80036aa:	4628      	mov	r0, r5
 80036ac:	f000 f9e6 	bl	8003a7c <_printf_common>
 80036b0:	3001      	adds	r0, #1
 80036b2:	f040 808d 	bne.w	80037d0 <_printf_float+0x1d4>
 80036b6:	f04f 30ff 	mov.w	r0, #4294967295
 80036ba:	b00d      	add	sp, #52	; 0x34
 80036bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036c0:	4642      	mov	r2, r8
 80036c2:	464b      	mov	r3, r9
 80036c4:	4640      	mov	r0, r8
 80036c6:	4649      	mov	r1, r9
 80036c8:	f7fd fa30 	bl	8000b2c <__aeabi_dcmpun>
 80036cc:	b110      	cbz	r0, 80036d4 <_printf_float+0xd8>
 80036ce:	4a8c      	ldr	r2, [pc, #560]	; (8003900 <_printf_float+0x304>)
 80036d0:	4b8c      	ldr	r3, [pc, #560]	; (8003904 <_printf_float+0x308>)
 80036d2:	e7da      	b.n	800368a <_printf_float+0x8e>
 80036d4:	6861      	ldr	r1, [r4, #4]
 80036d6:	1c4b      	adds	r3, r1, #1
 80036d8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80036dc:	a80a      	add	r0, sp, #40	; 0x28
 80036de:	d13e      	bne.n	800375e <_printf_float+0x162>
 80036e0:	2306      	movs	r3, #6
 80036e2:	6063      	str	r3, [r4, #4]
 80036e4:	2300      	movs	r3, #0
 80036e6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80036ea:	ab09      	add	r3, sp, #36	; 0x24
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	ec49 8b10 	vmov	d0, r8, r9
 80036f2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80036f6:	6022      	str	r2, [r4, #0]
 80036f8:	f8cd a004 	str.w	sl, [sp, #4]
 80036fc:	6861      	ldr	r1, [r4, #4]
 80036fe:	4628      	mov	r0, r5
 8003700:	f7ff fee8 	bl	80034d4 <__cvt>
 8003704:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003708:	2b47      	cmp	r3, #71	; 0x47
 800370a:	4680      	mov	r8, r0
 800370c:	d109      	bne.n	8003722 <_printf_float+0x126>
 800370e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003710:	1cd8      	adds	r0, r3, #3
 8003712:	db02      	blt.n	800371a <_printf_float+0x11e>
 8003714:	6862      	ldr	r2, [r4, #4]
 8003716:	4293      	cmp	r3, r2
 8003718:	dd47      	ble.n	80037aa <_printf_float+0x1ae>
 800371a:	f1aa 0a02 	sub.w	sl, sl, #2
 800371e:	fa5f fa8a 	uxtb.w	sl, sl
 8003722:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003726:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003728:	d824      	bhi.n	8003774 <_printf_float+0x178>
 800372a:	3901      	subs	r1, #1
 800372c:	4652      	mov	r2, sl
 800372e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003732:	9109      	str	r1, [sp, #36]	; 0x24
 8003734:	f7ff ff2f 	bl	8003596 <__exponent>
 8003738:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800373a:	1813      	adds	r3, r2, r0
 800373c:	2a01      	cmp	r2, #1
 800373e:	4681      	mov	r9, r0
 8003740:	6123      	str	r3, [r4, #16]
 8003742:	dc02      	bgt.n	800374a <_printf_float+0x14e>
 8003744:	6822      	ldr	r2, [r4, #0]
 8003746:	07d1      	lsls	r1, r2, #31
 8003748:	d501      	bpl.n	800374e <_printf_float+0x152>
 800374a:	3301      	adds	r3, #1
 800374c:	6123      	str	r3, [r4, #16]
 800374e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0a5      	beq.n	80036a2 <_printf_float+0xa6>
 8003756:	232d      	movs	r3, #45	; 0x2d
 8003758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800375c:	e7a1      	b.n	80036a2 <_printf_float+0xa6>
 800375e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003762:	f000 8177 	beq.w	8003a54 <_printf_float+0x458>
 8003766:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800376a:	d1bb      	bne.n	80036e4 <_printf_float+0xe8>
 800376c:	2900      	cmp	r1, #0
 800376e:	d1b9      	bne.n	80036e4 <_printf_float+0xe8>
 8003770:	2301      	movs	r3, #1
 8003772:	e7b6      	b.n	80036e2 <_printf_float+0xe6>
 8003774:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8003778:	d119      	bne.n	80037ae <_printf_float+0x1b2>
 800377a:	2900      	cmp	r1, #0
 800377c:	6863      	ldr	r3, [r4, #4]
 800377e:	dd0c      	ble.n	800379a <_printf_float+0x19e>
 8003780:	6121      	str	r1, [r4, #16]
 8003782:	b913      	cbnz	r3, 800378a <_printf_float+0x18e>
 8003784:	6822      	ldr	r2, [r4, #0]
 8003786:	07d2      	lsls	r2, r2, #31
 8003788:	d502      	bpl.n	8003790 <_printf_float+0x194>
 800378a:	3301      	adds	r3, #1
 800378c:	440b      	add	r3, r1
 800378e:	6123      	str	r3, [r4, #16]
 8003790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003792:	65a3      	str	r3, [r4, #88]	; 0x58
 8003794:	f04f 0900 	mov.w	r9, #0
 8003798:	e7d9      	b.n	800374e <_printf_float+0x152>
 800379a:	b913      	cbnz	r3, 80037a2 <_printf_float+0x1a6>
 800379c:	6822      	ldr	r2, [r4, #0]
 800379e:	07d0      	lsls	r0, r2, #31
 80037a0:	d501      	bpl.n	80037a6 <_printf_float+0x1aa>
 80037a2:	3302      	adds	r3, #2
 80037a4:	e7f3      	b.n	800378e <_printf_float+0x192>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e7f1      	b.n	800378e <_printf_float+0x192>
 80037aa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80037ae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80037b2:	4293      	cmp	r3, r2
 80037b4:	db05      	blt.n	80037c2 <_printf_float+0x1c6>
 80037b6:	6822      	ldr	r2, [r4, #0]
 80037b8:	6123      	str	r3, [r4, #16]
 80037ba:	07d1      	lsls	r1, r2, #31
 80037bc:	d5e8      	bpl.n	8003790 <_printf_float+0x194>
 80037be:	3301      	adds	r3, #1
 80037c0:	e7e5      	b.n	800378e <_printf_float+0x192>
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	bfd4      	ite	le
 80037c6:	f1c3 0302 	rsble	r3, r3, #2
 80037ca:	2301      	movgt	r3, #1
 80037cc:	4413      	add	r3, r2
 80037ce:	e7de      	b.n	800378e <_printf_float+0x192>
 80037d0:	6823      	ldr	r3, [r4, #0]
 80037d2:	055a      	lsls	r2, r3, #21
 80037d4:	d407      	bmi.n	80037e6 <_printf_float+0x1ea>
 80037d6:	6923      	ldr	r3, [r4, #16]
 80037d8:	4642      	mov	r2, r8
 80037da:	4631      	mov	r1, r6
 80037dc:	4628      	mov	r0, r5
 80037de:	47b8      	blx	r7
 80037e0:	3001      	adds	r0, #1
 80037e2:	d12b      	bne.n	800383c <_printf_float+0x240>
 80037e4:	e767      	b.n	80036b6 <_printf_float+0xba>
 80037e6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80037ea:	f240 80dc 	bls.w	80039a6 <_printf_float+0x3aa>
 80037ee:	2200      	movs	r2, #0
 80037f0:	2300      	movs	r3, #0
 80037f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80037f6:	f7fd f967 	bl	8000ac8 <__aeabi_dcmpeq>
 80037fa:	2800      	cmp	r0, #0
 80037fc:	d033      	beq.n	8003866 <_printf_float+0x26a>
 80037fe:	2301      	movs	r3, #1
 8003800:	4a41      	ldr	r2, [pc, #260]	; (8003908 <_printf_float+0x30c>)
 8003802:	4631      	mov	r1, r6
 8003804:	4628      	mov	r0, r5
 8003806:	47b8      	blx	r7
 8003808:	3001      	adds	r0, #1
 800380a:	f43f af54 	beq.w	80036b6 <_printf_float+0xba>
 800380e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003812:	429a      	cmp	r2, r3
 8003814:	db02      	blt.n	800381c <_printf_float+0x220>
 8003816:	6823      	ldr	r3, [r4, #0]
 8003818:	07d8      	lsls	r0, r3, #31
 800381a:	d50f      	bpl.n	800383c <_printf_float+0x240>
 800381c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003820:	4631      	mov	r1, r6
 8003822:	4628      	mov	r0, r5
 8003824:	47b8      	blx	r7
 8003826:	3001      	adds	r0, #1
 8003828:	f43f af45 	beq.w	80036b6 <_printf_float+0xba>
 800382c:	f04f 0800 	mov.w	r8, #0
 8003830:	f104 091a 	add.w	r9, r4, #26
 8003834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003836:	3b01      	subs	r3, #1
 8003838:	4543      	cmp	r3, r8
 800383a:	dc09      	bgt.n	8003850 <_printf_float+0x254>
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	079b      	lsls	r3, r3, #30
 8003840:	f100 8103 	bmi.w	8003a4a <_printf_float+0x44e>
 8003844:	68e0      	ldr	r0, [r4, #12]
 8003846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003848:	4298      	cmp	r0, r3
 800384a:	bfb8      	it	lt
 800384c:	4618      	movlt	r0, r3
 800384e:	e734      	b.n	80036ba <_printf_float+0xbe>
 8003850:	2301      	movs	r3, #1
 8003852:	464a      	mov	r2, r9
 8003854:	4631      	mov	r1, r6
 8003856:	4628      	mov	r0, r5
 8003858:	47b8      	blx	r7
 800385a:	3001      	adds	r0, #1
 800385c:	f43f af2b 	beq.w	80036b6 <_printf_float+0xba>
 8003860:	f108 0801 	add.w	r8, r8, #1
 8003864:	e7e6      	b.n	8003834 <_printf_float+0x238>
 8003866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003868:	2b00      	cmp	r3, #0
 800386a:	dc2b      	bgt.n	80038c4 <_printf_float+0x2c8>
 800386c:	2301      	movs	r3, #1
 800386e:	4a26      	ldr	r2, [pc, #152]	; (8003908 <_printf_float+0x30c>)
 8003870:	4631      	mov	r1, r6
 8003872:	4628      	mov	r0, r5
 8003874:	47b8      	blx	r7
 8003876:	3001      	adds	r0, #1
 8003878:	f43f af1d 	beq.w	80036b6 <_printf_float+0xba>
 800387c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800387e:	b923      	cbnz	r3, 800388a <_printf_float+0x28e>
 8003880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003882:	b913      	cbnz	r3, 800388a <_printf_float+0x28e>
 8003884:	6823      	ldr	r3, [r4, #0]
 8003886:	07d9      	lsls	r1, r3, #31
 8003888:	d5d8      	bpl.n	800383c <_printf_float+0x240>
 800388a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800388e:	4631      	mov	r1, r6
 8003890:	4628      	mov	r0, r5
 8003892:	47b8      	blx	r7
 8003894:	3001      	adds	r0, #1
 8003896:	f43f af0e 	beq.w	80036b6 <_printf_float+0xba>
 800389a:	f04f 0900 	mov.w	r9, #0
 800389e:	f104 0a1a 	add.w	sl, r4, #26
 80038a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038a4:	425b      	negs	r3, r3
 80038a6:	454b      	cmp	r3, r9
 80038a8:	dc01      	bgt.n	80038ae <_printf_float+0x2b2>
 80038aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038ac:	e794      	b.n	80037d8 <_printf_float+0x1dc>
 80038ae:	2301      	movs	r3, #1
 80038b0:	4652      	mov	r2, sl
 80038b2:	4631      	mov	r1, r6
 80038b4:	4628      	mov	r0, r5
 80038b6:	47b8      	blx	r7
 80038b8:	3001      	adds	r0, #1
 80038ba:	f43f aefc 	beq.w	80036b6 <_printf_float+0xba>
 80038be:	f109 0901 	add.w	r9, r9, #1
 80038c2:	e7ee      	b.n	80038a2 <_printf_float+0x2a6>
 80038c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80038c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038c8:	429a      	cmp	r2, r3
 80038ca:	bfa8      	it	ge
 80038cc:	461a      	movge	r2, r3
 80038ce:	2a00      	cmp	r2, #0
 80038d0:	4691      	mov	r9, r2
 80038d2:	dd07      	ble.n	80038e4 <_printf_float+0x2e8>
 80038d4:	4613      	mov	r3, r2
 80038d6:	4631      	mov	r1, r6
 80038d8:	4642      	mov	r2, r8
 80038da:	4628      	mov	r0, r5
 80038dc:	47b8      	blx	r7
 80038de:	3001      	adds	r0, #1
 80038e0:	f43f aee9 	beq.w	80036b6 <_printf_float+0xba>
 80038e4:	f104 031a 	add.w	r3, r4, #26
 80038e8:	f04f 0b00 	mov.w	fp, #0
 80038ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80038f0:	9306      	str	r3, [sp, #24]
 80038f2:	e015      	b.n	8003920 <_printf_float+0x324>
 80038f4:	7fefffff 	.word	0x7fefffff
 80038f8:	08005b70 	.word	0x08005b70
 80038fc:	08005b6c 	.word	0x08005b6c
 8003900:	08005b78 	.word	0x08005b78
 8003904:	08005b74 	.word	0x08005b74
 8003908:	08005b7c 	.word	0x08005b7c
 800390c:	2301      	movs	r3, #1
 800390e:	9a06      	ldr	r2, [sp, #24]
 8003910:	4631      	mov	r1, r6
 8003912:	4628      	mov	r0, r5
 8003914:	47b8      	blx	r7
 8003916:	3001      	adds	r0, #1
 8003918:	f43f aecd 	beq.w	80036b6 <_printf_float+0xba>
 800391c:	f10b 0b01 	add.w	fp, fp, #1
 8003920:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003924:	ebaa 0309 	sub.w	r3, sl, r9
 8003928:	455b      	cmp	r3, fp
 800392a:	dcef      	bgt.n	800390c <_printf_float+0x310>
 800392c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003930:	429a      	cmp	r2, r3
 8003932:	44d0      	add	r8, sl
 8003934:	db15      	blt.n	8003962 <_printf_float+0x366>
 8003936:	6823      	ldr	r3, [r4, #0]
 8003938:	07da      	lsls	r2, r3, #31
 800393a:	d412      	bmi.n	8003962 <_printf_float+0x366>
 800393c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800393e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003940:	eba3 020a 	sub.w	r2, r3, sl
 8003944:	eba3 0a01 	sub.w	sl, r3, r1
 8003948:	4592      	cmp	sl, r2
 800394a:	bfa8      	it	ge
 800394c:	4692      	movge	sl, r2
 800394e:	f1ba 0f00 	cmp.w	sl, #0
 8003952:	dc0e      	bgt.n	8003972 <_printf_float+0x376>
 8003954:	f04f 0800 	mov.w	r8, #0
 8003958:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800395c:	f104 091a 	add.w	r9, r4, #26
 8003960:	e019      	b.n	8003996 <_printf_float+0x39a>
 8003962:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003966:	4631      	mov	r1, r6
 8003968:	4628      	mov	r0, r5
 800396a:	47b8      	blx	r7
 800396c:	3001      	adds	r0, #1
 800396e:	d1e5      	bne.n	800393c <_printf_float+0x340>
 8003970:	e6a1      	b.n	80036b6 <_printf_float+0xba>
 8003972:	4653      	mov	r3, sl
 8003974:	4642      	mov	r2, r8
 8003976:	4631      	mov	r1, r6
 8003978:	4628      	mov	r0, r5
 800397a:	47b8      	blx	r7
 800397c:	3001      	adds	r0, #1
 800397e:	d1e9      	bne.n	8003954 <_printf_float+0x358>
 8003980:	e699      	b.n	80036b6 <_printf_float+0xba>
 8003982:	2301      	movs	r3, #1
 8003984:	464a      	mov	r2, r9
 8003986:	4631      	mov	r1, r6
 8003988:	4628      	mov	r0, r5
 800398a:	47b8      	blx	r7
 800398c:	3001      	adds	r0, #1
 800398e:	f43f ae92 	beq.w	80036b6 <_printf_float+0xba>
 8003992:	f108 0801 	add.w	r8, r8, #1
 8003996:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800399a:	1a9b      	subs	r3, r3, r2
 800399c:	eba3 030a 	sub.w	r3, r3, sl
 80039a0:	4543      	cmp	r3, r8
 80039a2:	dcee      	bgt.n	8003982 <_printf_float+0x386>
 80039a4:	e74a      	b.n	800383c <_printf_float+0x240>
 80039a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80039a8:	2a01      	cmp	r2, #1
 80039aa:	dc01      	bgt.n	80039b0 <_printf_float+0x3b4>
 80039ac:	07db      	lsls	r3, r3, #31
 80039ae:	d53a      	bpl.n	8003a26 <_printf_float+0x42a>
 80039b0:	2301      	movs	r3, #1
 80039b2:	4642      	mov	r2, r8
 80039b4:	4631      	mov	r1, r6
 80039b6:	4628      	mov	r0, r5
 80039b8:	47b8      	blx	r7
 80039ba:	3001      	adds	r0, #1
 80039bc:	f43f ae7b 	beq.w	80036b6 <_printf_float+0xba>
 80039c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039c4:	4631      	mov	r1, r6
 80039c6:	4628      	mov	r0, r5
 80039c8:	47b8      	blx	r7
 80039ca:	3001      	adds	r0, #1
 80039cc:	f108 0801 	add.w	r8, r8, #1
 80039d0:	f43f ae71 	beq.w	80036b6 <_printf_float+0xba>
 80039d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039d6:	2200      	movs	r2, #0
 80039d8:	f103 3aff 	add.w	sl, r3, #4294967295
 80039dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80039e0:	2300      	movs	r3, #0
 80039e2:	f7fd f871 	bl	8000ac8 <__aeabi_dcmpeq>
 80039e6:	b9c8      	cbnz	r0, 8003a1c <_printf_float+0x420>
 80039e8:	4653      	mov	r3, sl
 80039ea:	4642      	mov	r2, r8
 80039ec:	4631      	mov	r1, r6
 80039ee:	4628      	mov	r0, r5
 80039f0:	47b8      	blx	r7
 80039f2:	3001      	adds	r0, #1
 80039f4:	d10e      	bne.n	8003a14 <_printf_float+0x418>
 80039f6:	e65e      	b.n	80036b6 <_printf_float+0xba>
 80039f8:	2301      	movs	r3, #1
 80039fa:	4652      	mov	r2, sl
 80039fc:	4631      	mov	r1, r6
 80039fe:	4628      	mov	r0, r5
 8003a00:	47b8      	blx	r7
 8003a02:	3001      	adds	r0, #1
 8003a04:	f43f ae57 	beq.w	80036b6 <_printf_float+0xba>
 8003a08:	f108 0801 	add.w	r8, r8, #1
 8003a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	4543      	cmp	r3, r8
 8003a12:	dcf1      	bgt.n	80039f8 <_printf_float+0x3fc>
 8003a14:	464b      	mov	r3, r9
 8003a16:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003a1a:	e6de      	b.n	80037da <_printf_float+0x1de>
 8003a1c:	f04f 0800 	mov.w	r8, #0
 8003a20:	f104 0a1a 	add.w	sl, r4, #26
 8003a24:	e7f2      	b.n	8003a0c <_printf_float+0x410>
 8003a26:	2301      	movs	r3, #1
 8003a28:	e7df      	b.n	80039ea <_printf_float+0x3ee>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	464a      	mov	r2, r9
 8003a2e:	4631      	mov	r1, r6
 8003a30:	4628      	mov	r0, r5
 8003a32:	47b8      	blx	r7
 8003a34:	3001      	adds	r0, #1
 8003a36:	f43f ae3e 	beq.w	80036b6 <_printf_float+0xba>
 8003a3a:	f108 0801 	add.w	r8, r8, #1
 8003a3e:	68e3      	ldr	r3, [r4, #12]
 8003a40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003a42:	1a9b      	subs	r3, r3, r2
 8003a44:	4543      	cmp	r3, r8
 8003a46:	dcf0      	bgt.n	8003a2a <_printf_float+0x42e>
 8003a48:	e6fc      	b.n	8003844 <_printf_float+0x248>
 8003a4a:	f04f 0800 	mov.w	r8, #0
 8003a4e:	f104 0919 	add.w	r9, r4, #25
 8003a52:	e7f4      	b.n	8003a3e <_printf_float+0x442>
 8003a54:	2900      	cmp	r1, #0
 8003a56:	f43f ae8b 	beq.w	8003770 <_printf_float+0x174>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003a60:	ab09      	add	r3, sp, #36	; 0x24
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	ec49 8b10 	vmov	d0, r8, r9
 8003a68:	6022      	str	r2, [r4, #0]
 8003a6a:	f8cd a004 	str.w	sl, [sp, #4]
 8003a6e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003a72:	4628      	mov	r0, r5
 8003a74:	f7ff fd2e 	bl	80034d4 <__cvt>
 8003a78:	4680      	mov	r8, r0
 8003a7a:	e648      	b.n	800370e <_printf_float+0x112>

08003a7c <_printf_common>:
 8003a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a80:	4691      	mov	r9, r2
 8003a82:	461f      	mov	r7, r3
 8003a84:	688a      	ldr	r2, [r1, #8]
 8003a86:	690b      	ldr	r3, [r1, #16]
 8003a88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	bfb8      	it	lt
 8003a90:	4613      	movlt	r3, r2
 8003a92:	f8c9 3000 	str.w	r3, [r9]
 8003a96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a9a:	4606      	mov	r6, r0
 8003a9c:	460c      	mov	r4, r1
 8003a9e:	b112      	cbz	r2, 8003aa6 <_printf_common+0x2a>
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	f8c9 3000 	str.w	r3, [r9]
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	0699      	lsls	r1, r3, #26
 8003aaa:	bf42      	ittt	mi
 8003aac:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003ab0:	3302      	addmi	r3, #2
 8003ab2:	f8c9 3000 	strmi.w	r3, [r9]
 8003ab6:	6825      	ldr	r5, [r4, #0]
 8003ab8:	f015 0506 	ands.w	r5, r5, #6
 8003abc:	d107      	bne.n	8003ace <_printf_common+0x52>
 8003abe:	f104 0a19 	add.w	sl, r4, #25
 8003ac2:	68e3      	ldr	r3, [r4, #12]
 8003ac4:	f8d9 2000 	ldr.w	r2, [r9]
 8003ac8:	1a9b      	subs	r3, r3, r2
 8003aca:	42ab      	cmp	r3, r5
 8003acc:	dc28      	bgt.n	8003b20 <_printf_common+0xa4>
 8003ace:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003ad2:	6822      	ldr	r2, [r4, #0]
 8003ad4:	3300      	adds	r3, #0
 8003ad6:	bf18      	it	ne
 8003ad8:	2301      	movne	r3, #1
 8003ada:	0692      	lsls	r2, r2, #26
 8003adc:	d42d      	bmi.n	8003b3a <_printf_common+0xbe>
 8003ade:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ae2:	4639      	mov	r1, r7
 8003ae4:	4630      	mov	r0, r6
 8003ae6:	47c0      	blx	r8
 8003ae8:	3001      	adds	r0, #1
 8003aea:	d020      	beq.n	8003b2e <_printf_common+0xb2>
 8003aec:	6823      	ldr	r3, [r4, #0]
 8003aee:	68e5      	ldr	r5, [r4, #12]
 8003af0:	f8d9 2000 	ldr.w	r2, [r9]
 8003af4:	f003 0306 	and.w	r3, r3, #6
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	bf08      	it	eq
 8003afc:	1aad      	subeq	r5, r5, r2
 8003afe:	68a3      	ldr	r3, [r4, #8]
 8003b00:	6922      	ldr	r2, [r4, #16]
 8003b02:	bf0c      	ite	eq
 8003b04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b08:	2500      	movne	r5, #0
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	bfc4      	itt	gt
 8003b0e:	1a9b      	subgt	r3, r3, r2
 8003b10:	18ed      	addgt	r5, r5, r3
 8003b12:	f04f 0900 	mov.w	r9, #0
 8003b16:	341a      	adds	r4, #26
 8003b18:	454d      	cmp	r5, r9
 8003b1a:	d11a      	bne.n	8003b52 <_printf_common+0xd6>
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	e008      	b.n	8003b32 <_printf_common+0xb6>
 8003b20:	2301      	movs	r3, #1
 8003b22:	4652      	mov	r2, sl
 8003b24:	4639      	mov	r1, r7
 8003b26:	4630      	mov	r0, r6
 8003b28:	47c0      	blx	r8
 8003b2a:	3001      	adds	r0, #1
 8003b2c:	d103      	bne.n	8003b36 <_printf_common+0xba>
 8003b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b36:	3501      	adds	r5, #1
 8003b38:	e7c3      	b.n	8003ac2 <_printf_common+0x46>
 8003b3a:	18e1      	adds	r1, r4, r3
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	2030      	movs	r0, #48	; 0x30
 8003b40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b44:	4422      	add	r2, r4
 8003b46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b4e:	3302      	adds	r3, #2
 8003b50:	e7c5      	b.n	8003ade <_printf_common+0x62>
 8003b52:	2301      	movs	r3, #1
 8003b54:	4622      	mov	r2, r4
 8003b56:	4639      	mov	r1, r7
 8003b58:	4630      	mov	r0, r6
 8003b5a:	47c0      	blx	r8
 8003b5c:	3001      	adds	r0, #1
 8003b5e:	d0e6      	beq.n	8003b2e <_printf_common+0xb2>
 8003b60:	f109 0901 	add.w	r9, r9, #1
 8003b64:	e7d8      	b.n	8003b18 <_printf_common+0x9c>
	...

08003b68 <_printf_i>:
 8003b68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b6c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003b70:	460c      	mov	r4, r1
 8003b72:	7e09      	ldrb	r1, [r1, #24]
 8003b74:	b085      	sub	sp, #20
 8003b76:	296e      	cmp	r1, #110	; 0x6e
 8003b78:	4617      	mov	r7, r2
 8003b7a:	4606      	mov	r6, r0
 8003b7c:	4698      	mov	r8, r3
 8003b7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003b80:	f000 80b3 	beq.w	8003cea <_printf_i+0x182>
 8003b84:	d822      	bhi.n	8003bcc <_printf_i+0x64>
 8003b86:	2963      	cmp	r1, #99	; 0x63
 8003b88:	d036      	beq.n	8003bf8 <_printf_i+0x90>
 8003b8a:	d80a      	bhi.n	8003ba2 <_printf_i+0x3a>
 8003b8c:	2900      	cmp	r1, #0
 8003b8e:	f000 80b9 	beq.w	8003d04 <_printf_i+0x19c>
 8003b92:	2958      	cmp	r1, #88	; 0x58
 8003b94:	f000 8083 	beq.w	8003c9e <_printf_i+0x136>
 8003b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b9c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003ba0:	e032      	b.n	8003c08 <_printf_i+0xa0>
 8003ba2:	2964      	cmp	r1, #100	; 0x64
 8003ba4:	d001      	beq.n	8003baa <_printf_i+0x42>
 8003ba6:	2969      	cmp	r1, #105	; 0x69
 8003ba8:	d1f6      	bne.n	8003b98 <_printf_i+0x30>
 8003baa:	6820      	ldr	r0, [r4, #0]
 8003bac:	6813      	ldr	r3, [r2, #0]
 8003bae:	0605      	lsls	r5, r0, #24
 8003bb0:	f103 0104 	add.w	r1, r3, #4
 8003bb4:	d52a      	bpl.n	8003c0c <_printf_i+0xa4>
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6011      	str	r1, [r2, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	da03      	bge.n	8003bc6 <_printf_i+0x5e>
 8003bbe:	222d      	movs	r2, #45	; 0x2d
 8003bc0:	425b      	negs	r3, r3
 8003bc2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003bc6:	486f      	ldr	r0, [pc, #444]	; (8003d84 <_printf_i+0x21c>)
 8003bc8:	220a      	movs	r2, #10
 8003bca:	e039      	b.n	8003c40 <_printf_i+0xd8>
 8003bcc:	2973      	cmp	r1, #115	; 0x73
 8003bce:	f000 809d 	beq.w	8003d0c <_printf_i+0x1a4>
 8003bd2:	d808      	bhi.n	8003be6 <_printf_i+0x7e>
 8003bd4:	296f      	cmp	r1, #111	; 0x6f
 8003bd6:	d020      	beq.n	8003c1a <_printf_i+0xb2>
 8003bd8:	2970      	cmp	r1, #112	; 0x70
 8003bda:	d1dd      	bne.n	8003b98 <_printf_i+0x30>
 8003bdc:	6823      	ldr	r3, [r4, #0]
 8003bde:	f043 0320 	orr.w	r3, r3, #32
 8003be2:	6023      	str	r3, [r4, #0]
 8003be4:	e003      	b.n	8003bee <_printf_i+0x86>
 8003be6:	2975      	cmp	r1, #117	; 0x75
 8003be8:	d017      	beq.n	8003c1a <_printf_i+0xb2>
 8003bea:	2978      	cmp	r1, #120	; 0x78
 8003bec:	d1d4      	bne.n	8003b98 <_printf_i+0x30>
 8003bee:	2378      	movs	r3, #120	; 0x78
 8003bf0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003bf4:	4864      	ldr	r0, [pc, #400]	; (8003d88 <_printf_i+0x220>)
 8003bf6:	e055      	b.n	8003ca4 <_printf_i+0x13c>
 8003bf8:	6813      	ldr	r3, [r2, #0]
 8003bfa:	1d19      	adds	r1, r3, #4
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6011      	str	r1, [r2, #0]
 8003c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e08c      	b.n	8003d26 <_printf_i+0x1be>
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6011      	str	r1, [r2, #0]
 8003c10:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c14:	bf18      	it	ne
 8003c16:	b21b      	sxthne	r3, r3
 8003c18:	e7cf      	b.n	8003bba <_printf_i+0x52>
 8003c1a:	6813      	ldr	r3, [r2, #0]
 8003c1c:	6825      	ldr	r5, [r4, #0]
 8003c1e:	1d18      	adds	r0, r3, #4
 8003c20:	6010      	str	r0, [r2, #0]
 8003c22:	0628      	lsls	r0, r5, #24
 8003c24:	d501      	bpl.n	8003c2a <_printf_i+0xc2>
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	e002      	b.n	8003c30 <_printf_i+0xc8>
 8003c2a:	0668      	lsls	r0, r5, #25
 8003c2c:	d5fb      	bpl.n	8003c26 <_printf_i+0xbe>
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	4854      	ldr	r0, [pc, #336]	; (8003d84 <_printf_i+0x21c>)
 8003c32:	296f      	cmp	r1, #111	; 0x6f
 8003c34:	bf14      	ite	ne
 8003c36:	220a      	movne	r2, #10
 8003c38:	2208      	moveq	r2, #8
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c40:	6865      	ldr	r5, [r4, #4]
 8003c42:	60a5      	str	r5, [r4, #8]
 8003c44:	2d00      	cmp	r5, #0
 8003c46:	f2c0 8095 	blt.w	8003d74 <_printf_i+0x20c>
 8003c4a:	6821      	ldr	r1, [r4, #0]
 8003c4c:	f021 0104 	bic.w	r1, r1, #4
 8003c50:	6021      	str	r1, [r4, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d13d      	bne.n	8003cd2 <_printf_i+0x16a>
 8003c56:	2d00      	cmp	r5, #0
 8003c58:	f040 808e 	bne.w	8003d78 <_printf_i+0x210>
 8003c5c:	4665      	mov	r5, ip
 8003c5e:	2a08      	cmp	r2, #8
 8003c60:	d10b      	bne.n	8003c7a <_printf_i+0x112>
 8003c62:	6823      	ldr	r3, [r4, #0]
 8003c64:	07db      	lsls	r3, r3, #31
 8003c66:	d508      	bpl.n	8003c7a <_printf_i+0x112>
 8003c68:	6923      	ldr	r3, [r4, #16]
 8003c6a:	6862      	ldr	r2, [r4, #4]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	bfde      	ittt	le
 8003c70:	2330      	movle	r3, #48	; 0x30
 8003c72:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c76:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c7a:	ebac 0305 	sub.w	r3, ip, r5
 8003c7e:	6123      	str	r3, [r4, #16]
 8003c80:	f8cd 8000 	str.w	r8, [sp]
 8003c84:	463b      	mov	r3, r7
 8003c86:	aa03      	add	r2, sp, #12
 8003c88:	4621      	mov	r1, r4
 8003c8a:	4630      	mov	r0, r6
 8003c8c:	f7ff fef6 	bl	8003a7c <_printf_common>
 8003c90:	3001      	adds	r0, #1
 8003c92:	d14d      	bne.n	8003d30 <_printf_i+0x1c8>
 8003c94:	f04f 30ff 	mov.w	r0, #4294967295
 8003c98:	b005      	add	sp, #20
 8003c9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c9e:	4839      	ldr	r0, [pc, #228]	; (8003d84 <_printf_i+0x21c>)
 8003ca0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003ca4:	6813      	ldr	r3, [r2, #0]
 8003ca6:	6821      	ldr	r1, [r4, #0]
 8003ca8:	1d1d      	adds	r5, r3, #4
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6015      	str	r5, [r2, #0]
 8003cae:	060a      	lsls	r2, r1, #24
 8003cb0:	d50b      	bpl.n	8003cca <_printf_i+0x162>
 8003cb2:	07ca      	lsls	r2, r1, #31
 8003cb4:	bf44      	itt	mi
 8003cb6:	f041 0120 	orrmi.w	r1, r1, #32
 8003cba:	6021      	strmi	r1, [r4, #0]
 8003cbc:	b91b      	cbnz	r3, 8003cc6 <_printf_i+0x15e>
 8003cbe:	6822      	ldr	r2, [r4, #0]
 8003cc0:	f022 0220 	bic.w	r2, r2, #32
 8003cc4:	6022      	str	r2, [r4, #0]
 8003cc6:	2210      	movs	r2, #16
 8003cc8:	e7b7      	b.n	8003c3a <_printf_i+0xd2>
 8003cca:	064d      	lsls	r5, r1, #25
 8003ccc:	bf48      	it	mi
 8003cce:	b29b      	uxthmi	r3, r3
 8003cd0:	e7ef      	b.n	8003cb2 <_printf_i+0x14a>
 8003cd2:	4665      	mov	r5, ip
 8003cd4:	fbb3 f1f2 	udiv	r1, r3, r2
 8003cd8:	fb02 3311 	mls	r3, r2, r1, r3
 8003cdc:	5cc3      	ldrb	r3, [r0, r3]
 8003cde:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	2900      	cmp	r1, #0
 8003ce6:	d1f5      	bne.n	8003cd4 <_printf_i+0x16c>
 8003ce8:	e7b9      	b.n	8003c5e <_printf_i+0xf6>
 8003cea:	6813      	ldr	r3, [r2, #0]
 8003cec:	6825      	ldr	r5, [r4, #0]
 8003cee:	6961      	ldr	r1, [r4, #20]
 8003cf0:	1d18      	adds	r0, r3, #4
 8003cf2:	6010      	str	r0, [r2, #0]
 8003cf4:	0628      	lsls	r0, r5, #24
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	d501      	bpl.n	8003cfe <_printf_i+0x196>
 8003cfa:	6019      	str	r1, [r3, #0]
 8003cfc:	e002      	b.n	8003d04 <_printf_i+0x19c>
 8003cfe:	066a      	lsls	r2, r5, #25
 8003d00:	d5fb      	bpl.n	8003cfa <_printf_i+0x192>
 8003d02:	8019      	strh	r1, [r3, #0]
 8003d04:	2300      	movs	r3, #0
 8003d06:	6123      	str	r3, [r4, #16]
 8003d08:	4665      	mov	r5, ip
 8003d0a:	e7b9      	b.n	8003c80 <_printf_i+0x118>
 8003d0c:	6813      	ldr	r3, [r2, #0]
 8003d0e:	1d19      	adds	r1, r3, #4
 8003d10:	6011      	str	r1, [r2, #0]
 8003d12:	681d      	ldr	r5, [r3, #0]
 8003d14:	6862      	ldr	r2, [r4, #4]
 8003d16:	2100      	movs	r1, #0
 8003d18:	4628      	mov	r0, r5
 8003d1a:	f7fc fa61 	bl	80001e0 <memchr>
 8003d1e:	b108      	cbz	r0, 8003d24 <_printf_i+0x1bc>
 8003d20:	1b40      	subs	r0, r0, r5
 8003d22:	6060      	str	r0, [r4, #4]
 8003d24:	6863      	ldr	r3, [r4, #4]
 8003d26:	6123      	str	r3, [r4, #16]
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d2e:	e7a7      	b.n	8003c80 <_printf_i+0x118>
 8003d30:	6923      	ldr	r3, [r4, #16]
 8003d32:	462a      	mov	r2, r5
 8003d34:	4639      	mov	r1, r7
 8003d36:	4630      	mov	r0, r6
 8003d38:	47c0      	blx	r8
 8003d3a:	3001      	adds	r0, #1
 8003d3c:	d0aa      	beq.n	8003c94 <_printf_i+0x12c>
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	079b      	lsls	r3, r3, #30
 8003d42:	d413      	bmi.n	8003d6c <_printf_i+0x204>
 8003d44:	68e0      	ldr	r0, [r4, #12]
 8003d46:	9b03      	ldr	r3, [sp, #12]
 8003d48:	4298      	cmp	r0, r3
 8003d4a:	bfb8      	it	lt
 8003d4c:	4618      	movlt	r0, r3
 8003d4e:	e7a3      	b.n	8003c98 <_printf_i+0x130>
 8003d50:	2301      	movs	r3, #1
 8003d52:	464a      	mov	r2, r9
 8003d54:	4639      	mov	r1, r7
 8003d56:	4630      	mov	r0, r6
 8003d58:	47c0      	blx	r8
 8003d5a:	3001      	adds	r0, #1
 8003d5c:	d09a      	beq.n	8003c94 <_printf_i+0x12c>
 8003d5e:	3501      	adds	r5, #1
 8003d60:	68e3      	ldr	r3, [r4, #12]
 8003d62:	9a03      	ldr	r2, [sp, #12]
 8003d64:	1a9b      	subs	r3, r3, r2
 8003d66:	42ab      	cmp	r3, r5
 8003d68:	dcf2      	bgt.n	8003d50 <_printf_i+0x1e8>
 8003d6a:	e7eb      	b.n	8003d44 <_printf_i+0x1dc>
 8003d6c:	2500      	movs	r5, #0
 8003d6e:	f104 0919 	add.w	r9, r4, #25
 8003d72:	e7f5      	b.n	8003d60 <_printf_i+0x1f8>
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1ac      	bne.n	8003cd2 <_printf_i+0x16a>
 8003d78:	7803      	ldrb	r3, [r0, #0]
 8003d7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d82:	e76c      	b.n	8003c5e <_printf_i+0xf6>
 8003d84:	08005b7e 	.word	0x08005b7e
 8003d88:	08005b8f 	.word	0x08005b8f

08003d8c <iprintf>:
 8003d8c:	b40f      	push	{r0, r1, r2, r3}
 8003d8e:	4b0a      	ldr	r3, [pc, #40]	; (8003db8 <iprintf+0x2c>)
 8003d90:	b513      	push	{r0, r1, r4, lr}
 8003d92:	681c      	ldr	r4, [r3, #0]
 8003d94:	b124      	cbz	r4, 8003da0 <iprintf+0x14>
 8003d96:	69a3      	ldr	r3, [r4, #24]
 8003d98:	b913      	cbnz	r3, 8003da0 <iprintf+0x14>
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	f000 fe94 	bl	8004ac8 <__sinit>
 8003da0:	ab05      	add	r3, sp, #20
 8003da2:	9a04      	ldr	r2, [sp, #16]
 8003da4:	68a1      	ldr	r1, [r4, #8]
 8003da6:	9301      	str	r3, [sp, #4]
 8003da8:	4620      	mov	r0, r4
 8003daa:	f001 faf3 	bl	8005394 <_vfiprintf_r>
 8003dae:	b002      	add	sp, #8
 8003db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003db4:	b004      	add	sp, #16
 8003db6:	4770      	bx	lr
 8003db8:	2000000c 	.word	0x2000000c

08003dbc <quorem>:
 8003dbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc0:	6903      	ldr	r3, [r0, #16]
 8003dc2:	690c      	ldr	r4, [r1, #16]
 8003dc4:	42a3      	cmp	r3, r4
 8003dc6:	4680      	mov	r8, r0
 8003dc8:	f2c0 8082 	blt.w	8003ed0 <quorem+0x114>
 8003dcc:	3c01      	subs	r4, #1
 8003dce:	f101 0714 	add.w	r7, r1, #20
 8003dd2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003dd6:	f100 0614 	add.w	r6, r0, #20
 8003dda:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003dde:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003de2:	eb06 030c 	add.w	r3, r6, ip
 8003de6:	3501      	adds	r5, #1
 8003de8:	eb07 090c 	add.w	r9, r7, ip
 8003dec:	9301      	str	r3, [sp, #4]
 8003dee:	fbb0 f5f5 	udiv	r5, r0, r5
 8003df2:	b395      	cbz	r5, 8003e5a <quorem+0x9e>
 8003df4:	f04f 0a00 	mov.w	sl, #0
 8003df8:	4638      	mov	r0, r7
 8003dfa:	46b6      	mov	lr, r6
 8003dfc:	46d3      	mov	fp, sl
 8003dfe:	f850 2b04 	ldr.w	r2, [r0], #4
 8003e02:	b293      	uxth	r3, r2
 8003e04:	fb05 a303 	mla	r3, r5, r3, sl
 8003e08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	ebab 0303 	sub.w	r3, fp, r3
 8003e12:	0c12      	lsrs	r2, r2, #16
 8003e14:	f8de b000 	ldr.w	fp, [lr]
 8003e18:	fb05 a202 	mla	r2, r5, r2, sl
 8003e1c:	fa13 f38b 	uxtah	r3, r3, fp
 8003e20:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003e24:	fa1f fb82 	uxth.w	fp, r2
 8003e28:	f8de 2000 	ldr.w	r2, [lr]
 8003e2c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003e30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e3a:	4581      	cmp	r9, r0
 8003e3c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003e40:	f84e 3b04 	str.w	r3, [lr], #4
 8003e44:	d2db      	bcs.n	8003dfe <quorem+0x42>
 8003e46:	f856 300c 	ldr.w	r3, [r6, ip]
 8003e4a:	b933      	cbnz	r3, 8003e5a <quorem+0x9e>
 8003e4c:	9b01      	ldr	r3, [sp, #4]
 8003e4e:	3b04      	subs	r3, #4
 8003e50:	429e      	cmp	r6, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	d330      	bcc.n	8003eb8 <quorem+0xfc>
 8003e56:	f8c8 4010 	str.w	r4, [r8, #16]
 8003e5a:	4640      	mov	r0, r8
 8003e5c:	f001 f8f4 	bl	8005048 <__mcmp>
 8003e60:	2800      	cmp	r0, #0
 8003e62:	db25      	blt.n	8003eb0 <quorem+0xf4>
 8003e64:	3501      	adds	r5, #1
 8003e66:	4630      	mov	r0, r6
 8003e68:	f04f 0c00 	mov.w	ip, #0
 8003e6c:	f857 2b04 	ldr.w	r2, [r7], #4
 8003e70:	f8d0 e000 	ldr.w	lr, [r0]
 8003e74:	b293      	uxth	r3, r2
 8003e76:	ebac 0303 	sub.w	r3, ip, r3
 8003e7a:	0c12      	lsrs	r2, r2, #16
 8003e7c:	fa13 f38e 	uxtah	r3, r3, lr
 8003e80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003e84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e8e:	45b9      	cmp	r9, r7
 8003e90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003e94:	f840 3b04 	str.w	r3, [r0], #4
 8003e98:	d2e8      	bcs.n	8003e6c <quorem+0xb0>
 8003e9a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003e9e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003ea2:	b92a      	cbnz	r2, 8003eb0 <quorem+0xf4>
 8003ea4:	3b04      	subs	r3, #4
 8003ea6:	429e      	cmp	r6, r3
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	d30b      	bcc.n	8003ec4 <quorem+0x108>
 8003eac:	f8c8 4010 	str.w	r4, [r8, #16]
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	b003      	add	sp, #12
 8003eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eb8:	6812      	ldr	r2, [r2, #0]
 8003eba:	3b04      	subs	r3, #4
 8003ebc:	2a00      	cmp	r2, #0
 8003ebe:	d1ca      	bne.n	8003e56 <quorem+0x9a>
 8003ec0:	3c01      	subs	r4, #1
 8003ec2:	e7c5      	b.n	8003e50 <quorem+0x94>
 8003ec4:	6812      	ldr	r2, [r2, #0]
 8003ec6:	3b04      	subs	r3, #4
 8003ec8:	2a00      	cmp	r2, #0
 8003eca:	d1ef      	bne.n	8003eac <quorem+0xf0>
 8003ecc:	3c01      	subs	r4, #1
 8003ece:	e7ea      	b.n	8003ea6 <quorem+0xea>
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	e7ee      	b.n	8003eb2 <quorem+0xf6>
 8003ed4:	0000      	movs	r0, r0
	...

08003ed8 <_dtoa_r>:
 8003ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003edc:	ec57 6b10 	vmov	r6, r7, d0
 8003ee0:	b097      	sub	sp, #92	; 0x5c
 8003ee2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003ee4:	9106      	str	r1, [sp, #24]
 8003ee6:	4604      	mov	r4, r0
 8003ee8:	920b      	str	r2, [sp, #44]	; 0x2c
 8003eea:	9312      	str	r3, [sp, #72]	; 0x48
 8003eec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003ef0:	e9cd 6700 	strd	r6, r7, [sp]
 8003ef4:	b93d      	cbnz	r5, 8003f06 <_dtoa_r+0x2e>
 8003ef6:	2010      	movs	r0, #16
 8003ef8:	f000 fe7e 	bl	8004bf8 <malloc>
 8003efc:	6260      	str	r0, [r4, #36]	; 0x24
 8003efe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003f02:	6005      	str	r5, [r0, #0]
 8003f04:	60c5      	str	r5, [r0, #12]
 8003f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f08:	6819      	ldr	r1, [r3, #0]
 8003f0a:	b151      	cbz	r1, 8003f22 <_dtoa_r+0x4a>
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	604a      	str	r2, [r1, #4]
 8003f10:	2301      	movs	r3, #1
 8003f12:	4093      	lsls	r3, r2
 8003f14:	608b      	str	r3, [r1, #8]
 8003f16:	4620      	mov	r0, r4
 8003f18:	f000 feb5 	bl	8004c86 <_Bfree>
 8003f1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	1e3b      	subs	r3, r7, #0
 8003f24:	bfbb      	ittet	lt
 8003f26:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003f2a:	9301      	strlt	r3, [sp, #4]
 8003f2c:	2300      	movge	r3, #0
 8003f2e:	2201      	movlt	r2, #1
 8003f30:	bfac      	ite	ge
 8003f32:	f8c8 3000 	strge.w	r3, [r8]
 8003f36:	f8c8 2000 	strlt.w	r2, [r8]
 8003f3a:	4baf      	ldr	r3, [pc, #700]	; (80041f8 <_dtoa_r+0x320>)
 8003f3c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003f40:	ea33 0308 	bics.w	r3, r3, r8
 8003f44:	d114      	bne.n	8003f70 <_dtoa_r+0x98>
 8003f46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003f48:	f242 730f 	movw	r3, #9999	; 0x270f
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	9b00      	ldr	r3, [sp, #0]
 8003f50:	b923      	cbnz	r3, 8003f5c <_dtoa_r+0x84>
 8003f52:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003f56:	2800      	cmp	r0, #0
 8003f58:	f000 8542 	beq.w	80049e0 <_dtoa_r+0xb08>
 8003f5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f5e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800420c <_dtoa_r+0x334>
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 8544 	beq.w	80049f0 <_dtoa_r+0xb18>
 8003f68:	f10b 0303 	add.w	r3, fp, #3
 8003f6c:	f000 bd3e 	b.w	80049ec <_dtoa_r+0xb14>
 8003f70:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003f74:	2200      	movs	r2, #0
 8003f76:	2300      	movs	r3, #0
 8003f78:	4630      	mov	r0, r6
 8003f7a:	4639      	mov	r1, r7
 8003f7c:	f7fc fda4 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f80:	4681      	mov	r9, r0
 8003f82:	b168      	cbz	r0, 8003fa0 <_dtoa_r+0xc8>
 8003f84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003f86:	2301      	movs	r3, #1
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 8524 	beq.w	80049da <_dtoa_r+0xb02>
 8003f92:	4b9a      	ldr	r3, [pc, #616]	; (80041fc <_dtoa_r+0x324>)
 8003f94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003f96:	f103 3bff 	add.w	fp, r3, #4294967295
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	f000 bd28 	b.w	80049f0 <_dtoa_r+0xb18>
 8003fa0:	aa14      	add	r2, sp, #80	; 0x50
 8003fa2:	a915      	add	r1, sp, #84	; 0x54
 8003fa4:	ec47 6b10 	vmov	d0, r6, r7
 8003fa8:	4620      	mov	r0, r4
 8003faa:	f001 f8c4 	bl	8005136 <__d2b>
 8003fae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003fb2:	9004      	str	r0, [sp, #16]
 8003fb4:	2d00      	cmp	r5, #0
 8003fb6:	d07c      	beq.n	80040b2 <_dtoa_r+0x1da>
 8003fb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003fbc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8003fc0:	46b2      	mov	sl, r6
 8003fc2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8003fc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003fca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8003fce:	2200      	movs	r2, #0
 8003fd0:	4b8b      	ldr	r3, [pc, #556]	; (8004200 <_dtoa_r+0x328>)
 8003fd2:	4650      	mov	r0, sl
 8003fd4:	4659      	mov	r1, fp
 8003fd6:	f7fc f957 	bl	8000288 <__aeabi_dsub>
 8003fda:	a381      	add	r3, pc, #516	; (adr r3, 80041e0 <_dtoa_r+0x308>)
 8003fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe0:	f7fc fb0a 	bl	80005f8 <__aeabi_dmul>
 8003fe4:	a380      	add	r3, pc, #512	; (adr r3, 80041e8 <_dtoa_r+0x310>)
 8003fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fea:	f7fc f94f 	bl	800028c <__adddf3>
 8003fee:	4606      	mov	r6, r0
 8003ff0:	4628      	mov	r0, r5
 8003ff2:	460f      	mov	r7, r1
 8003ff4:	f7fc fa96 	bl	8000524 <__aeabi_i2d>
 8003ff8:	a37d      	add	r3, pc, #500	; (adr r3, 80041f0 <_dtoa_r+0x318>)
 8003ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffe:	f7fc fafb 	bl	80005f8 <__aeabi_dmul>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	4630      	mov	r0, r6
 8004008:	4639      	mov	r1, r7
 800400a:	f7fc f93f 	bl	800028c <__adddf3>
 800400e:	4606      	mov	r6, r0
 8004010:	460f      	mov	r7, r1
 8004012:	f7fc fda1 	bl	8000b58 <__aeabi_d2iz>
 8004016:	2200      	movs	r2, #0
 8004018:	4682      	mov	sl, r0
 800401a:	2300      	movs	r3, #0
 800401c:	4630      	mov	r0, r6
 800401e:	4639      	mov	r1, r7
 8004020:	f7fc fd5c 	bl	8000adc <__aeabi_dcmplt>
 8004024:	b148      	cbz	r0, 800403a <_dtoa_r+0x162>
 8004026:	4650      	mov	r0, sl
 8004028:	f7fc fa7c 	bl	8000524 <__aeabi_i2d>
 800402c:	4632      	mov	r2, r6
 800402e:	463b      	mov	r3, r7
 8004030:	f7fc fd4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004034:	b908      	cbnz	r0, 800403a <_dtoa_r+0x162>
 8004036:	f10a 3aff 	add.w	sl, sl, #4294967295
 800403a:	f1ba 0f16 	cmp.w	sl, #22
 800403e:	d859      	bhi.n	80040f4 <_dtoa_r+0x21c>
 8004040:	4970      	ldr	r1, [pc, #448]	; (8004204 <_dtoa_r+0x32c>)
 8004042:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004046:	e9dd 2300 	ldrd	r2, r3, [sp]
 800404a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800404e:	f7fc fd63 	bl	8000b18 <__aeabi_dcmpgt>
 8004052:	2800      	cmp	r0, #0
 8004054:	d050      	beq.n	80040f8 <_dtoa_r+0x220>
 8004056:	f10a 3aff 	add.w	sl, sl, #4294967295
 800405a:	2300      	movs	r3, #0
 800405c:	930f      	str	r3, [sp, #60]	; 0x3c
 800405e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004060:	1b5d      	subs	r5, r3, r5
 8004062:	f1b5 0801 	subs.w	r8, r5, #1
 8004066:	bf49      	itett	mi
 8004068:	f1c5 0301 	rsbmi	r3, r5, #1
 800406c:	2300      	movpl	r3, #0
 800406e:	9305      	strmi	r3, [sp, #20]
 8004070:	f04f 0800 	movmi.w	r8, #0
 8004074:	bf58      	it	pl
 8004076:	9305      	strpl	r3, [sp, #20]
 8004078:	f1ba 0f00 	cmp.w	sl, #0
 800407c:	db3e      	blt.n	80040fc <_dtoa_r+0x224>
 800407e:	2300      	movs	r3, #0
 8004080:	44d0      	add	r8, sl
 8004082:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004086:	9307      	str	r3, [sp, #28]
 8004088:	9b06      	ldr	r3, [sp, #24]
 800408a:	2b09      	cmp	r3, #9
 800408c:	f200 8090 	bhi.w	80041b0 <_dtoa_r+0x2d8>
 8004090:	2b05      	cmp	r3, #5
 8004092:	bfc4      	itt	gt
 8004094:	3b04      	subgt	r3, #4
 8004096:	9306      	strgt	r3, [sp, #24]
 8004098:	9b06      	ldr	r3, [sp, #24]
 800409a:	f1a3 0302 	sub.w	r3, r3, #2
 800409e:	bfcc      	ite	gt
 80040a0:	2500      	movgt	r5, #0
 80040a2:	2501      	movle	r5, #1
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	f200 808f 	bhi.w	80041c8 <_dtoa_r+0x2f0>
 80040aa:	e8df f003 	tbb	[pc, r3]
 80040ae:	7f7d      	.short	0x7f7d
 80040b0:	7131      	.short	0x7131
 80040b2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80040b6:	441d      	add	r5, r3
 80040b8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80040bc:	2820      	cmp	r0, #32
 80040be:	dd13      	ble.n	80040e8 <_dtoa_r+0x210>
 80040c0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80040c4:	9b00      	ldr	r3, [sp, #0]
 80040c6:	fa08 f800 	lsl.w	r8, r8, r0
 80040ca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80040ce:	fa23 f000 	lsr.w	r0, r3, r0
 80040d2:	ea48 0000 	orr.w	r0, r8, r0
 80040d6:	f7fc fa15 	bl	8000504 <__aeabi_ui2d>
 80040da:	2301      	movs	r3, #1
 80040dc:	4682      	mov	sl, r0
 80040de:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80040e2:	3d01      	subs	r5, #1
 80040e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80040e6:	e772      	b.n	8003fce <_dtoa_r+0xf6>
 80040e8:	9b00      	ldr	r3, [sp, #0]
 80040ea:	f1c0 0020 	rsb	r0, r0, #32
 80040ee:	fa03 f000 	lsl.w	r0, r3, r0
 80040f2:	e7f0      	b.n	80040d6 <_dtoa_r+0x1fe>
 80040f4:	2301      	movs	r3, #1
 80040f6:	e7b1      	b.n	800405c <_dtoa_r+0x184>
 80040f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80040fa:	e7b0      	b.n	800405e <_dtoa_r+0x186>
 80040fc:	9b05      	ldr	r3, [sp, #20]
 80040fe:	eba3 030a 	sub.w	r3, r3, sl
 8004102:	9305      	str	r3, [sp, #20]
 8004104:	f1ca 0300 	rsb	r3, sl, #0
 8004108:	9307      	str	r3, [sp, #28]
 800410a:	2300      	movs	r3, #0
 800410c:	930e      	str	r3, [sp, #56]	; 0x38
 800410e:	e7bb      	b.n	8004088 <_dtoa_r+0x1b0>
 8004110:	2301      	movs	r3, #1
 8004112:	930a      	str	r3, [sp, #40]	; 0x28
 8004114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004116:	2b00      	cmp	r3, #0
 8004118:	dd59      	ble.n	80041ce <_dtoa_r+0x2f6>
 800411a:	9302      	str	r3, [sp, #8]
 800411c:	4699      	mov	r9, r3
 800411e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004120:	2200      	movs	r2, #0
 8004122:	6072      	str	r2, [r6, #4]
 8004124:	2204      	movs	r2, #4
 8004126:	f102 0014 	add.w	r0, r2, #20
 800412a:	4298      	cmp	r0, r3
 800412c:	6871      	ldr	r1, [r6, #4]
 800412e:	d953      	bls.n	80041d8 <_dtoa_r+0x300>
 8004130:	4620      	mov	r0, r4
 8004132:	f000 fd74 	bl	8004c1e <_Balloc>
 8004136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004138:	6030      	str	r0, [r6, #0]
 800413a:	f1b9 0f0e 	cmp.w	r9, #14
 800413e:	f8d3 b000 	ldr.w	fp, [r3]
 8004142:	f200 80e6 	bhi.w	8004312 <_dtoa_r+0x43a>
 8004146:	2d00      	cmp	r5, #0
 8004148:	f000 80e3 	beq.w	8004312 <_dtoa_r+0x43a>
 800414c:	ed9d 7b00 	vldr	d7, [sp]
 8004150:	f1ba 0f00 	cmp.w	sl, #0
 8004154:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004158:	dd74      	ble.n	8004244 <_dtoa_r+0x36c>
 800415a:	4a2a      	ldr	r2, [pc, #168]	; (8004204 <_dtoa_r+0x32c>)
 800415c:	f00a 030f 	and.w	r3, sl, #15
 8004160:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004164:	ed93 7b00 	vldr	d7, [r3]
 8004168:	ea4f 162a 	mov.w	r6, sl, asr #4
 800416c:	06f0      	lsls	r0, r6, #27
 800416e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004172:	d565      	bpl.n	8004240 <_dtoa_r+0x368>
 8004174:	4b24      	ldr	r3, [pc, #144]	; (8004208 <_dtoa_r+0x330>)
 8004176:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800417a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800417e:	f7fc fb65 	bl	800084c <__aeabi_ddiv>
 8004182:	e9cd 0100 	strd	r0, r1, [sp]
 8004186:	f006 060f 	and.w	r6, r6, #15
 800418a:	2503      	movs	r5, #3
 800418c:	4f1e      	ldr	r7, [pc, #120]	; (8004208 <_dtoa_r+0x330>)
 800418e:	e04c      	b.n	800422a <_dtoa_r+0x352>
 8004190:	2301      	movs	r3, #1
 8004192:	930a      	str	r3, [sp, #40]	; 0x28
 8004194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004196:	4453      	add	r3, sl
 8004198:	f103 0901 	add.w	r9, r3, #1
 800419c:	9302      	str	r3, [sp, #8]
 800419e:	464b      	mov	r3, r9
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	bfb8      	it	lt
 80041a4:	2301      	movlt	r3, #1
 80041a6:	e7ba      	b.n	800411e <_dtoa_r+0x246>
 80041a8:	2300      	movs	r3, #0
 80041aa:	e7b2      	b.n	8004112 <_dtoa_r+0x23a>
 80041ac:	2300      	movs	r3, #0
 80041ae:	e7f0      	b.n	8004192 <_dtoa_r+0x2ba>
 80041b0:	2501      	movs	r5, #1
 80041b2:	2300      	movs	r3, #0
 80041b4:	9306      	str	r3, [sp, #24]
 80041b6:	950a      	str	r5, [sp, #40]	; 0x28
 80041b8:	f04f 33ff 	mov.w	r3, #4294967295
 80041bc:	9302      	str	r3, [sp, #8]
 80041be:	4699      	mov	r9, r3
 80041c0:	2200      	movs	r2, #0
 80041c2:	2312      	movs	r3, #18
 80041c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80041c6:	e7aa      	b.n	800411e <_dtoa_r+0x246>
 80041c8:	2301      	movs	r3, #1
 80041ca:	930a      	str	r3, [sp, #40]	; 0x28
 80041cc:	e7f4      	b.n	80041b8 <_dtoa_r+0x2e0>
 80041ce:	2301      	movs	r3, #1
 80041d0:	9302      	str	r3, [sp, #8]
 80041d2:	4699      	mov	r9, r3
 80041d4:	461a      	mov	r2, r3
 80041d6:	e7f5      	b.n	80041c4 <_dtoa_r+0x2ec>
 80041d8:	3101      	adds	r1, #1
 80041da:	6071      	str	r1, [r6, #4]
 80041dc:	0052      	lsls	r2, r2, #1
 80041de:	e7a2      	b.n	8004126 <_dtoa_r+0x24e>
 80041e0:	636f4361 	.word	0x636f4361
 80041e4:	3fd287a7 	.word	0x3fd287a7
 80041e8:	8b60c8b3 	.word	0x8b60c8b3
 80041ec:	3fc68a28 	.word	0x3fc68a28
 80041f0:	509f79fb 	.word	0x509f79fb
 80041f4:	3fd34413 	.word	0x3fd34413
 80041f8:	7ff00000 	.word	0x7ff00000
 80041fc:	08005b7d 	.word	0x08005b7d
 8004200:	3ff80000 	.word	0x3ff80000
 8004204:	08005c38 	.word	0x08005c38
 8004208:	08005c10 	.word	0x08005c10
 800420c:	08005ba9 	.word	0x08005ba9
 8004210:	07f1      	lsls	r1, r6, #31
 8004212:	d508      	bpl.n	8004226 <_dtoa_r+0x34e>
 8004214:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800421c:	f7fc f9ec 	bl	80005f8 <__aeabi_dmul>
 8004220:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004224:	3501      	adds	r5, #1
 8004226:	1076      	asrs	r6, r6, #1
 8004228:	3708      	adds	r7, #8
 800422a:	2e00      	cmp	r6, #0
 800422c:	d1f0      	bne.n	8004210 <_dtoa_r+0x338>
 800422e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004232:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004236:	f7fc fb09 	bl	800084c <__aeabi_ddiv>
 800423a:	e9cd 0100 	strd	r0, r1, [sp]
 800423e:	e01a      	b.n	8004276 <_dtoa_r+0x39e>
 8004240:	2502      	movs	r5, #2
 8004242:	e7a3      	b.n	800418c <_dtoa_r+0x2b4>
 8004244:	f000 80a0 	beq.w	8004388 <_dtoa_r+0x4b0>
 8004248:	f1ca 0600 	rsb	r6, sl, #0
 800424c:	4b9f      	ldr	r3, [pc, #636]	; (80044cc <_dtoa_r+0x5f4>)
 800424e:	4fa0      	ldr	r7, [pc, #640]	; (80044d0 <_dtoa_r+0x5f8>)
 8004250:	f006 020f 	and.w	r2, r6, #15
 8004254:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004260:	f7fc f9ca 	bl	80005f8 <__aeabi_dmul>
 8004264:	e9cd 0100 	strd	r0, r1, [sp]
 8004268:	1136      	asrs	r6, r6, #4
 800426a:	2300      	movs	r3, #0
 800426c:	2502      	movs	r5, #2
 800426e:	2e00      	cmp	r6, #0
 8004270:	d17f      	bne.n	8004372 <_dtoa_r+0x49a>
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1e1      	bne.n	800423a <_dtoa_r+0x362>
 8004276:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 8087 	beq.w	800438c <_dtoa_r+0x4b4>
 800427e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004282:	2200      	movs	r2, #0
 8004284:	4b93      	ldr	r3, [pc, #588]	; (80044d4 <_dtoa_r+0x5fc>)
 8004286:	4630      	mov	r0, r6
 8004288:	4639      	mov	r1, r7
 800428a:	f7fc fc27 	bl	8000adc <__aeabi_dcmplt>
 800428e:	2800      	cmp	r0, #0
 8004290:	d07c      	beq.n	800438c <_dtoa_r+0x4b4>
 8004292:	f1b9 0f00 	cmp.w	r9, #0
 8004296:	d079      	beq.n	800438c <_dtoa_r+0x4b4>
 8004298:	9b02      	ldr	r3, [sp, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	dd35      	ble.n	800430a <_dtoa_r+0x432>
 800429e:	f10a 33ff 	add.w	r3, sl, #4294967295
 80042a2:	9308      	str	r3, [sp, #32]
 80042a4:	4639      	mov	r1, r7
 80042a6:	2200      	movs	r2, #0
 80042a8:	4b8b      	ldr	r3, [pc, #556]	; (80044d8 <_dtoa_r+0x600>)
 80042aa:	4630      	mov	r0, r6
 80042ac:	f7fc f9a4 	bl	80005f8 <__aeabi_dmul>
 80042b0:	e9cd 0100 	strd	r0, r1, [sp]
 80042b4:	9f02      	ldr	r7, [sp, #8]
 80042b6:	3501      	adds	r5, #1
 80042b8:	4628      	mov	r0, r5
 80042ba:	f7fc f933 	bl	8000524 <__aeabi_i2d>
 80042be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80042c2:	f7fc f999 	bl	80005f8 <__aeabi_dmul>
 80042c6:	2200      	movs	r2, #0
 80042c8:	4b84      	ldr	r3, [pc, #528]	; (80044dc <_dtoa_r+0x604>)
 80042ca:	f7fb ffdf 	bl	800028c <__adddf3>
 80042ce:	4605      	mov	r5, r0
 80042d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80042d4:	2f00      	cmp	r7, #0
 80042d6:	d15d      	bne.n	8004394 <_dtoa_r+0x4bc>
 80042d8:	2200      	movs	r2, #0
 80042da:	4b81      	ldr	r3, [pc, #516]	; (80044e0 <_dtoa_r+0x608>)
 80042dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80042e0:	f7fb ffd2 	bl	8000288 <__aeabi_dsub>
 80042e4:	462a      	mov	r2, r5
 80042e6:	4633      	mov	r3, r6
 80042e8:	e9cd 0100 	strd	r0, r1, [sp]
 80042ec:	f7fc fc14 	bl	8000b18 <__aeabi_dcmpgt>
 80042f0:	2800      	cmp	r0, #0
 80042f2:	f040 8288 	bne.w	8004806 <_dtoa_r+0x92e>
 80042f6:	462a      	mov	r2, r5
 80042f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80042fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004300:	f7fc fbec 	bl	8000adc <__aeabi_dcmplt>
 8004304:	2800      	cmp	r0, #0
 8004306:	f040 827c 	bne.w	8004802 <_dtoa_r+0x92a>
 800430a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800430e:	e9cd 2300 	strd	r2, r3, [sp]
 8004312:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004314:	2b00      	cmp	r3, #0
 8004316:	f2c0 8150 	blt.w	80045ba <_dtoa_r+0x6e2>
 800431a:	f1ba 0f0e 	cmp.w	sl, #14
 800431e:	f300 814c 	bgt.w	80045ba <_dtoa_r+0x6e2>
 8004322:	4b6a      	ldr	r3, [pc, #424]	; (80044cc <_dtoa_r+0x5f4>)
 8004324:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004328:	ed93 7b00 	vldr	d7, [r3]
 800432c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800432e:	2b00      	cmp	r3, #0
 8004330:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004334:	f280 80d8 	bge.w	80044e8 <_dtoa_r+0x610>
 8004338:	f1b9 0f00 	cmp.w	r9, #0
 800433c:	f300 80d4 	bgt.w	80044e8 <_dtoa_r+0x610>
 8004340:	f040 825e 	bne.w	8004800 <_dtoa_r+0x928>
 8004344:	2200      	movs	r2, #0
 8004346:	4b66      	ldr	r3, [pc, #408]	; (80044e0 <_dtoa_r+0x608>)
 8004348:	ec51 0b17 	vmov	r0, r1, d7
 800434c:	f7fc f954 	bl	80005f8 <__aeabi_dmul>
 8004350:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004354:	f7fc fbd6 	bl	8000b04 <__aeabi_dcmpge>
 8004358:	464f      	mov	r7, r9
 800435a:	464e      	mov	r6, r9
 800435c:	2800      	cmp	r0, #0
 800435e:	f040 8234 	bne.w	80047ca <_dtoa_r+0x8f2>
 8004362:	2331      	movs	r3, #49	; 0x31
 8004364:	f10b 0501 	add.w	r5, fp, #1
 8004368:	f88b 3000 	strb.w	r3, [fp]
 800436c:	f10a 0a01 	add.w	sl, sl, #1
 8004370:	e22f      	b.n	80047d2 <_dtoa_r+0x8fa>
 8004372:	07f2      	lsls	r2, r6, #31
 8004374:	d505      	bpl.n	8004382 <_dtoa_r+0x4aa>
 8004376:	e9d7 2300 	ldrd	r2, r3, [r7]
 800437a:	f7fc f93d 	bl	80005f8 <__aeabi_dmul>
 800437e:	3501      	adds	r5, #1
 8004380:	2301      	movs	r3, #1
 8004382:	1076      	asrs	r6, r6, #1
 8004384:	3708      	adds	r7, #8
 8004386:	e772      	b.n	800426e <_dtoa_r+0x396>
 8004388:	2502      	movs	r5, #2
 800438a:	e774      	b.n	8004276 <_dtoa_r+0x39e>
 800438c:	f8cd a020 	str.w	sl, [sp, #32]
 8004390:	464f      	mov	r7, r9
 8004392:	e791      	b.n	80042b8 <_dtoa_r+0x3e0>
 8004394:	4b4d      	ldr	r3, [pc, #308]	; (80044cc <_dtoa_r+0x5f4>)
 8004396:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800439a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800439e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d047      	beq.n	8004434 <_dtoa_r+0x55c>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	2000      	movs	r0, #0
 80043aa:	494e      	ldr	r1, [pc, #312]	; (80044e4 <_dtoa_r+0x60c>)
 80043ac:	f7fc fa4e 	bl	800084c <__aeabi_ddiv>
 80043b0:	462a      	mov	r2, r5
 80043b2:	4633      	mov	r3, r6
 80043b4:	f7fb ff68 	bl	8000288 <__aeabi_dsub>
 80043b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80043bc:	465d      	mov	r5, fp
 80043be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043c2:	f7fc fbc9 	bl	8000b58 <__aeabi_d2iz>
 80043c6:	4606      	mov	r6, r0
 80043c8:	f7fc f8ac 	bl	8000524 <__aeabi_i2d>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043d4:	f7fb ff58 	bl	8000288 <__aeabi_dsub>
 80043d8:	3630      	adds	r6, #48	; 0x30
 80043da:	f805 6b01 	strb.w	r6, [r5], #1
 80043de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80043e2:	e9cd 0100 	strd	r0, r1, [sp]
 80043e6:	f7fc fb79 	bl	8000adc <__aeabi_dcmplt>
 80043ea:	2800      	cmp	r0, #0
 80043ec:	d163      	bne.n	80044b6 <_dtoa_r+0x5de>
 80043ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043f2:	2000      	movs	r0, #0
 80043f4:	4937      	ldr	r1, [pc, #220]	; (80044d4 <_dtoa_r+0x5fc>)
 80043f6:	f7fb ff47 	bl	8000288 <__aeabi_dsub>
 80043fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80043fe:	f7fc fb6d 	bl	8000adc <__aeabi_dcmplt>
 8004402:	2800      	cmp	r0, #0
 8004404:	f040 80b7 	bne.w	8004576 <_dtoa_r+0x69e>
 8004408:	eba5 030b 	sub.w	r3, r5, fp
 800440c:	429f      	cmp	r7, r3
 800440e:	f77f af7c 	ble.w	800430a <_dtoa_r+0x432>
 8004412:	2200      	movs	r2, #0
 8004414:	4b30      	ldr	r3, [pc, #192]	; (80044d8 <_dtoa_r+0x600>)
 8004416:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800441a:	f7fc f8ed 	bl	80005f8 <__aeabi_dmul>
 800441e:	2200      	movs	r2, #0
 8004420:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004424:	4b2c      	ldr	r3, [pc, #176]	; (80044d8 <_dtoa_r+0x600>)
 8004426:	e9dd 0100 	ldrd	r0, r1, [sp]
 800442a:	f7fc f8e5 	bl	80005f8 <__aeabi_dmul>
 800442e:	e9cd 0100 	strd	r0, r1, [sp]
 8004432:	e7c4      	b.n	80043be <_dtoa_r+0x4e6>
 8004434:	462a      	mov	r2, r5
 8004436:	4633      	mov	r3, r6
 8004438:	f7fc f8de 	bl	80005f8 <__aeabi_dmul>
 800443c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004440:	eb0b 0507 	add.w	r5, fp, r7
 8004444:	465e      	mov	r6, fp
 8004446:	e9dd 0100 	ldrd	r0, r1, [sp]
 800444a:	f7fc fb85 	bl	8000b58 <__aeabi_d2iz>
 800444e:	4607      	mov	r7, r0
 8004450:	f7fc f868 	bl	8000524 <__aeabi_i2d>
 8004454:	3730      	adds	r7, #48	; 0x30
 8004456:	4602      	mov	r2, r0
 8004458:	460b      	mov	r3, r1
 800445a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800445e:	f7fb ff13 	bl	8000288 <__aeabi_dsub>
 8004462:	f806 7b01 	strb.w	r7, [r6], #1
 8004466:	42ae      	cmp	r6, r5
 8004468:	e9cd 0100 	strd	r0, r1, [sp]
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	d126      	bne.n	80044c0 <_dtoa_r+0x5e8>
 8004472:	4b1c      	ldr	r3, [pc, #112]	; (80044e4 <_dtoa_r+0x60c>)
 8004474:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004478:	f7fb ff08 	bl	800028c <__adddf3>
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004484:	f7fc fb48 	bl	8000b18 <__aeabi_dcmpgt>
 8004488:	2800      	cmp	r0, #0
 800448a:	d174      	bne.n	8004576 <_dtoa_r+0x69e>
 800448c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004490:	2000      	movs	r0, #0
 8004492:	4914      	ldr	r1, [pc, #80]	; (80044e4 <_dtoa_r+0x60c>)
 8004494:	f7fb fef8 	bl	8000288 <__aeabi_dsub>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80044a0:	f7fc fb1c 	bl	8000adc <__aeabi_dcmplt>
 80044a4:	2800      	cmp	r0, #0
 80044a6:	f43f af30 	beq.w	800430a <_dtoa_r+0x432>
 80044aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80044ae:	2b30      	cmp	r3, #48	; 0x30
 80044b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80044b4:	d002      	beq.n	80044bc <_dtoa_r+0x5e4>
 80044b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80044ba:	e04a      	b.n	8004552 <_dtoa_r+0x67a>
 80044bc:	4615      	mov	r5, r2
 80044be:	e7f4      	b.n	80044aa <_dtoa_r+0x5d2>
 80044c0:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <_dtoa_r+0x600>)
 80044c2:	f7fc f899 	bl	80005f8 <__aeabi_dmul>
 80044c6:	e9cd 0100 	strd	r0, r1, [sp]
 80044ca:	e7bc      	b.n	8004446 <_dtoa_r+0x56e>
 80044cc:	08005c38 	.word	0x08005c38
 80044d0:	08005c10 	.word	0x08005c10
 80044d4:	3ff00000 	.word	0x3ff00000
 80044d8:	40240000 	.word	0x40240000
 80044dc:	401c0000 	.word	0x401c0000
 80044e0:	40140000 	.word	0x40140000
 80044e4:	3fe00000 	.word	0x3fe00000
 80044e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80044ec:	465d      	mov	r5, fp
 80044ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80044f2:	4630      	mov	r0, r6
 80044f4:	4639      	mov	r1, r7
 80044f6:	f7fc f9a9 	bl	800084c <__aeabi_ddiv>
 80044fa:	f7fc fb2d 	bl	8000b58 <__aeabi_d2iz>
 80044fe:	4680      	mov	r8, r0
 8004500:	f7fc f810 	bl	8000524 <__aeabi_i2d>
 8004504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004508:	f7fc f876 	bl	80005f8 <__aeabi_dmul>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4630      	mov	r0, r6
 8004512:	4639      	mov	r1, r7
 8004514:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004518:	f7fb feb6 	bl	8000288 <__aeabi_dsub>
 800451c:	f805 6b01 	strb.w	r6, [r5], #1
 8004520:	eba5 060b 	sub.w	r6, r5, fp
 8004524:	45b1      	cmp	r9, r6
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	d139      	bne.n	80045a0 <_dtoa_r+0x6c8>
 800452c:	f7fb feae 	bl	800028c <__adddf3>
 8004530:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004534:	4606      	mov	r6, r0
 8004536:	460f      	mov	r7, r1
 8004538:	f7fc faee 	bl	8000b18 <__aeabi_dcmpgt>
 800453c:	b9c8      	cbnz	r0, 8004572 <_dtoa_r+0x69a>
 800453e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004542:	4630      	mov	r0, r6
 8004544:	4639      	mov	r1, r7
 8004546:	f7fc fabf 	bl	8000ac8 <__aeabi_dcmpeq>
 800454a:	b110      	cbz	r0, 8004552 <_dtoa_r+0x67a>
 800454c:	f018 0f01 	tst.w	r8, #1
 8004550:	d10f      	bne.n	8004572 <_dtoa_r+0x69a>
 8004552:	9904      	ldr	r1, [sp, #16]
 8004554:	4620      	mov	r0, r4
 8004556:	f000 fb96 	bl	8004c86 <_Bfree>
 800455a:	2300      	movs	r3, #0
 800455c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800455e:	702b      	strb	r3, [r5, #0]
 8004560:	f10a 0301 	add.w	r3, sl, #1
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8241 	beq.w	80049f0 <_dtoa_r+0xb18>
 800456e:	601d      	str	r5, [r3, #0]
 8004570:	e23e      	b.n	80049f0 <_dtoa_r+0xb18>
 8004572:	f8cd a020 	str.w	sl, [sp, #32]
 8004576:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800457a:	2a39      	cmp	r2, #57	; 0x39
 800457c:	f105 33ff 	add.w	r3, r5, #4294967295
 8004580:	d108      	bne.n	8004594 <_dtoa_r+0x6bc>
 8004582:	459b      	cmp	fp, r3
 8004584:	d10a      	bne.n	800459c <_dtoa_r+0x6c4>
 8004586:	9b08      	ldr	r3, [sp, #32]
 8004588:	3301      	adds	r3, #1
 800458a:	9308      	str	r3, [sp, #32]
 800458c:	2330      	movs	r3, #48	; 0x30
 800458e:	f88b 3000 	strb.w	r3, [fp]
 8004592:	465b      	mov	r3, fp
 8004594:	781a      	ldrb	r2, [r3, #0]
 8004596:	3201      	adds	r2, #1
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	e78c      	b.n	80044b6 <_dtoa_r+0x5de>
 800459c:	461d      	mov	r5, r3
 800459e:	e7ea      	b.n	8004576 <_dtoa_r+0x69e>
 80045a0:	2200      	movs	r2, #0
 80045a2:	4b9b      	ldr	r3, [pc, #620]	; (8004810 <_dtoa_r+0x938>)
 80045a4:	f7fc f828 	bl	80005f8 <__aeabi_dmul>
 80045a8:	2200      	movs	r2, #0
 80045aa:	2300      	movs	r3, #0
 80045ac:	4606      	mov	r6, r0
 80045ae:	460f      	mov	r7, r1
 80045b0:	f7fc fa8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80045b4:	2800      	cmp	r0, #0
 80045b6:	d09a      	beq.n	80044ee <_dtoa_r+0x616>
 80045b8:	e7cb      	b.n	8004552 <_dtoa_r+0x67a>
 80045ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045bc:	2a00      	cmp	r2, #0
 80045be:	f000 808b 	beq.w	80046d8 <_dtoa_r+0x800>
 80045c2:	9a06      	ldr	r2, [sp, #24]
 80045c4:	2a01      	cmp	r2, #1
 80045c6:	dc6e      	bgt.n	80046a6 <_dtoa_r+0x7ce>
 80045c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80045ca:	2a00      	cmp	r2, #0
 80045cc:	d067      	beq.n	800469e <_dtoa_r+0x7c6>
 80045ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80045d2:	9f07      	ldr	r7, [sp, #28]
 80045d4:	9d05      	ldr	r5, [sp, #20]
 80045d6:	9a05      	ldr	r2, [sp, #20]
 80045d8:	2101      	movs	r1, #1
 80045da:	441a      	add	r2, r3
 80045dc:	4620      	mov	r0, r4
 80045de:	9205      	str	r2, [sp, #20]
 80045e0:	4498      	add	r8, r3
 80045e2:	f000 fbf0 	bl	8004dc6 <__i2b>
 80045e6:	4606      	mov	r6, r0
 80045e8:	2d00      	cmp	r5, #0
 80045ea:	dd0c      	ble.n	8004606 <_dtoa_r+0x72e>
 80045ec:	f1b8 0f00 	cmp.w	r8, #0
 80045f0:	dd09      	ble.n	8004606 <_dtoa_r+0x72e>
 80045f2:	4545      	cmp	r5, r8
 80045f4:	9a05      	ldr	r2, [sp, #20]
 80045f6:	462b      	mov	r3, r5
 80045f8:	bfa8      	it	ge
 80045fa:	4643      	movge	r3, r8
 80045fc:	1ad2      	subs	r2, r2, r3
 80045fe:	9205      	str	r2, [sp, #20]
 8004600:	1aed      	subs	r5, r5, r3
 8004602:	eba8 0803 	sub.w	r8, r8, r3
 8004606:	9b07      	ldr	r3, [sp, #28]
 8004608:	b1eb      	cbz	r3, 8004646 <_dtoa_r+0x76e>
 800460a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800460c:	2b00      	cmp	r3, #0
 800460e:	d067      	beq.n	80046e0 <_dtoa_r+0x808>
 8004610:	b18f      	cbz	r7, 8004636 <_dtoa_r+0x75e>
 8004612:	4631      	mov	r1, r6
 8004614:	463a      	mov	r2, r7
 8004616:	4620      	mov	r0, r4
 8004618:	f000 fc74 	bl	8004f04 <__pow5mult>
 800461c:	9a04      	ldr	r2, [sp, #16]
 800461e:	4601      	mov	r1, r0
 8004620:	4606      	mov	r6, r0
 8004622:	4620      	mov	r0, r4
 8004624:	f000 fbd8 	bl	8004dd8 <__multiply>
 8004628:	9904      	ldr	r1, [sp, #16]
 800462a:	9008      	str	r0, [sp, #32]
 800462c:	4620      	mov	r0, r4
 800462e:	f000 fb2a 	bl	8004c86 <_Bfree>
 8004632:	9b08      	ldr	r3, [sp, #32]
 8004634:	9304      	str	r3, [sp, #16]
 8004636:	9b07      	ldr	r3, [sp, #28]
 8004638:	1bda      	subs	r2, r3, r7
 800463a:	d004      	beq.n	8004646 <_dtoa_r+0x76e>
 800463c:	9904      	ldr	r1, [sp, #16]
 800463e:	4620      	mov	r0, r4
 8004640:	f000 fc60 	bl	8004f04 <__pow5mult>
 8004644:	9004      	str	r0, [sp, #16]
 8004646:	2101      	movs	r1, #1
 8004648:	4620      	mov	r0, r4
 800464a:	f000 fbbc 	bl	8004dc6 <__i2b>
 800464e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004650:	4607      	mov	r7, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 81d0 	beq.w	80049f8 <_dtoa_r+0xb20>
 8004658:	461a      	mov	r2, r3
 800465a:	4601      	mov	r1, r0
 800465c:	4620      	mov	r0, r4
 800465e:	f000 fc51 	bl	8004f04 <__pow5mult>
 8004662:	9b06      	ldr	r3, [sp, #24]
 8004664:	2b01      	cmp	r3, #1
 8004666:	4607      	mov	r7, r0
 8004668:	dc40      	bgt.n	80046ec <_dtoa_r+0x814>
 800466a:	9b00      	ldr	r3, [sp, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d139      	bne.n	80046e4 <_dtoa_r+0x80c>
 8004670:	9b01      	ldr	r3, [sp, #4]
 8004672:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004676:	2b00      	cmp	r3, #0
 8004678:	d136      	bne.n	80046e8 <_dtoa_r+0x810>
 800467a:	9b01      	ldr	r3, [sp, #4]
 800467c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004680:	0d1b      	lsrs	r3, r3, #20
 8004682:	051b      	lsls	r3, r3, #20
 8004684:	b12b      	cbz	r3, 8004692 <_dtoa_r+0x7ba>
 8004686:	9b05      	ldr	r3, [sp, #20]
 8004688:	3301      	adds	r3, #1
 800468a:	9305      	str	r3, [sp, #20]
 800468c:	f108 0801 	add.w	r8, r8, #1
 8004690:	2301      	movs	r3, #1
 8004692:	9307      	str	r3, [sp, #28]
 8004694:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004696:	2b00      	cmp	r3, #0
 8004698:	d12a      	bne.n	80046f0 <_dtoa_r+0x818>
 800469a:	2001      	movs	r0, #1
 800469c:	e030      	b.n	8004700 <_dtoa_r+0x828>
 800469e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80046a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80046a4:	e795      	b.n	80045d2 <_dtoa_r+0x6fa>
 80046a6:	9b07      	ldr	r3, [sp, #28]
 80046a8:	f109 37ff 	add.w	r7, r9, #4294967295
 80046ac:	42bb      	cmp	r3, r7
 80046ae:	bfbf      	itttt	lt
 80046b0:	9b07      	ldrlt	r3, [sp, #28]
 80046b2:	9707      	strlt	r7, [sp, #28]
 80046b4:	1afa      	sublt	r2, r7, r3
 80046b6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80046b8:	bfbb      	ittet	lt
 80046ba:	189b      	addlt	r3, r3, r2
 80046bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80046be:	1bdf      	subge	r7, r3, r7
 80046c0:	2700      	movlt	r7, #0
 80046c2:	f1b9 0f00 	cmp.w	r9, #0
 80046c6:	bfb5      	itete	lt
 80046c8:	9b05      	ldrlt	r3, [sp, #20]
 80046ca:	9d05      	ldrge	r5, [sp, #20]
 80046cc:	eba3 0509 	sublt.w	r5, r3, r9
 80046d0:	464b      	movge	r3, r9
 80046d2:	bfb8      	it	lt
 80046d4:	2300      	movlt	r3, #0
 80046d6:	e77e      	b.n	80045d6 <_dtoa_r+0x6fe>
 80046d8:	9f07      	ldr	r7, [sp, #28]
 80046da:	9d05      	ldr	r5, [sp, #20]
 80046dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80046de:	e783      	b.n	80045e8 <_dtoa_r+0x710>
 80046e0:	9a07      	ldr	r2, [sp, #28]
 80046e2:	e7ab      	b.n	800463c <_dtoa_r+0x764>
 80046e4:	2300      	movs	r3, #0
 80046e6:	e7d4      	b.n	8004692 <_dtoa_r+0x7ba>
 80046e8:	9b00      	ldr	r3, [sp, #0]
 80046ea:	e7d2      	b.n	8004692 <_dtoa_r+0x7ba>
 80046ec:	2300      	movs	r3, #0
 80046ee:	9307      	str	r3, [sp, #28]
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80046f6:	6918      	ldr	r0, [r3, #16]
 80046f8:	f000 fb17 	bl	8004d2a <__hi0bits>
 80046fc:	f1c0 0020 	rsb	r0, r0, #32
 8004700:	4440      	add	r0, r8
 8004702:	f010 001f 	ands.w	r0, r0, #31
 8004706:	d047      	beq.n	8004798 <_dtoa_r+0x8c0>
 8004708:	f1c0 0320 	rsb	r3, r0, #32
 800470c:	2b04      	cmp	r3, #4
 800470e:	dd3b      	ble.n	8004788 <_dtoa_r+0x8b0>
 8004710:	9b05      	ldr	r3, [sp, #20]
 8004712:	f1c0 001c 	rsb	r0, r0, #28
 8004716:	4403      	add	r3, r0
 8004718:	9305      	str	r3, [sp, #20]
 800471a:	4405      	add	r5, r0
 800471c:	4480      	add	r8, r0
 800471e:	9b05      	ldr	r3, [sp, #20]
 8004720:	2b00      	cmp	r3, #0
 8004722:	dd05      	ble.n	8004730 <_dtoa_r+0x858>
 8004724:	461a      	mov	r2, r3
 8004726:	9904      	ldr	r1, [sp, #16]
 8004728:	4620      	mov	r0, r4
 800472a:	f000 fc39 	bl	8004fa0 <__lshift>
 800472e:	9004      	str	r0, [sp, #16]
 8004730:	f1b8 0f00 	cmp.w	r8, #0
 8004734:	dd05      	ble.n	8004742 <_dtoa_r+0x86a>
 8004736:	4639      	mov	r1, r7
 8004738:	4642      	mov	r2, r8
 800473a:	4620      	mov	r0, r4
 800473c:	f000 fc30 	bl	8004fa0 <__lshift>
 8004740:	4607      	mov	r7, r0
 8004742:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004744:	b353      	cbz	r3, 800479c <_dtoa_r+0x8c4>
 8004746:	4639      	mov	r1, r7
 8004748:	9804      	ldr	r0, [sp, #16]
 800474a:	f000 fc7d 	bl	8005048 <__mcmp>
 800474e:	2800      	cmp	r0, #0
 8004750:	da24      	bge.n	800479c <_dtoa_r+0x8c4>
 8004752:	2300      	movs	r3, #0
 8004754:	220a      	movs	r2, #10
 8004756:	9904      	ldr	r1, [sp, #16]
 8004758:	4620      	mov	r0, r4
 800475a:	f000 faab 	bl	8004cb4 <__multadd>
 800475e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004760:	9004      	str	r0, [sp, #16]
 8004762:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 814d 	beq.w	8004a06 <_dtoa_r+0xb2e>
 800476c:	2300      	movs	r3, #0
 800476e:	4631      	mov	r1, r6
 8004770:	220a      	movs	r2, #10
 8004772:	4620      	mov	r0, r4
 8004774:	f000 fa9e 	bl	8004cb4 <__multadd>
 8004778:	9b02      	ldr	r3, [sp, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	4606      	mov	r6, r0
 800477e:	dc4f      	bgt.n	8004820 <_dtoa_r+0x948>
 8004780:	9b06      	ldr	r3, [sp, #24]
 8004782:	2b02      	cmp	r3, #2
 8004784:	dd4c      	ble.n	8004820 <_dtoa_r+0x948>
 8004786:	e011      	b.n	80047ac <_dtoa_r+0x8d4>
 8004788:	d0c9      	beq.n	800471e <_dtoa_r+0x846>
 800478a:	9a05      	ldr	r2, [sp, #20]
 800478c:	331c      	adds	r3, #28
 800478e:	441a      	add	r2, r3
 8004790:	9205      	str	r2, [sp, #20]
 8004792:	441d      	add	r5, r3
 8004794:	4498      	add	r8, r3
 8004796:	e7c2      	b.n	800471e <_dtoa_r+0x846>
 8004798:	4603      	mov	r3, r0
 800479a:	e7f6      	b.n	800478a <_dtoa_r+0x8b2>
 800479c:	f1b9 0f00 	cmp.w	r9, #0
 80047a0:	dc38      	bgt.n	8004814 <_dtoa_r+0x93c>
 80047a2:	9b06      	ldr	r3, [sp, #24]
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	dd35      	ble.n	8004814 <_dtoa_r+0x93c>
 80047a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80047ac:	9b02      	ldr	r3, [sp, #8]
 80047ae:	b963      	cbnz	r3, 80047ca <_dtoa_r+0x8f2>
 80047b0:	4639      	mov	r1, r7
 80047b2:	2205      	movs	r2, #5
 80047b4:	4620      	mov	r0, r4
 80047b6:	f000 fa7d 	bl	8004cb4 <__multadd>
 80047ba:	4601      	mov	r1, r0
 80047bc:	4607      	mov	r7, r0
 80047be:	9804      	ldr	r0, [sp, #16]
 80047c0:	f000 fc42 	bl	8005048 <__mcmp>
 80047c4:	2800      	cmp	r0, #0
 80047c6:	f73f adcc 	bgt.w	8004362 <_dtoa_r+0x48a>
 80047ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047cc:	465d      	mov	r5, fp
 80047ce:	ea6f 0a03 	mvn.w	sl, r3
 80047d2:	f04f 0900 	mov.w	r9, #0
 80047d6:	4639      	mov	r1, r7
 80047d8:	4620      	mov	r0, r4
 80047da:	f000 fa54 	bl	8004c86 <_Bfree>
 80047de:	2e00      	cmp	r6, #0
 80047e0:	f43f aeb7 	beq.w	8004552 <_dtoa_r+0x67a>
 80047e4:	f1b9 0f00 	cmp.w	r9, #0
 80047e8:	d005      	beq.n	80047f6 <_dtoa_r+0x91e>
 80047ea:	45b1      	cmp	r9, r6
 80047ec:	d003      	beq.n	80047f6 <_dtoa_r+0x91e>
 80047ee:	4649      	mov	r1, r9
 80047f0:	4620      	mov	r0, r4
 80047f2:	f000 fa48 	bl	8004c86 <_Bfree>
 80047f6:	4631      	mov	r1, r6
 80047f8:	4620      	mov	r0, r4
 80047fa:	f000 fa44 	bl	8004c86 <_Bfree>
 80047fe:	e6a8      	b.n	8004552 <_dtoa_r+0x67a>
 8004800:	2700      	movs	r7, #0
 8004802:	463e      	mov	r6, r7
 8004804:	e7e1      	b.n	80047ca <_dtoa_r+0x8f2>
 8004806:	f8dd a020 	ldr.w	sl, [sp, #32]
 800480a:	463e      	mov	r6, r7
 800480c:	e5a9      	b.n	8004362 <_dtoa_r+0x48a>
 800480e:	bf00      	nop
 8004810:	40240000 	.word	0x40240000
 8004814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004816:	f8cd 9008 	str.w	r9, [sp, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 80fa 	beq.w	8004a14 <_dtoa_r+0xb3c>
 8004820:	2d00      	cmp	r5, #0
 8004822:	dd05      	ble.n	8004830 <_dtoa_r+0x958>
 8004824:	4631      	mov	r1, r6
 8004826:	462a      	mov	r2, r5
 8004828:	4620      	mov	r0, r4
 800482a:	f000 fbb9 	bl	8004fa0 <__lshift>
 800482e:	4606      	mov	r6, r0
 8004830:	9b07      	ldr	r3, [sp, #28]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d04c      	beq.n	80048d0 <_dtoa_r+0x9f8>
 8004836:	6871      	ldr	r1, [r6, #4]
 8004838:	4620      	mov	r0, r4
 800483a:	f000 f9f0 	bl	8004c1e <_Balloc>
 800483e:	6932      	ldr	r2, [r6, #16]
 8004840:	3202      	adds	r2, #2
 8004842:	4605      	mov	r5, r0
 8004844:	0092      	lsls	r2, r2, #2
 8004846:	f106 010c 	add.w	r1, r6, #12
 800484a:	300c      	adds	r0, #12
 800484c:	f000 f9dc 	bl	8004c08 <memcpy>
 8004850:	2201      	movs	r2, #1
 8004852:	4629      	mov	r1, r5
 8004854:	4620      	mov	r0, r4
 8004856:	f000 fba3 	bl	8004fa0 <__lshift>
 800485a:	9b00      	ldr	r3, [sp, #0]
 800485c:	f8cd b014 	str.w	fp, [sp, #20]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	46b1      	mov	r9, r6
 8004866:	9307      	str	r3, [sp, #28]
 8004868:	4606      	mov	r6, r0
 800486a:	4639      	mov	r1, r7
 800486c:	9804      	ldr	r0, [sp, #16]
 800486e:	f7ff faa5 	bl	8003dbc <quorem>
 8004872:	4649      	mov	r1, r9
 8004874:	4605      	mov	r5, r0
 8004876:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800487a:	9804      	ldr	r0, [sp, #16]
 800487c:	f000 fbe4 	bl	8005048 <__mcmp>
 8004880:	4632      	mov	r2, r6
 8004882:	9000      	str	r0, [sp, #0]
 8004884:	4639      	mov	r1, r7
 8004886:	4620      	mov	r0, r4
 8004888:	f000 fbf8 	bl	800507c <__mdiff>
 800488c:	68c3      	ldr	r3, [r0, #12]
 800488e:	4602      	mov	r2, r0
 8004890:	bb03      	cbnz	r3, 80048d4 <_dtoa_r+0x9fc>
 8004892:	4601      	mov	r1, r0
 8004894:	9008      	str	r0, [sp, #32]
 8004896:	9804      	ldr	r0, [sp, #16]
 8004898:	f000 fbd6 	bl	8005048 <__mcmp>
 800489c:	9a08      	ldr	r2, [sp, #32]
 800489e:	4603      	mov	r3, r0
 80048a0:	4611      	mov	r1, r2
 80048a2:	4620      	mov	r0, r4
 80048a4:	9308      	str	r3, [sp, #32]
 80048a6:	f000 f9ee 	bl	8004c86 <_Bfree>
 80048aa:	9b08      	ldr	r3, [sp, #32]
 80048ac:	b9a3      	cbnz	r3, 80048d8 <_dtoa_r+0xa00>
 80048ae:	9a06      	ldr	r2, [sp, #24]
 80048b0:	b992      	cbnz	r2, 80048d8 <_dtoa_r+0xa00>
 80048b2:	9a07      	ldr	r2, [sp, #28]
 80048b4:	b982      	cbnz	r2, 80048d8 <_dtoa_r+0xa00>
 80048b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80048ba:	d029      	beq.n	8004910 <_dtoa_r+0xa38>
 80048bc:	9b00      	ldr	r3, [sp, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	dd01      	ble.n	80048c6 <_dtoa_r+0x9ee>
 80048c2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80048c6:	9b05      	ldr	r3, [sp, #20]
 80048c8:	1c5d      	adds	r5, r3, #1
 80048ca:	f883 8000 	strb.w	r8, [r3]
 80048ce:	e782      	b.n	80047d6 <_dtoa_r+0x8fe>
 80048d0:	4630      	mov	r0, r6
 80048d2:	e7c2      	b.n	800485a <_dtoa_r+0x982>
 80048d4:	2301      	movs	r3, #1
 80048d6:	e7e3      	b.n	80048a0 <_dtoa_r+0x9c8>
 80048d8:	9a00      	ldr	r2, [sp, #0]
 80048da:	2a00      	cmp	r2, #0
 80048dc:	db04      	blt.n	80048e8 <_dtoa_r+0xa10>
 80048de:	d125      	bne.n	800492c <_dtoa_r+0xa54>
 80048e0:	9a06      	ldr	r2, [sp, #24]
 80048e2:	bb1a      	cbnz	r2, 800492c <_dtoa_r+0xa54>
 80048e4:	9a07      	ldr	r2, [sp, #28]
 80048e6:	bb0a      	cbnz	r2, 800492c <_dtoa_r+0xa54>
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	ddec      	ble.n	80048c6 <_dtoa_r+0x9ee>
 80048ec:	2201      	movs	r2, #1
 80048ee:	9904      	ldr	r1, [sp, #16]
 80048f0:	4620      	mov	r0, r4
 80048f2:	f000 fb55 	bl	8004fa0 <__lshift>
 80048f6:	4639      	mov	r1, r7
 80048f8:	9004      	str	r0, [sp, #16]
 80048fa:	f000 fba5 	bl	8005048 <__mcmp>
 80048fe:	2800      	cmp	r0, #0
 8004900:	dc03      	bgt.n	800490a <_dtoa_r+0xa32>
 8004902:	d1e0      	bne.n	80048c6 <_dtoa_r+0x9ee>
 8004904:	f018 0f01 	tst.w	r8, #1
 8004908:	d0dd      	beq.n	80048c6 <_dtoa_r+0x9ee>
 800490a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800490e:	d1d8      	bne.n	80048c2 <_dtoa_r+0x9ea>
 8004910:	9b05      	ldr	r3, [sp, #20]
 8004912:	9a05      	ldr	r2, [sp, #20]
 8004914:	1c5d      	adds	r5, r3, #1
 8004916:	2339      	movs	r3, #57	; 0x39
 8004918:	7013      	strb	r3, [r2, #0]
 800491a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800491e:	2b39      	cmp	r3, #57	; 0x39
 8004920:	f105 32ff 	add.w	r2, r5, #4294967295
 8004924:	d04f      	beq.n	80049c6 <_dtoa_r+0xaee>
 8004926:	3301      	adds	r3, #1
 8004928:	7013      	strb	r3, [r2, #0]
 800492a:	e754      	b.n	80047d6 <_dtoa_r+0x8fe>
 800492c:	9a05      	ldr	r2, [sp, #20]
 800492e:	2b00      	cmp	r3, #0
 8004930:	f102 0501 	add.w	r5, r2, #1
 8004934:	dd06      	ble.n	8004944 <_dtoa_r+0xa6c>
 8004936:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800493a:	d0e9      	beq.n	8004910 <_dtoa_r+0xa38>
 800493c:	f108 0801 	add.w	r8, r8, #1
 8004940:	9b05      	ldr	r3, [sp, #20]
 8004942:	e7c2      	b.n	80048ca <_dtoa_r+0x9f2>
 8004944:	9a02      	ldr	r2, [sp, #8]
 8004946:	f805 8c01 	strb.w	r8, [r5, #-1]
 800494a:	eba5 030b 	sub.w	r3, r5, fp
 800494e:	4293      	cmp	r3, r2
 8004950:	d021      	beq.n	8004996 <_dtoa_r+0xabe>
 8004952:	2300      	movs	r3, #0
 8004954:	220a      	movs	r2, #10
 8004956:	9904      	ldr	r1, [sp, #16]
 8004958:	4620      	mov	r0, r4
 800495a:	f000 f9ab 	bl	8004cb4 <__multadd>
 800495e:	45b1      	cmp	r9, r6
 8004960:	9004      	str	r0, [sp, #16]
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	f04f 020a 	mov.w	r2, #10
 800496a:	4649      	mov	r1, r9
 800496c:	4620      	mov	r0, r4
 800496e:	d105      	bne.n	800497c <_dtoa_r+0xaa4>
 8004970:	f000 f9a0 	bl	8004cb4 <__multadd>
 8004974:	4681      	mov	r9, r0
 8004976:	4606      	mov	r6, r0
 8004978:	9505      	str	r5, [sp, #20]
 800497a:	e776      	b.n	800486a <_dtoa_r+0x992>
 800497c:	f000 f99a 	bl	8004cb4 <__multadd>
 8004980:	4631      	mov	r1, r6
 8004982:	4681      	mov	r9, r0
 8004984:	2300      	movs	r3, #0
 8004986:	220a      	movs	r2, #10
 8004988:	4620      	mov	r0, r4
 800498a:	f000 f993 	bl	8004cb4 <__multadd>
 800498e:	4606      	mov	r6, r0
 8004990:	e7f2      	b.n	8004978 <_dtoa_r+0xaa0>
 8004992:	f04f 0900 	mov.w	r9, #0
 8004996:	2201      	movs	r2, #1
 8004998:	9904      	ldr	r1, [sp, #16]
 800499a:	4620      	mov	r0, r4
 800499c:	f000 fb00 	bl	8004fa0 <__lshift>
 80049a0:	4639      	mov	r1, r7
 80049a2:	9004      	str	r0, [sp, #16]
 80049a4:	f000 fb50 	bl	8005048 <__mcmp>
 80049a8:	2800      	cmp	r0, #0
 80049aa:	dcb6      	bgt.n	800491a <_dtoa_r+0xa42>
 80049ac:	d102      	bne.n	80049b4 <_dtoa_r+0xadc>
 80049ae:	f018 0f01 	tst.w	r8, #1
 80049b2:	d1b2      	bne.n	800491a <_dtoa_r+0xa42>
 80049b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80049b8:	2b30      	cmp	r3, #48	; 0x30
 80049ba:	f105 32ff 	add.w	r2, r5, #4294967295
 80049be:	f47f af0a 	bne.w	80047d6 <_dtoa_r+0x8fe>
 80049c2:	4615      	mov	r5, r2
 80049c4:	e7f6      	b.n	80049b4 <_dtoa_r+0xadc>
 80049c6:	4593      	cmp	fp, r2
 80049c8:	d105      	bne.n	80049d6 <_dtoa_r+0xafe>
 80049ca:	2331      	movs	r3, #49	; 0x31
 80049cc:	f10a 0a01 	add.w	sl, sl, #1
 80049d0:	f88b 3000 	strb.w	r3, [fp]
 80049d4:	e6ff      	b.n	80047d6 <_dtoa_r+0x8fe>
 80049d6:	4615      	mov	r5, r2
 80049d8:	e79f      	b.n	800491a <_dtoa_r+0xa42>
 80049da:	f8df b064 	ldr.w	fp, [pc, #100]	; 8004a40 <_dtoa_r+0xb68>
 80049de:	e007      	b.n	80049f0 <_dtoa_r+0xb18>
 80049e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049e2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8004a44 <_dtoa_r+0xb6c>
 80049e6:	b11b      	cbz	r3, 80049f0 <_dtoa_r+0xb18>
 80049e8:	f10b 0308 	add.w	r3, fp, #8
 80049ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80049ee:	6013      	str	r3, [r2, #0]
 80049f0:	4658      	mov	r0, fp
 80049f2:	b017      	add	sp, #92	; 0x5c
 80049f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049f8:	9b06      	ldr	r3, [sp, #24]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	f77f ae35 	ble.w	800466a <_dtoa_r+0x792>
 8004a00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a02:	9307      	str	r3, [sp, #28]
 8004a04:	e649      	b.n	800469a <_dtoa_r+0x7c2>
 8004a06:	9b02      	ldr	r3, [sp, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	dc03      	bgt.n	8004a14 <_dtoa_r+0xb3c>
 8004a0c:	9b06      	ldr	r3, [sp, #24]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	f73f aecc 	bgt.w	80047ac <_dtoa_r+0x8d4>
 8004a14:	465d      	mov	r5, fp
 8004a16:	4639      	mov	r1, r7
 8004a18:	9804      	ldr	r0, [sp, #16]
 8004a1a:	f7ff f9cf 	bl	8003dbc <quorem>
 8004a1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004a22:	f805 8b01 	strb.w	r8, [r5], #1
 8004a26:	9a02      	ldr	r2, [sp, #8]
 8004a28:	eba5 030b 	sub.w	r3, r5, fp
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	ddb0      	ble.n	8004992 <_dtoa_r+0xaba>
 8004a30:	2300      	movs	r3, #0
 8004a32:	220a      	movs	r2, #10
 8004a34:	9904      	ldr	r1, [sp, #16]
 8004a36:	4620      	mov	r0, r4
 8004a38:	f000 f93c 	bl	8004cb4 <__multadd>
 8004a3c:	9004      	str	r0, [sp, #16]
 8004a3e:	e7ea      	b.n	8004a16 <_dtoa_r+0xb3e>
 8004a40:	08005b7c 	.word	0x08005b7c
 8004a44:	08005ba0 	.word	0x08005ba0

08004a48 <std>:
 8004a48:	2300      	movs	r3, #0
 8004a4a:	b510      	push	{r4, lr}
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	e9c0 3300 	strd	r3, r3, [r0]
 8004a52:	6083      	str	r3, [r0, #8]
 8004a54:	8181      	strh	r1, [r0, #12]
 8004a56:	6643      	str	r3, [r0, #100]	; 0x64
 8004a58:	81c2      	strh	r2, [r0, #14]
 8004a5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a5e:	6183      	str	r3, [r0, #24]
 8004a60:	4619      	mov	r1, r3
 8004a62:	2208      	movs	r2, #8
 8004a64:	305c      	adds	r0, #92	; 0x5c
 8004a66:	f7fe fd2d 	bl	80034c4 <memset>
 8004a6a:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <std+0x38>)
 8004a6c:	6263      	str	r3, [r4, #36]	; 0x24
 8004a6e:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <std+0x3c>)
 8004a70:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a72:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <std+0x40>)
 8004a74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a76:	4b05      	ldr	r3, [pc, #20]	; (8004a8c <std+0x44>)
 8004a78:	6224      	str	r4, [r4, #32]
 8004a7a:	6323      	str	r3, [r4, #48]	; 0x30
 8004a7c:	bd10      	pop	{r4, pc}
 8004a7e:	bf00      	nop
 8004a80:	080055e1 	.word	0x080055e1
 8004a84:	08005603 	.word	0x08005603
 8004a88:	0800563b 	.word	0x0800563b
 8004a8c:	0800565f 	.word	0x0800565f

08004a90 <_cleanup_r>:
 8004a90:	4901      	ldr	r1, [pc, #4]	; (8004a98 <_cleanup_r+0x8>)
 8004a92:	f000 b885 	b.w	8004ba0 <_fwalk_reent>
 8004a96:	bf00      	nop
 8004a98:	08005939 	.word	0x08005939

08004a9c <__sfmoreglue>:
 8004a9c:	b570      	push	{r4, r5, r6, lr}
 8004a9e:	1e4a      	subs	r2, r1, #1
 8004aa0:	2568      	movs	r5, #104	; 0x68
 8004aa2:	4355      	muls	r5, r2
 8004aa4:	460e      	mov	r6, r1
 8004aa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004aaa:	f000 fbef 	bl	800528c <_malloc_r>
 8004aae:	4604      	mov	r4, r0
 8004ab0:	b140      	cbz	r0, 8004ac4 <__sfmoreglue+0x28>
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	e9c0 1600 	strd	r1, r6, [r0]
 8004ab8:	300c      	adds	r0, #12
 8004aba:	60a0      	str	r0, [r4, #8]
 8004abc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ac0:	f7fe fd00 	bl	80034c4 <memset>
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	bd70      	pop	{r4, r5, r6, pc}

08004ac8 <__sinit>:
 8004ac8:	6983      	ldr	r3, [r0, #24]
 8004aca:	b510      	push	{r4, lr}
 8004acc:	4604      	mov	r4, r0
 8004ace:	bb33      	cbnz	r3, 8004b1e <__sinit+0x56>
 8004ad0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004ad4:	6503      	str	r3, [r0, #80]	; 0x50
 8004ad6:	4b12      	ldr	r3, [pc, #72]	; (8004b20 <__sinit+0x58>)
 8004ad8:	4a12      	ldr	r2, [pc, #72]	; (8004b24 <__sinit+0x5c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6282      	str	r2, [r0, #40]	; 0x28
 8004ade:	4298      	cmp	r0, r3
 8004ae0:	bf04      	itt	eq
 8004ae2:	2301      	moveq	r3, #1
 8004ae4:	6183      	streq	r3, [r0, #24]
 8004ae6:	f000 f81f 	bl	8004b28 <__sfp>
 8004aea:	6060      	str	r0, [r4, #4]
 8004aec:	4620      	mov	r0, r4
 8004aee:	f000 f81b 	bl	8004b28 <__sfp>
 8004af2:	60a0      	str	r0, [r4, #8]
 8004af4:	4620      	mov	r0, r4
 8004af6:	f000 f817 	bl	8004b28 <__sfp>
 8004afa:	2200      	movs	r2, #0
 8004afc:	60e0      	str	r0, [r4, #12]
 8004afe:	2104      	movs	r1, #4
 8004b00:	6860      	ldr	r0, [r4, #4]
 8004b02:	f7ff ffa1 	bl	8004a48 <std>
 8004b06:	2201      	movs	r2, #1
 8004b08:	2109      	movs	r1, #9
 8004b0a:	68a0      	ldr	r0, [r4, #8]
 8004b0c:	f7ff ff9c 	bl	8004a48 <std>
 8004b10:	2202      	movs	r2, #2
 8004b12:	2112      	movs	r1, #18
 8004b14:	68e0      	ldr	r0, [r4, #12]
 8004b16:	f7ff ff97 	bl	8004a48 <std>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	61a3      	str	r3, [r4, #24]
 8004b1e:	bd10      	pop	{r4, pc}
 8004b20:	08005b68 	.word	0x08005b68
 8004b24:	08004a91 	.word	0x08004a91

08004b28 <__sfp>:
 8004b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2a:	4b1b      	ldr	r3, [pc, #108]	; (8004b98 <__sfp+0x70>)
 8004b2c:	681e      	ldr	r6, [r3, #0]
 8004b2e:	69b3      	ldr	r3, [r6, #24]
 8004b30:	4607      	mov	r7, r0
 8004b32:	b913      	cbnz	r3, 8004b3a <__sfp+0x12>
 8004b34:	4630      	mov	r0, r6
 8004b36:	f7ff ffc7 	bl	8004ac8 <__sinit>
 8004b3a:	3648      	adds	r6, #72	; 0x48
 8004b3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	d503      	bpl.n	8004b4c <__sfp+0x24>
 8004b44:	6833      	ldr	r3, [r6, #0]
 8004b46:	b133      	cbz	r3, 8004b56 <__sfp+0x2e>
 8004b48:	6836      	ldr	r6, [r6, #0]
 8004b4a:	e7f7      	b.n	8004b3c <__sfp+0x14>
 8004b4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b50:	b16d      	cbz	r5, 8004b6e <__sfp+0x46>
 8004b52:	3468      	adds	r4, #104	; 0x68
 8004b54:	e7f4      	b.n	8004b40 <__sfp+0x18>
 8004b56:	2104      	movs	r1, #4
 8004b58:	4638      	mov	r0, r7
 8004b5a:	f7ff ff9f 	bl	8004a9c <__sfmoreglue>
 8004b5e:	6030      	str	r0, [r6, #0]
 8004b60:	2800      	cmp	r0, #0
 8004b62:	d1f1      	bne.n	8004b48 <__sfp+0x20>
 8004b64:	230c      	movs	r3, #12
 8004b66:	603b      	str	r3, [r7, #0]
 8004b68:	4604      	mov	r4, r0
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b6e:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <__sfp+0x74>)
 8004b70:	6665      	str	r5, [r4, #100]	; 0x64
 8004b72:	e9c4 5500 	strd	r5, r5, [r4]
 8004b76:	60a5      	str	r5, [r4, #8]
 8004b78:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004b7c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004b80:	2208      	movs	r2, #8
 8004b82:	4629      	mov	r1, r5
 8004b84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b88:	f7fe fc9c 	bl	80034c4 <memset>
 8004b8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b94:	e7e9      	b.n	8004b6a <__sfp+0x42>
 8004b96:	bf00      	nop
 8004b98:	08005b68 	.word	0x08005b68
 8004b9c:	ffff0001 	.word	0xffff0001

08004ba0 <_fwalk_reent>:
 8004ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ba4:	4680      	mov	r8, r0
 8004ba6:	4689      	mov	r9, r1
 8004ba8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bac:	2600      	movs	r6, #0
 8004bae:	b914      	cbnz	r4, 8004bb6 <_fwalk_reent+0x16>
 8004bb0:	4630      	mov	r0, r6
 8004bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bb6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004bba:	3f01      	subs	r7, #1
 8004bbc:	d501      	bpl.n	8004bc2 <_fwalk_reent+0x22>
 8004bbe:	6824      	ldr	r4, [r4, #0]
 8004bc0:	e7f5      	b.n	8004bae <_fwalk_reent+0xe>
 8004bc2:	89ab      	ldrh	r3, [r5, #12]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d907      	bls.n	8004bd8 <_fwalk_reent+0x38>
 8004bc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	d003      	beq.n	8004bd8 <_fwalk_reent+0x38>
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	4640      	mov	r0, r8
 8004bd4:	47c8      	blx	r9
 8004bd6:	4306      	orrs	r6, r0
 8004bd8:	3568      	adds	r5, #104	; 0x68
 8004bda:	e7ee      	b.n	8004bba <_fwalk_reent+0x1a>

08004bdc <_localeconv_r>:
 8004bdc:	4b04      	ldr	r3, [pc, #16]	; (8004bf0 <_localeconv_r+0x14>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6a18      	ldr	r0, [r3, #32]
 8004be2:	4b04      	ldr	r3, [pc, #16]	; (8004bf4 <_localeconv_r+0x18>)
 8004be4:	2800      	cmp	r0, #0
 8004be6:	bf08      	it	eq
 8004be8:	4618      	moveq	r0, r3
 8004bea:	30f0      	adds	r0, #240	; 0xf0
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	2000000c 	.word	0x2000000c
 8004bf4:	20000070 	.word	0x20000070

08004bf8 <malloc>:
 8004bf8:	4b02      	ldr	r3, [pc, #8]	; (8004c04 <malloc+0xc>)
 8004bfa:	4601      	mov	r1, r0
 8004bfc:	6818      	ldr	r0, [r3, #0]
 8004bfe:	f000 bb45 	b.w	800528c <_malloc_r>
 8004c02:	bf00      	nop
 8004c04:	2000000c 	.word	0x2000000c

08004c08 <memcpy>:
 8004c08:	b510      	push	{r4, lr}
 8004c0a:	1e43      	subs	r3, r0, #1
 8004c0c:	440a      	add	r2, r1
 8004c0e:	4291      	cmp	r1, r2
 8004c10:	d100      	bne.n	8004c14 <memcpy+0xc>
 8004c12:	bd10      	pop	{r4, pc}
 8004c14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c1c:	e7f7      	b.n	8004c0e <memcpy+0x6>

08004c1e <_Balloc>:
 8004c1e:	b570      	push	{r4, r5, r6, lr}
 8004c20:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c22:	4604      	mov	r4, r0
 8004c24:	460e      	mov	r6, r1
 8004c26:	b93d      	cbnz	r5, 8004c38 <_Balloc+0x1a>
 8004c28:	2010      	movs	r0, #16
 8004c2a:	f7ff ffe5 	bl	8004bf8 <malloc>
 8004c2e:	6260      	str	r0, [r4, #36]	; 0x24
 8004c30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004c34:	6005      	str	r5, [r0, #0]
 8004c36:	60c5      	str	r5, [r0, #12]
 8004c38:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004c3a:	68eb      	ldr	r3, [r5, #12]
 8004c3c:	b183      	cbz	r3, 8004c60 <_Balloc+0x42>
 8004c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004c46:	b9b8      	cbnz	r0, 8004c78 <_Balloc+0x5a>
 8004c48:	2101      	movs	r1, #1
 8004c4a:	fa01 f506 	lsl.w	r5, r1, r6
 8004c4e:	1d6a      	adds	r2, r5, #5
 8004c50:	0092      	lsls	r2, r2, #2
 8004c52:	4620      	mov	r0, r4
 8004c54:	f000 fabe 	bl	80051d4 <_calloc_r>
 8004c58:	b160      	cbz	r0, 8004c74 <_Balloc+0x56>
 8004c5a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8004c5e:	e00e      	b.n	8004c7e <_Balloc+0x60>
 8004c60:	2221      	movs	r2, #33	; 0x21
 8004c62:	2104      	movs	r1, #4
 8004c64:	4620      	mov	r0, r4
 8004c66:	f000 fab5 	bl	80051d4 <_calloc_r>
 8004c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c6c:	60e8      	str	r0, [r5, #12]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1e4      	bne.n	8004c3e <_Balloc+0x20>
 8004c74:	2000      	movs	r0, #0
 8004c76:	bd70      	pop	{r4, r5, r6, pc}
 8004c78:	6802      	ldr	r2, [r0, #0]
 8004c7a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004c7e:	2300      	movs	r3, #0
 8004c80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004c84:	e7f7      	b.n	8004c76 <_Balloc+0x58>

08004c86 <_Bfree>:
 8004c86:	b570      	push	{r4, r5, r6, lr}
 8004c88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004c8a:	4606      	mov	r6, r0
 8004c8c:	460d      	mov	r5, r1
 8004c8e:	b93c      	cbnz	r4, 8004ca0 <_Bfree+0x1a>
 8004c90:	2010      	movs	r0, #16
 8004c92:	f7ff ffb1 	bl	8004bf8 <malloc>
 8004c96:	6270      	str	r0, [r6, #36]	; 0x24
 8004c98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004c9c:	6004      	str	r4, [r0, #0]
 8004c9e:	60c4      	str	r4, [r0, #12]
 8004ca0:	b13d      	cbz	r5, 8004cb2 <_Bfree+0x2c>
 8004ca2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004ca4:	686a      	ldr	r2, [r5, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004cac:	6029      	str	r1, [r5, #0]
 8004cae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004cb2:	bd70      	pop	{r4, r5, r6, pc}

08004cb4 <__multadd>:
 8004cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cb8:	690d      	ldr	r5, [r1, #16]
 8004cba:	461f      	mov	r7, r3
 8004cbc:	4606      	mov	r6, r0
 8004cbe:	460c      	mov	r4, r1
 8004cc0:	f101 0c14 	add.w	ip, r1, #20
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f8dc 0000 	ldr.w	r0, [ip]
 8004cca:	b281      	uxth	r1, r0
 8004ccc:	fb02 7101 	mla	r1, r2, r1, r7
 8004cd0:	0c0f      	lsrs	r7, r1, #16
 8004cd2:	0c00      	lsrs	r0, r0, #16
 8004cd4:	fb02 7000 	mla	r0, r2, r0, r7
 8004cd8:	b289      	uxth	r1, r1
 8004cda:	3301      	adds	r3, #1
 8004cdc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004ce0:	429d      	cmp	r5, r3
 8004ce2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004ce6:	f84c 1b04 	str.w	r1, [ip], #4
 8004cea:	dcec      	bgt.n	8004cc6 <__multadd+0x12>
 8004cec:	b1d7      	cbz	r7, 8004d24 <__multadd+0x70>
 8004cee:	68a3      	ldr	r3, [r4, #8]
 8004cf0:	42ab      	cmp	r3, r5
 8004cf2:	dc12      	bgt.n	8004d1a <__multadd+0x66>
 8004cf4:	6861      	ldr	r1, [r4, #4]
 8004cf6:	4630      	mov	r0, r6
 8004cf8:	3101      	adds	r1, #1
 8004cfa:	f7ff ff90 	bl	8004c1e <_Balloc>
 8004cfe:	6922      	ldr	r2, [r4, #16]
 8004d00:	3202      	adds	r2, #2
 8004d02:	f104 010c 	add.w	r1, r4, #12
 8004d06:	4680      	mov	r8, r0
 8004d08:	0092      	lsls	r2, r2, #2
 8004d0a:	300c      	adds	r0, #12
 8004d0c:	f7ff ff7c 	bl	8004c08 <memcpy>
 8004d10:	4621      	mov	r1, r4
 8004d12:	4630      	mov	r0, r6
 8004d14:	f7ff ffb7 	bl	8004c86 <_Bfree>
 8004d18:	4644      	mov	r4, r8
 8004d1a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004d1e:	3501      	adds	r5, #1
 8004d20:	615f      	str	r7, [r3, #20]
 8004d22:	6125      	str	r5, [r4, #16]
 8004d24:	4620      	mov	r0, r4
 8004d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004d2a <__hi0bits>:
 8004d2a:	0c02      	lsrs	r2, r0, #16
 8004d2c:	0412      	lsls	r2, r2, #16
 8004d2e:	4603      	mov	r3, r0
 8004d30:	b9b2      	cbnz	r2, 8004d60 <__hi0bits+0x36>
 8004d32:	0403      	lsls	r3, r0, #16
 8004d34:	2010      	movs	r0, #16
 8004d36:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004d3a:	bf04      	itt	eq
 8004d3c:	021b      	lsleq	r3, r3, #8
 8004d3e:	3008      	addeq	r0, #8
 8004d40:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004d44:	bf04      	itt	eq
 8004d46:	011b      	lsleq	r3, r3, #4
 8004d48:	3004      	addeq	r0, #4
 8004d4a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004d4e:	bf04      	itt	eq
 8004d50:	009b      	lsleq	r3, r3, #2
 8004d52:	3002      	addeq	r0, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	db06      	blt.n	8004d66 <__hi0bits+0x3c>
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	d503      	bpl.n	8004d64 <__hi0bits+0x3a>
 8004d5c:	3001      	adds	r0, #1
 8004d5e:	4770      	bx	lr
 8004d60:	2000      	movs	r0, #0
 8004d62:	e7e8      	b.n	8004d36 <__hi0bits+0xc>
 8004d64:	2020      	movs	r0, #32
 8004d66:	4770      	bx	lr

08004d68 <__lo0bits>:
 8004d68:	6803      	ldr	r3, [r0, #0]
 8004d6a:	f013 0207 	ands.w	r2, r3, #7
 8004d6e:	4601      	mov	r1, r0
 8004d70:	d00b      	beq.n	8004d8a <__lo0bits+0x22>
 8004d72:	07da      	lsls	r2, r3, #31
 8004d74:	d423      	bmi.n	8004dbe <__lo0bits+0x56>
 8004d76:	0798      	lsls	r0, r3, #30
 8004d78:	bf49      	itett	mi
 8004d7a:	085b      	lsrmi	r3, r3, #1
 8004d7c:	089b      	lsrpl	r3, r3, #2
 8004d7e:	2001      	movmi	r0, #1
 8004d80:	600b      	strmi	r3, [r1, #0]
 8004d82:	bf5c      	itt	pl
 8004d84:	600b      	strpl	r3, [r1, #0]
 8004d86:	2002      	movpl	r0, #2
 8004d88:	4770      	bx	lr
 8004d8a:	b298      	uxth	r0, r3
 8004d8c:	b9a8      	cbnz	r0, 8004dba <__lo0bits+0x52>
 8004d8e:	0c1b      	lsrs	r3, r3, #16
 8004d90:	2010      	movs	r0, #16
 8004d92:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004d96:	bf04      	itt	eq
 8004d98:	0a1b      	lsreq	r3, r3, #8
 8004d9a:	3008      	addeq	r0, #8
 8004d9c:	071a      	lsls	r2, r3, #28
 8004d9e:	bf04      	itt	eq
 8004da0:	091b      	lsreq	r3, r3, #4
 8004da2:	3004      	addeq	r0, #4
 8004da4:	079a      	lsls	r2, r3, #30
 8004da6:	bf04      	itt	eq
 8004da8:	089b      	lsreq	r3, r3, #2
 8004daa:	3002      	addeq	r0, #2
 8004dac:	07da      	lsls	r2, r3, #31
 8004dae:	d402      	bmi.n	8004db6 <__lo0bits+0x4e>
 8004db0:	085b      	lsrs	r3, r3, #1
 8004db2:	d006      	beq.n	8004dc2 <__lo0bits+0x5a>
 8004db4:	3001      	adds	r0, #1
 8004db6:	600b      	str	r3, [r1, #0]
 8004db8:	4770      	bx	lr
 8004dba:	4610      	mov	r0, r2
 8004dbc:	e7e9      	b.n	8004d92 <__lo0bits+0x2a>
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	4770      	bx	lr
 8004dc2:	2020      	movs	r0, #32
 8004dc4:	4770      	bx	lr

08004dc6 <__i2b>:
 8004dc6:	b510      	push	{r4, lr}
 8004dc8:	460c      	mov	r4, r1
 8004dca:	2101      	movs	r1, #1
 8004dcc:	f7ff ff27 	bl	8004c1e <_Balloc>
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	6144      	str	r4, [r0, #20]
 8004dd4:	6102      	str	r2, [r0, #16]
 8004dd6:	bd10      	pop	{r4, pc}

08004dd8 <__multiply>:
 8004dd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ddc:	4614      	mov	r4, r2
 8004dde:	690a      	ldr	r2, [r1, #16]
 8004de0:	6923      	ldr	r3, [r4, #16]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	bfb8      	it	lt
 8004de6:	460b      	movlt	r3, r1
 8004de8:	4688      	mov	r8, r1
 8004dea:	bfbc      	itt	lt
 8004dec:	46a0      	movlt	r8, r4
 8004dee:	461c      	movlt	r4, r3
 8004df0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004df4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004df8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004dfc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004e00:	eb07 0609 	add.w	r6, r7, r9
 8004e04:	42b3      	cmp	r3, r6
 8004e06:	bfb8      	it	lt
 8004e08:	3101      	addlt	r1, #1
 8004e0a:	f7ff ff08 	bl	8004c1e <_Balloc>
 8004e0e:	f100 0514 	add.w	r5, r0, #20
 8004e12:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004e16:	462b      	mov	r3, r5
 8004e18:	2200      	movs	r2, #0
 8004e1a:	4573      	cmp	r3, lr
 8004e1c:	d316      	bcc.n	8004e4c <__multiply+0x74>
 8004e1e:	f104 0214 	add.w	r2, r4, #20
 8004e22:	f108 0114 	add.w	r1, r8, #20
 8004e26:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004e2a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	9b00      	ldr	r3, [sp, #0]
 8004e32:	9201      	str	r2, [sp, #4]
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d80c      	bhi.n	8004e52 <__multiply+0x7a>
 8004e38:	2e00      	cmp	r6, #0
 8004e3a:	dd03      	ble.n	8004e44 <__multiply+0x6c>
 8004e3c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d05d      	beq.n	8004f00 <__multiply+0x128>
 8004e44:	6106      	str	r6, [r0, #16]
 8004e46:	b003      	add	sp, #12
 8004e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e4c:	f843 2b04 	str.w	r2, [r3], #4
 8004e50:	e7e3      	b.n	8004e1a <__multiply+0x42>
 8004e52:	f8b2 b000 	ldrh.w	fp, [r2]
 8004e56:	f1bb 0f00 	cmp.w	fp, #0
 8004e5a:	d023      	beq.n	8004ea4 <__multiply+0xcc>
 8004e5c:	4689      	mov	r9, r1
 8004e5e:	46ac      	mov	ip, r5
 8004e60:	f04f 0800 	mov.w	r8, #0
 8004e64:	f859 4b04 	ldr.w	r4, [r9], #4
 8004e68:	f8dc a000 	ldr.w	sl, [ip]
 8004e6c:	b2a3      	uxth	r3, r4
 8004e6e:	fa1f fa8a 	uxth.w	sl, sl
 8004e72:	fb0b a303 	mla	r3, fp, r3, sl
 8004e76:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004e7a:	f8dc 4000 	ldr.w	r4, [ip]
 8004e7e:	4443      	add	r3, r8
 8004e80:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004e84:	fb0b 840a 	mla	r4, fp, sl, r8
 8004e88:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004e8c:	46e2      	mov	sl, ip
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004e94:	454f      	cmp	r7, r9
 8004e96:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004e9a:	f84a 3b04 	str.w	r3, [sl], #4
 8004e9e:	d82b      	bhi.n	8004ef8 <__multiply+0x120>
 8004ea0:	f8cc 8004 	str.w	r8, [ip, #4]
 8004ea4:	9b01      	ldr	r3, [sp, #4]
 8004ea6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004eaa:	3204      	adds	r2, #4
 8004eac:	f1ba 0f00 	cmp.w	sl, #0
 8004eb0:	d020      	beq.n	8004ef4 <__multiply+0x11c>
 8004eb2:	682b      	ldr	r3, [r5, #0]
 8004eb4:	4689      	mov	r9, r1
 8004eb6:	46a8      	mov	r8, r5
 8004eb8:	f04f 0b00 	mov.w	fp, #0
 8004ebc:	f8b9 c000 	ldrh.w	ip, [r9]
 8004ec0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8004ec4:	fb0a 440c 	mla	r4, sl, ip, r4
 8004ec8:	445c      	add	r4, fp
 8004eca:	46c4      	mov	ip, r8
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004ed2:	f84c 3b04 	str.w	r3, [ip], #4
 8004ed6:	f859 3b04 	ldr.w	r3, [r9], #4
 8004eda:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8004ede:	0c1b      	lsrs	r3, r3, #16
 8004ee0:	fb0a b303 	mla	r3, sl, r3, fp
 8004ee4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004ee8:	454f      	cmp	r7, r9
 8004eea:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8004eee:	d805      	bhi.n	8004efc <__multiply+0x124>
 8004ef0:	f8c8 3004 	str.w	r3, [r8, #4]
 8004ef4:	3504      	adds	r5, #4
 8004ef6:	e79b      	b.n	8004e30 <__multiply+0x58>
 8004ef8:	46d4      	mov	ip, sl
 8004efa:	e7b3      	b.n	8004e64 <__multiply+0x8c>
 8004efc:	46e0      	mov	r8, ip
 8004efe:	e7dd      	b.n	8004ebc <__multiply+0xe4>
 8004f00:	3e01      	subs	r6, #1
 8004f02:	e799      	b.n	8004e38 <__multiply+0x60>

08004f04 <__pow5mult>:
 8004f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f08:	4615      	mov	r5, r2
 8004f0a:	f012 0203 	ands.w	r2, r2, #3
 8004f0e:	4606      	mov	r6, r0
 8004f10:	460f      	mov	r7, r1
 8004f12:	d007      	beq.n	8004f24 <__pow5mult+0x20>
 8004f14:	3a01      	subs	r2, #1
 8004f16:	4c21      	ldr	r4, [pc, #132]	; (8004f9c <__pow5mult+0x98>)
 8004f18:	2300      	movs	r3, #0
 8004f1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004f1e:	f7ff fec9 	bl	8004cb4 <__multadd>
 8004f22:	4607      	mov	r7, r0
 8004f24:	10ad      	asrs	r5, r5, #2
 8004f26:	d035      	beq.n	8004f94 <__pow5mult+0x90>
 8004f28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004f2a:	b93c      	cbnz	r4, 8004f3c <__pow5mult+0x38>
 8004f2c:	2010      	movs	r0, #16
 8004f2e:	f7ff fe63 	bl	8004bf8 <malloc>
 8004f32:	6270      	str	r0, [r6, #36]	; 0x24
 8004f34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004f38:	6004      	str	r4, [r0, #0]
 8004f3a:	60c4      	str	r4, [r0, #12]
 8004f3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004f40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004f44:	b94c      	cbnz	r4, 8004f5a <__pow5mult+0x56>
 8004f46:	f240 2171 	movw	r1, #625	; 0x271
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	f7ff ff3b 	bl	8004dc6 <__i2b>
 8004f50:	2300      	movs	r3, #0
 8004f52:	f8c8 0008 	str.w	r0, [r8, #8]
 8004f56:	4604      	mov	r4, r0
 8004f58:	6003      	str	r3, [r0, #0]
 8004f5a:	f04f 0800 	mov.w	r8, #0
 8004f5e:	07eb      	lsls	r3, r5, #31
 8004f60:	d50a      	bpl.n	8004f78 <__pow5mult+0x74>
 8004f62:	4639      	mov	r1, r7
 8004f64:	4622      	mov	r2, r4
 8004f66:	4630      	mov	r0, r6
 8004f68:	f7ff ff36 	bl	8004dd8 <__multiply>
 8004f6c:	4639      	mov	r1, r7
 8004f6e:	4681      	mov	r9, r0
 8004f70:	4630      	mov	r0, r6
 8004f72:	f7ff fe88 	bl	8004c86 <_Bfree>
 8004f76:	464f      	mov	r7, r9
 8004f78:	106d      	asrs	r5, r5, #1
 8004f7a:	d00b      	beq.n	8004f94 <__pow5mult+0x90>
 8004f7c:	6820      	ldr	r0, [r4, #0]
 8004f7e:	b938      	cbnz	r0, 8004f90 <__pow5mult+0x8c>
 8004f80:	4622      	mov	r2, r4
 8004f82:	4621      	mov	r1, r4
 8004f84:	4630      	mov	r0, r6
 8004f86:	f7ff ff27 	bl	8004dd8 <__multiply>
 8004f8a:	6020      	str	r0, [r4, #0]
 8004f8c:	f8c0 8000 	str.w	r8, [r0]
 8004f90:	4604      	mov	r4, r0
 8004f92:	e7e4      	b.n	8004f5e <__pow5mult+0x5a>
 8004f94:	4638      	mov	r0, r7
 8004f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f9a:	bf00      	nop
 8004f9c:	08005d00 	.word	0x08005d00

08004fa0 <__lshift>:
 8004fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa4:	460c      	mov	r4, r1
 8004fa6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004faa:	6923      	ldr	r3, [r4, #16]
 8004fac:	6849      	ldr	r1, [r1, #4]
 8004fae:	eb0a 0903 	add.w	r9, sl, r3
 8004fb2:	68a3      	ldr	r3, [r4, #8]
 8004fb4:	4607      	mov	r7, r0
 8004fb6:	4616      	mov	r6, r2
 8004fb8:	f109 0501 	add.w	r5, r9, #1
 8004fbc:	42ab      	cmp	r3, r5
 8004fbe:	db32      	blt.n	8005026 <__lshift+0x86>
 8004fc0:	4638      	mov	r0, r7
 8004fc2:	f7ff fe2c 	bl	8004c1e <_Balloc>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	4680      	mov	r8, r0
 8004fca:	f100 0114 	add.w	r1, r0, #20
 8004fce:	461a      	mov	r2, r3
 8004fd0:	4553      	cmp	r3, sl
 8004fd2:	db2b      	blt.n	800502c <__lshift+0x8c>
 8004fd4:	6920      	ldr	r0, [r4, #16]
 8004fd6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004fda:	f104 0314 	add.w	r3, r4, #20
 8004fde:	f016 021f 	ands.w	r2, r6, #31
 8004fe2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004fe6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004fea:	d025      	beq.n	8005038 <__lshift+0x98>
 8004fec:	f1c2 0e20 	rsb	lr, r2, #32
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	681e      	ldr	r6, [r3, #0]
 8004ff4:	468a      	mov	sl, r1
 8004ff6:	4096      	lsls	r6, r2
 8004ff8:	4330      	orrs	r0, r6
 8004ffa:	f84a 0b04 	str.w	r0, [sl], #4
 8004ffe:	f853 0b04 	ldr.w	r0, [r3], #4
 8005002:	459c      	cmp	ip, r3
 8005004:	fa20 f00e 	lsr.w	r0, r0, lr
 8005008:	d814      	bhi.n	8005034 <__lshift+0x94>
 800500a:	6048      	str	r0, [r1, #4]
 800500c:	b108      	cbz	r0, 8005012 <__lshift+0x72>
 800500e:	f109 0502 	add.w	r5, r9, #2
 8005012:	3d01      	subs	r5, #1
 8005014:	4638      	mov	r0, r7
 8005016:	f8c8 5010 	str.w	r5, [r8, #16]
 800501a:	4621      	mov	r1, r4
 800501c:	f7ff fe33 	bl	8004c86 <_Bfree>
 8005020:	4640      	mov	r0, r8
 8005022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005026:	3101      	adds	r1, #1
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	e7c7      	b.n	8004fbc <__lshift+0x1c>
 800502c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005030:	3301      	adds	r3, #1
 8005032:	e7cd      	b.n	8004fd0 <__lshift+0x30>
 8005034:	4651      	mov	r1, sl
 8005036:	e7dc      	b.n	8004ff2 <__lshift+0x52>
 8005038:	3904      	subs	r1, #4
 800503a:	f853 2b04 	ldr.w	r2, [r3], #4
 800503e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005042:	459c      	cmp	ip, r3
 8005044:	d8f9      	bhi.n	800503a <__lshift+0x9a>
 8005046:	e7e4      	b.n	8005012 <__lshift+0x72>

08005048 <__mcmp>:
 8005048:	6903      	ldr	r3, [r0, #16]
 800504a:	690a      	ldr	r2, [r1, #16]
 800504c:	1a9b      	subs	r3, r3, r2
 800504e:	b530      	push	{r4, r5, lr}
 8005050:	d10c      	bne.n	800506c <__mcmp+0x24>
 8005052:	0092      	lsls	r2, r2, #2
 8005054:	3014      	adds	r0, #20
 8005056:	3114      	adds	r1, #20
 8005058:	1884      	adds	r4, r0, r2
 800505a:	4411      	add	r1, r2
 800505c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005060:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005064:	4295      	cmp	r5, r2
 8005066:	d003      	beq.n	8005070 <__mcmp+0x28>
 8005068:	d305      	bcc.n	8005076 <__mcmp+0x2e>
 800506a:	2301      	movs	r3, #1
 800506c:	4618      	mov	r0, r3
 800506e:	bd30      	pop	{r4, r5, pc}
 8005070:	42a0      	cmp	r0, r4
 8005072:	d3f3      	bcc.n	800505c <__mcmp+0x14>
 8005074:	e7fa      	b.n	800506c <__mcmp+0x24>
 8005076:	f04f 33ff 	mov.w	r3, #4294967295
 800507a:	e7f7      	b.n	800506c <__mcmp+0x24>

0800507c <__mdiff>:
 800507c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005080:	460d      	mov	r5, r1
 8005082:	4607      	mov	r7, r0
 8005084:	4611      	mov	r1, r2
 8005086:	4628      	mov	r0, r5
 8005088:	4614      	mov	r4, r2
 800508a:	f7ff ffdd 	bl	8005048 <__mcmp>
 800508e:	1e06      	subs	r6, r0, #0
 8005090:	d108      	bne.n	80050a4 <__mdiff+0x28>
 8005092:	4631      	mov	r1, r6
 8005094:	4638      	mov	r0, r7
 8005096:	f7ff fdc2 	bl	8004c1e <_Balloc>
 800509a:	2301      	movs	r3, #1
 800509c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80050a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a4:	bfa4      	itt	ge
 80050a6:	4623      	movge	r3, r4
 80050a8:	462c      	movge	r4, r5
 80050aa:	4638      	mov	r0, r7
 80050ac:	6861      	ldr	r1, [r4, #4]
 80050ae:	bfa6      	itte	ge
 80050b0:	461d      	movge	r5, r3
 80050b2:	2600      	movge	r6, #0
 80050b4:	2601      	movlt	r6, #1
 80050b6:	f7ff fdb2 	bl	8004c1e <_Balloc>
 80050ba:	692b      	ldr	r3, [r5, #16]
 80050bc:	60c6      	str	r6, [r0, #12]
 80050be:	6926      	ldr	r6, [r4, #16]
 80050c0:	f105 0914 	add.w	r9, r5, #20
 80050c4:	f104 0214 	add.w	r2, r4, #20
 80050c8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80050cc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80050d0:	f100 0514 	add.w	r5, r0, #20
 80050d4:	f04f 0e00 	mov.w	lr, #0
 80050d8:	f852 ab04 	ldr.w	sl, [r2], #4
 80050dc:	f859 4b04 	ldr.w	r4, [r9], #4
 80050e0:	fa1e f18a 	uxtah	r1, lr, sl
 80050e4:	b2a3      	uxth	r3, r4
 80050e6:	1ac9      	subs	r1, r1, r3
 80050e8:	0c23      	lsrs	r3, r4, #16
 80050ea:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80050ee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80050f2:	b289      	uxth	r1, r1
 80050f4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80050f8:	45c8      	cmp	r8, r9
 80050fa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80050fe:	4694      	mov	ip, r2
 8005100:	f845 3b04 	str.w	r3, [r5], #4
 8005104:	d8e8      	bhi.n	80050d8 <__mdiff+0x5c>
 8005106:	45bc      	cmp	ip, r7
 8005108:	d304      	bcc.n	8005114 <__mdiff+0x98>
 800510a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800510e:	b183      	cbz	r3, 8005132 <__mdiff+0xb6>
 8005110:	6106      	str	r6, [r0, #16]
 8005112:	e7c5      	b.n	80050a0 <__mdiff+0x24>
 8005114:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005118:	fa1e f381 	uxtah	r3, lr, r1
 800511c:	141a      	asrs	r2, r3, #16
 800511e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005122:	b29b      	uxth	r3, r3
 8005124:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005128:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800512c:	f845 3b04 	str.w	r3, [r5], #4
 8005130:	e7e9      	b.n	8005106 <__mdiff+0x8a>
 8005132:	3e01      	subs	r6, #1
 8005134:	e7e9      	b.n	800510a <__mdiff+0x8e>

08005136 <__d2b>:
 8005136:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800513a:	460e      	mov	r6, r1
 800513c:	2101      	movs	r1, #1
 800513e:	ec59 8b10 	vmov	r8, r9, d0
 8005142:	4615      	mov	r5, r2
 8005144:	f7ff fd6b 	bl	8004c1e <_Balloc>
 8005148:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800514c:	4607      	mov	r7, r0
 800514e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005152:	bb34      	cbnz	r4, 80051a2 <__d2b+0x6c>
 8005154:	9301      	str	r3, [sp, #4]
 8005156:	f1b8 0300 	subs.w	r3, r8, #0
 800515a:	d027      	beq.n	80051ac <__d2b+0x76>
 800515c:	a802      	add	r0, sp, #8
 800515e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005162:	f7ff fe01 	bl	8004d68 <__lo0bits>
 8005166:	9900      	ldr	r1, [sp, #0]
 8005168:	b1f0      	cbz	r0, 80051a8 <__d2b+0x72>
 800516a:	9a01      	ldr	r2, [sp, #4]
 800516c:	f1c0 0320 	rsb	r3, r0, #32
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	430b      	orrs	r3, r1
 8005176:	40c2      	lsrs	r2, r0
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	9201      	str	r2, [sp, #4]
 800517c:	9b01      	ldr	r3, [sp, #4]
 800517e:	61bb      	str	r3, [r7, #24]
 8005180:	2b00      	cmp	r3, #0
 8005182:	bf14      	ite	ne
 8005184:	2102      	movne	r1, #2
 8005186:	2101      	moveq	r1, #1
 8005188:	6139      	str	r1, [r7, #16]
 800518a:	b1c4      	cbz	r4, 80051be <__d2b+0x88>
 800518c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005190:	4404      	add	r4, r0
 8005192:	6034      	str	r4, [r6, #0]
 8005194:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005198:	6028      	str	r0, [r5, #0]
 800519a:	4638      	mov	r0, r7
 800519c:	b003      	add	sp, #12
 800519e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051a6:	e7d5      	b.n	8005154 <__d2b+0x1e>
 80051a8:	6179      	str	r1, [r7, #20]
 80051aa:	e7e7      	b.n	800517c <__d2b+0x46>
 80051ac:	a801      	add	r0, sp, #4
 80051ae:	f7ff fddb 	bl	8004d68 <__lo0bits>
 80051b2:	9b01      	ldr	r3, [sp, #4]
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	2101      	movs	r1, #1
 80051b8:	6139      	str	r1, [r7, #16]
 80051ba:	3020      	adds	r0, #32
 80051bc:	e7e5      	b.n	800518a <__d2b+0x54>
 80051be:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80051c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80051c6:	6030      	str	r0, [r6, #0]
 80051c8:	6918      	ldr	r0, [r3, #16]
 80051ca:	f7ff fdae 	bl	8004d2a <__hi0bits>
 80051ce:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80051d2:	e7e1      	b.n	8005198 <__d2b+0x62>

080051d4 <_calloc_r>:
 80051d4:	b538      	push	{r3, r4, r5, lr}
 80051d6:	fb02 f401 	mul.w	r4, r2, r1
 80051da:	4621      	mov	r1, r4
 80051dc:	f000 f856 	bl	800528c <_malloc_r>
 80051e0:	4605      	mov	r5, r0
 80051e2:	b118      	cbz	r0, 80051ec <_calloc_r+0x18>
 80051e4:	4622      	mov	r2, r4
 80051e6:	2100      	movs	r1, #0
 80051e8:	f7fe f96c 	bl	80034c4 <memset>
 80051ec:	4628      	mov	r0, r5
 80051ee:	bd38      	pop	{r3, r4, r5, pc}

080051f0 <_free_r>:
 80051f0:	b538      	push	{r3, r4, r5, lr}
 80051f2:	4605      	mov	r5, r0
 80051f4:	2900      	cmp	r1, #0
 80051f6:	d045      	beq.n	8005284 <_free_r+0x94>
 80051f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051fc:	1f0c      	subs	r4, r1, #4
 80051fe:	2b00      	cmp	r3, #0
 8005200:	bfb8      	it	lt
 8005202:	18e4      	addlt	r4, r4, r3
 8005204:	f000 fc4a 	bl	8005a9c <__malloc_lock>
 8005208:	4a1f      	ldr	r2, [pc, #124]	; (8005288 <_free_r+0x98>)
 800520a:	6813      	ldr	r3, [r2, #0]
 800520c:	4610      	mov	r0, r2
 800520e:	b933      	cbnz	r3, 800521e <_free_r+0x2e>
 8005210:	6063      	str	r3, [r4, #4]
 8005212:	6014      	str	r4, [r2, #0]
 8005214:	4628      	mov	r0, r5
 8005216:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800521a:	f000 bc40 	b.w	8005a9e <__malloc_unlock>
 800521e:	42a3      	cmp	r3, r4
 8005220:	d90c      	bls.n	800523c <_free_r+0x4c>
 8005222:	6821      	ldr	r1, [r4, #0]
 8005224:	1862      	adds	r2, r4, r1
 8005226:	4293      	cmp	r3, r2
 8005228:	bf04      	itt	eq
 800522a:	681a      	ldreq	r2, [r3, #0]
 800522c:	685b      	ldreq	r3, [r3, #4]
 800522e:	6063      	str	r3, [r4, #4]
 8005230:	bf04      	itt	eq
 8005232:	1852      	addeq	r2, r2, r1
 8005234:	6022      	streq	r2, [r4, #0]
 8005236:	6004      	str	r4, [r0, #0]
 8005238:	e7ec      	b.n	8005214 <_free_r+0x24>
 800523a:	4613      	mov	r3, r2
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	b10a      	cbz	r2, 8005244 <_free_r+0x54>
 8005240:	42a2      	cmp	r2, r4
 8005242:	d9fa      	bls.n	800523a <_free_r+0x4a>
 8005244:	6819      	ldr	r1, [r3, #0]
 8005246:	1858      	adds	r0, r3, r1
 8005248:	42a0      	cmp	r0, r4
 800524a:	d10b      	bne.n	8005264 <_free_r+0x74>
 800524c:	6820      	ldr	r0, [r4, #0]
 800524e:	4401      	add	r1, r0
 8005250:	1858      	adds	r0, r3, r1
 8005252:	4282      	cmp	r2, r0
 8005254:	6019      	str	r1, [r3, #0]
 8005256:	d1dd      	bne.n	8005214 <_free_r+0x24>
 8005258:	6810      	ldr	r0, [r2, #0]
 800525a:	6852      	ldr	r2, [r2, #4]
 800525c:	605a      	str	r2, [r3, #4]
 800525e:	4401      	add	r1, r0
 8005260:	6019      	str	r1, [r3, #0]
 8005262:	e7d7      	b.n	8005214 <_free_r+0x24>
 8005264:	d902      	bls.n	800526c <_free_r+0x7c>
 8005266:	230c      	movs	r3, #12
 8005268:	602b      	str	r3, [r5, #0]
 800526a:	e7d3      	b.n	8005214 <_free_r+0x24>
 800526c:	6820      	ldr	r0, [r4, #0]
 800526e:	1821      	adds	r1, r4, r0
 8005270:	428a      	cmp	r2, r1
 8005272:	bf04      	itt	eq
 8005274:	6811      	ldreq	r1, [r2, #0]
 8005276:	6852      	ldreq	r2, [r2, #4]
 8005278:	6062      	str	r2, [r4, #4]
 800527a:	bf04      	itt	eq
 800527c:	1809      	addeq	r1, r1, r0
 800527e:	6021      	streq	r1, [r4, #0]
 8005280:	605c      	str	r4, [r3, #4]
 8005282:	e7c7      	b.n	8005214 <_free_r+0x24>
 8005284:	bd38      	pop	{r3, r4, r5, pc}
 8005286:	bf00      	nop
 8005288:	20000208 	.word	0x20000208

0800528c <_malloc_r>:
 800528c:	b570      	push	{r4, r5, r6, lr}
 800528e:	1ccd      	adds	r5, r1, #3
 8005290:	f025 0503 	bic.w	r5, r5, #3
 8005294:	3508      	adds	r5, #8
 8005296:	2d0c      	cmp	r5, #12
 8005298:	bf38      	it	cc
 800529a:	250c      	movcc	r5, #12
 800529c:	2d00      	cmp	r5, #0
 800529e:	4606      	mov	r6, r0
 80052a0:	db01      	blt.n	80052a6 <_malloc_r+0x1a>
 80052a2:	42a9      	cmp	r1, r5
 80052a4:	d903      	bls.n	80052ae <_malloc_r+0x22>
 80052a6:	230c      	movs	r3, #12
 80052a8:	6033      	str	r3, [r6, #0]
 80052aa:	2000      	movs	r0, #0
 80052ac:	bd70      	pop	{r4, r5, r6, pc}
 80052ae:	f000 fbf5 	bl	8005a9c <__malloc_lock>
 80052b2:	4a21      	ldr	r2, [pc, #132]	; (8005338 <_malloc_r+0xac>)
 80052b4:	6814      	ldr	r4, [r2, #0]
 80052b6:	4621      	mov	r1, r4
 80052b8:	b991      	cbnz	r1, 80052e0 <_malloc_r+0x54>
 80052ba:	4c20      	ldr	r4, [pc, #128]	; (800533c <_malloc_r+0xb0>)
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	b91b      	cbnz	r3, 80052c8 <_malloc_r+0x3c>
 80052c0:	4630      	mov	r0, r6
 80052c2:	f000 f97d 	bl	80055c0 <_sbrk_r>
 80052c6:	6020      	str	r0, [r4, #0]
 80052c8:	4629      	mov	r1, r5
 80052ca:	4630      	mov	r0, r6
 80052cc:	f000 f978 	bl	80055c0 <_sbrk_r>
 80052d0:	1c43      	adds	r3, r0, #1
 80052d2:	d124      	bne.n	800531e <_malloc_r+0x92>
 80052d4:	230c      	movs	r3, #12
 80052d6:	6033      	str	r3, [r6, #0]
 80052d8:	4630      	mov	r0, r6
 80052da:	f000 fbe0 	bl	8005a9e <__malloc_unlock>
 80052de:	e7e4      	b.n	80052aa <_malloc_r+0x1e>
 80052e0:	680b      	ldr	r3, [r1, #0]
 80052e2:	1b5b      	subs	r3, r3, r5
 80052e4:	d418      	bmi.n	8005318 <_malloc_r+0x8c>
 80052e6:	2b0b      	cmp	r3, #11
 80052e8:	d90f      	bls.n	800530a <_malloc_r+0x7e>
 80052ea:	600b      	str	r3, [r1, #0]
 80052ec:	50cd      	str	r5, [r1, r3]
 80052ee:	18cc      	adds	r4, r1, r3
 80052f0:	4630      	mov	r0, r6
 80052f2:	f000 fbd4 	bl	8005a9e <__malloc_unlock>
 80052f6:	f104 000b 	add.w	r0, r4, #11
 80052fa:	1d23      	adds	r3, r4, #4
 80052fc:	f020 0007 	bic.w	r0, r0, #7
 8005300:	1ac3      	subs	r3, r0, r3
 8005302:	d0d3      	beq.n	80052ac <_malloc_r+0x20>
 8005304:	425a      	negs	r2, r3
 8005306:	50e2      	str	r2, [r4, r3]
 8005308:	e7d0      	b.n	80052ac <_malloc_r+0x20>
 800530a:	428c      	cmp	r4, r1
 800530c:	684b      	ldr	r3, [r1, #4]
 800530e:	bf16      	itet	ne
 8005310:	6063      	strne	r3, [r4, #4]
 8005312:	6013      	streq	r3, [r2, #0]
 8005314:	460c      	movne	r4, r1
 8005316:	e7eb      	b.n	80052f0 <_malloc_r+0x64>
 8005318:	460c      	mov	r4, r1
 800531a:	6849      	ldr	r1, [r1, #4]
 800531c:	e7cc      	b.n	80052b8 <_malloc_r+0x2c>
 800531e:	1cc4      	adds	r4, r0, #3
 8005320:	f024 0403 	bic.w	r4, r4, #3
 8005324:	42a0      	cmp	r0, r4
 8005326:	d005      	beq.n	8005334 <_malloc_r+0xa8>
 8005328:	1a21      	subs	r1, r4, r0
 800532a:	4630      	mov	r0, r6
 800532c:	f000 f948 	bl	80055c0 <_sbrk_r>
 8005330:	3001      	adds	r0, #1
 8005332:	d0cf      	beq.n	80052d4 <_malloc_r+0x48>
 8005334:	6025      	str	r5, [r4, #0]
 8005336:	e7db      	b.n	80052f0 <_malloc_r+0x64>
 8005338:	20000208 	.word	0x20000208
 800533c:	2000020c 	.word	0x2000020c

08005340 <__sfputc_r>:
 8005340:	6893      	ldr	r3, [r2, #8]
 8005342:	3b01      	subs	r3, #1
 8005344:	2b00      	cmp	r3, #0
 8005346:	b410      	push	{r4}
 8005348:	6093      	str	r3, [r2, #8]
 800534a:	da08      	bge.n	800535e <__sfputc_r+0x1e>
 800534c:	6994      	ldr	r4, [r2, #24]
 800534e:	42a3      	cmp	r3, r4
 8005350:	db01      	blt.n	8005356 <__sfputc_r+0x16>
 8005352:	290a      	cmp	r1, #10
 8005354:	d103      	bne.n	800535e <__sfputc_r+0x1e>
 8005356:	f85d 4b04 	ldr.w	r4, [sp], #4
 800535a:	f000 b985 	b.w	8005668 <__swbuf_r>
 800535e:	6813      	ldr	r3, [r2, #0]
 8005360:	1c58      	adds	r0, r3, #1
 8005362:	6010      	str	r0, [r2, #0]
 8005364:	7019      	strb	r1, [r3, #0]
 8005366:	4608      	mov	r0, r1
 8005368:	f85d 4b04 	ldr.w	r4, [sp], #4
 800536c:	4770      	bx	lr

0800536e <__sfputs_r>:
 800536e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005370:	4606      	mov	r6, r0
 8005372:	460f      	mov	r7, r1
 8005374:	4614      	mov	r4, r2
 8005376:	18d5      	adds	r5, r2, r3
 8005378:	42ac      	cmp	r4, r5
 800537a:	d101      	bne.n	8005380 <__sfputs_r+0x12>
 800537c:	2000      	movs	r0, #0
 800537e:	e007      	b.n	8005390 <__sfputs_r+0x22>
 8005380:	463a      	mov	r2, r7
 8005382:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005386:	4630      	mov	r0, r6
 8005388:	f7ff ffda 	bl	8005340 <__sfputc_r>
 800538c:	1c43      	adds	r3, r0, #1
 800538e:	d1f3      	bne.n	8005378 <__sfputs_r+0xa>
 8005390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005394 <_vfiprintf_r>:
 8005394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005398:	460c      	mov	r4, r1
 800539a:	b09d      	sub	sp, #116	; 0x74
 800539c:	4617      	mov	r7, r2
 800539e:	461d      	mov	r5, r3
 80053a0:	4606      	mov	r6, r0
 80053a2:	b118      	cbz	r0, 80053ac <_vfiprintf_r+0x18>
 80053a4:	6983      	ldr	r3, [r0, #24]
 80053a6:	b90b      	cbnz	r3, 80053ac <_vfiprintf_r+0x18>
 80053a8:	f7ff fb8e 	bl	8004ac8 <__sinit>
 80053ac:	4b7c      	ldr	r3, [pc, #496]	; (80055a0 <_vfiprintf_r+0x20c>)
 80053ae:	429c      	cmp	r4, r3
 80053b0:	d158      	bne.n	8005464 <_vfiprintf_r+0xd0>
 80053b2:	6874      	ldr	r4, [r6, #4]
 80053b4:	89a3      	ldrh	r3, [r4, #12]
 80053b6:	0718      	lsls	r0, r3, #28
 80053b8:	d55e      	bpl.n	8005478 <_vfiprintf_r+0xe4>
 80053ba:	6923      	ldr	r3, [r4, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d05b      	beq.n	8005478 <_vfiprintf_r+0xe4>
 80053c0:	2300      	movs	r3, #0
 80053c2:	9309      	str	r3, [sp, #36]	; 0x24
 80053c4:	2320      	movs	r3, #32
 80053c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053ca:	2330      	movs	r3, #48	; 0x30
 80053cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053d0:	9503      	str	r5, [sp, #12]
 80053d2:	f04f 0b01 	mov.w	fp, #1
 80053d6:	46b8      	mov	r8, r7
 80053d8:	4645      	mov	r5, r8
 80053da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80053de:	b10b      	cbz	r3, 80053e4 <_vfiprintf_r+0x50>
 80053e0:	2b25      	cmp	r3, #37	; 0x25
 80053e2:	d154      	bne.n	800548e <_vfiprintf_r+0xfa>
 80053e4:	ebb8 0a07 	subs.w	sl, r8, r7
 80053e8:	d00b      	beq.n	8005402 <_vfiprintf_r+0x6e>
 80053ea:	4653      	mov	r3, sl
 80053ec:	463a      	mov	r2, r7
 80053ee:	4621      	mov	r1, r4
 80053f0:	4630      	mov	r0, r6
 80053f2:	f7ff ffbc 	bl	800536e <__sfputs_r>
 80053f6:	3001      	adds	r0, #1
 80053f8:	f000 80c2 	beq.w	8005580 <_vfiprintf_r+0x1ec>
 80053fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053fe:	4453      	add	r3, sl
 8005400:	9309      	str	r3, [sp, #36]	; 0x24
 8005402:	f898 3000 	ldrb.w	r3, [r8]
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 80ba 	beq.w	8005580 <_vfiprintf_r+0x1ec>
 800540c:	2300      	movs	r3, #0
 800540e:	f04f 32ff 	mov.w	r2, #4294967295
 8005412:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005416:	9304      	str	r3, [sp, #16]
 8005418:	9307      	str	r3, [sp, #28]
 800541a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800541e:	931a      	str	r3, [sp, #104]	; 0x68
 8005420:	46a8      	mov	r8, r5
 8005422:	2205      	movs	r2, #5
 8005424:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005428:	485e      	ldr	r0, [pc, #376]	; (80055a4 <_vfiprintf_r+0x210>)
 800542a:	f7fa fed9 	bl	80001e0 <memchr>
 800542e:	9b04      	ldr	r3, [sp, #16]
 8005430:	bb78      	cbnz	r0, 8005492 <_vfiprintf_r+0xfe>
 8005432:	06d9      	lsls	r1, r3, #27
 8005434:	bf44      	itt	mi
 8005436:	2220      	movmi	r2, #32
 8005438:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800543c:	071a      	lsls	r2, r3, #28
 800543e:	bf44      	itt	mi
 8005440:	222b      	movmi	r2, #43	; 0x2b
 8005442:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005446:	782a      	ldrb	r2, [r5, #0]
 8005448:	2a2a      	cmp	r2, #42	; 0x2a
 800544a:	d02a      	beq.n	80054a2 <_vfiprintf_r+0x10e>
 800544c:	9a07      	ldr	r2, [sp, #28]
 800544e:	46a8      	mov	r8, r5
 8005450:	2000      	movs	r0, #0
 8005452:	250a      	movs	r5, #10
 8005454:	4641      	mov	r1, r8
 8005456:	f811 3b01 	ldrb.w	r3, [r1], #1
 800545a:	3b30      	subs	r3, #48	; 0x30
 800545c:	2b09      	cmp	r3, #9
 800545e:	d969      	bls.n	8005534 <_vfiprintf_r+0x1a0>
 8005460:	b360      	cbz	r0, 80054bc <_vfiprintf_r+0x128>
 8005462:	e024      	b.n	80054ae <_vfiprintf_r+0x11a>
 8005464:	4b50      	ldr	r3, [pc, #320]	; (80055a8 <_vfiprintf_r+0x214>)
 8005466:	429c      	cmp	r4, r3
 8005468:	d101      	bne.n	800546e <_vfiprintf_r+0xda>
 800546a:	68b4      	ldr	r4, [r6, #8]
 800546c:	e7a2      	b.n	80053b4 <_vfiprintf_r+0x20>
 800546e:	4b4f      	ldr	r3, [pc, #316]	; (80055ac <_vfiprintf_r+0x218>)
 8005470:	429c      	cmp	r4, r3
 8005472:	bf08      	it	eq
 8005474:	68f4      	ldreq	r4, [r6, #12]
 8005476:	e79d      	b.n	80053b4 <_vfiprintf_r+0x20>
 8005478:	4621      	mov	r1, r4
 800547a:	4630      	mov	r0, r6
 800547c:	f000 f958 	bl	8005730 <__swsetup_r>
 8005480:	2800      	cmp	r0, #0
 8005482:	d09d      	beq.n	80053c0 <_vfiprintf_r+0x2c>
 8005484:	f04f 30ff 	mov.w	r0, #4294967295
 8005488:	b01d      	add	sp, #116	; 0x74
 800548a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800548e:	46a8      	mov	r8, r5
 8005490:	e7a2      	b.n	80053d8 <_vfiprintf_r+0x44>
 8005492:	4a44      	ldr	r2, [pc, #272]	; (80055a4 <_vfiprintf_r+0x210>)
 8005494:	1a80      	subs	r0, r0, r2
 8005496:	fa0b f000 	lsl.w	r0, fp, r0
 800549a:	4318      	orrs	r0, r3
 800549c:	9004      	str	r0, [sp, #16]
 800549e:	4645      	mov	r5, r8
 80054a0:	e7be      	b.n	8005420 <_vfiprintf_r+0x8c>
 80054a2:	9a03      	ldr	r2, [sp, #12]
 80054a4:	1d11      	adds	r1, r2, #4
 80054a6:	6812      	ldr	r2, [r2, #0]
 80054a8:	9103      	str	r1, [sp, #12]
 80054aa:	2a00      	cmp	r2, #0
 80054ac:	db01      	blt.n	80054b2 <_vfiprintf_r+0x11e>
 80054ae:	9207      	str	r2, [sp, #28]
 80054b0:	e004      	b.n	80054bc <_vfiprintf_r+0x128>
 80054b2:	4252      	negs	r2, r2
 80054b4:	f043 0302 	orr.w	r3, r3, #2
 80054b8:	9207      	str	r2, [sp, #28]
 80054ba:	9304      	str	r3, [sp, #16]
 80054bc:	f898 3000 	ldrb.w	r3, [r8]
 80054c0:	2b2e      	cmp	r3, #46	; 0x2e
 80054c2:	d10e      	bne.n	80054e2 <_vfiprintf_r+0x14e>
 80054c4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80054c8:	2b2a      	cmp	r3, #42	; 0x2a
 80054ca:	d138      	bne.n	800553e <_vfiprintf_r+0x1aa>
 80054cc:	9b03      	ldr	r3, [sp, #12]
 80054ce:	1d1a      	adds	r2, r3, #4
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	9203      	str	r2, [sp, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	bfb8      	it	lt
 80054d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80054dc:	f108 0802 	add.w	r8, r8, #2
 80054e0:	9305      	str	r3, [sp, #20]
 80054e2:	4d33      	ldr	r5, [pc, #204]	; (80055b0 <_vfiprintf_r+0x21c>)
 80054e4:	f898 1000 	ldrb.w	r1, [r8]
 80054e8:	2203      	movs	r2, #3
 80054ea:	4628      	mov	r0, r5
 80054ec:	f7fa fe78 	bl	80001e0 <memchr>
 80054f0:	b140      	cbz	r0, 8005504 <_vfiprintf_r+0x170>
 80054f2:	2340      	movs	r3, #64	; 0x40
 80054f4:	1b40      	subs	r0, r0, r5
 80054f6:	fa03 f000 	lsl.w	r0, r3, r0
 80054fa:	9b04      	ldr	r3, [sp, #16]
 80054fc:	4303      	orrs	r3, r0
 80054fe:	f108 0801 	add.w	r8, r8, #1
 8005502:	9304      	str	r3, [sp, #16]
 8005504:	f898 1000 	ldrb.w	r1, [r8]
 8005508:	482a      	ldr	r0, [pc, #168]	; (80055b4 <_vfiprintf_r+0x220>)
 800550a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800550e:	2206      	movs	r2, #6
 8005510:	f108 0701 	add.w	r7, r8, #1
 8005514:	f7fa fe64 	bl	80001e0 <memchr>
 8005518:	2800      	cmp	r0, #0
 800551a:	d037      	beq.n	800558c <_vfiprintf_r+0x1f8>
 800551c:	4b26      	ldr	r3, [pc, #152]	; (80055b8 <_vfiprintf_r+0x224>)
 800551e:	bb1b      	cbnz	r3, 8005568 <_vfiprintf_r+0x1d4>
 8005520:	9b03      	ldr	r3, [sp, #12]
 8005522:	3307      	adds	r3, #7
 8005524:	f023 0307 	bic.w	r3, r3, #7
 8005528:	3308      	adds	r3, #8
 800552a:	9303      	str	r3, [sp, #12]
 800552c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800552e:	444b      	add	r3, r9
 8005530:	9309      	str	r3, [sp, #36]	; 0x24
 8005532:	e750      	b.n	80053d6 <_vfiprintf_r+0x42>
 8005534:	fb05 3202 	mla	r2, r5, r2, r3
 8005538:	2001      	movs	r0, #1
 800553a:	4688      	mov	r8, r1
 800553c:	e78a      	b.n	8005454 <_vfiprintf_r+0xc0>
 800553e:	2300      	movs	r3, #0
 8005540:	f108 0801 	add.w	r8, r8, #1
 8005544:	9305      	str	r3, [sp, #20]
 8005546:	4619      	mov	r1, r3
 8005548:	250a      	movs	r5, #10
 800554a:	4640      	mov	r0, r8
 800554c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005550:	3a30      	subs	r2, #48	; 0x30
 8005552:	2a09      	cmp	r2, #9
 8005554:	d903      	bls.n	800555e <_vfiprintf_r+0x1ca>
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0c3      	beq.n	80054e2 <_vfiprintf_r+0x14e>
 800555a:	9105      	str	r1, [sp, #20]
 800555c:	e7c1      	b.n	80054e2 <_vfiprintf_r+0x14e>
 800555e:	fb05 2101 	mla	r1, r5, r1, r2
 8005562:	2301      	movs	r3, #1
 8005564:	4680      	mov	r8, r0
 8005566:	e7f0      	b.n	800554a <_vfiprintf_r+0x1b6>
 8005568:	ab03      	add	r3, sp, #12
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	4622      	mov	r2, r4
 800556e:	4b13      	ldr	r3, [pc, #76]	; (80055bc <_vfiprintf_r+0x228>)
 8005570:	a904      	add	r1, sp, #16
 8005572:	4630      	mov	r0, r6
 8005574:	f7fe f842 	bl	80035fc <_printf_float>
 8005578:	f1b0 3fff 	cmp.w	r0, #4294967295
 800557c:	4681      	mov	r9, r0
 800557e:	d1d5      	bne.n	800552c <_vfiprintf_r+0x198>
 8005580:	89a3      	ldrh	r3, [r4, #12]
 8005582:	065b      	lsls	r3, r3, #25
 8005584:	f53f af7e 	bmi.w	8005484 <_vfiprintf_r+0xf0>
 8005588:	9809      	ldr	r0, [sp, #36]	; 0x24
 800558a:	e77d      	b.n	8005488 <_vfiprintf_r+0xf4>
 800558c:	ab03      	add	r3, sp, #12
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	4622      	mov	r2, r4
 8005592:	4b0a      	ldr	r3, [pc, #40]	; (80055bc <_vfiprintf_r+0x228>)
 8005594:	a904      	add	r1, sp, #16
 8005596:	4630      	mov	r0, r6
 8005598:	f7fe fae6 	bl	8003b68 <_printf_i>
 800559c:	e7ec      	b.n	8005578 <_vfiprintf_r+0x1e4>
 800559e:	bf00      	nop
 80055a0:	08005bd0 	.word	0x08005bd0
 80055a4:	08005d0c 	.word	0x08005d0c
 80055a8:	08005bf0 	.word	0x08005bf0
 80055ac:	08005bb0 	.word	0x08005bb0
 80055b0:	08005d12 	.word	0x08005d12
 80055b4:	08005d16 	.word	0x08005d16
 80055b8:	080035fd 	.word	0x080035fd
 80055bc:	0800536f 	.word	0x0800536f

080055c0 <_sbrk_r>:
 80055c0:	b538      	push	{r3, r4, r5, lr}
 80055c2:	4c06      	ldr	r4, [pc, #24]	; (80055dc <_sbrk_r+0x1c>)
 80055c4:	2300      	movs	r3, #0
 80055c6:	4605      	mov	r5, r0
 80055c8:	4608      	mov	r0, r1
 80055ca:	6023      	str	r3, [r4, #0]
 80055cc:	f7fc f84e 	bl	800166c <_sbrk>
 80055d0:	1c43      	adds	r3, r0, #1
 80055d2:	d102      	bne.n	80055da <_sbrk_r+0x1a>
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	b103      	cbz	r3, 80055da <_sbrk_r+0x1a>
 80055d8:	602b      	str	r3, [r5, #0]
 80055da:	bd38      	pop	{r3, r4, r5, pc}
 80055dc:	20000298 	.word	0x20000298

080055e0 <__sread>:
 80055e0:	b510      	push	{r4, lr}
 80055e2:	460c      	mov	r4, r1
 80055e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055e8:	f000 fa5a 	bl	8005aa0 <_read_r>
 80055ec:	2800      	cmp	r0, #0
 80055ee:	bfab      	itete	ge
 80055f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80055f2:	89a3      	ldrhlt	r3, [r4, #12]
 80055f4:	181b      	addge	r3, r3, r0
 80055f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055fa:	bfac      	ite	ge
 80055fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80055fe:	81a3      	strhlt	r3, [r4, #12]
 8005600:	bd10      	pop	{r4, pc}

08005602 <__swrite>:
 8005602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005606:	461f      	mov	r7, r3
 8005608:	898b      	ldrh	r3, [r1, #12]
 800560a:	05db      	lsls	r3, r3, #23
 800560c:	4605      	mov	r5, r0
 800560e:	460c      	mov	r4, r1
 8005610:	4616      	mov	r6, r2
 8005612:	d505      	bpl.n	8005620 <__swrite+0x1e>
 8005614:	2302      	movs	r3, #2
 8005616:	2200      	movs	r2, #0
 8005618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800561c:	f000 f9b6 	bl	800598c <_lseek_r>
 8005620:	89a3      	ldrh	r3, [r4, #12]
 8005622:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005626:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800562a:	81a3      	strh	r3, [r4, #12]
 800562c:	4632      	mov	r2, r6
 800562e:	463b      	mov	r3, r7
 8005630:	4628      	mov	r0, r5
 8005632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005636:	f000 b869 	b.w	800570c <_write_r>

0800563a <__sseek>:
 800563a:	b510      	push	{r4, lr}
 800563c:	460c      	mov	r4, r1
 800563e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005642:	f000 f9a3 	bl	800598c <_lseek_r>
 8005646:	1c43      	adds	r3, r0, #1
 8005648:	89a3      	ldrh	r3, [r4, #12]
 800564a:	bf15      	itete	ne
 800564c:	6560      	strne	r0, [r4, #84]	; 0x54
 800564e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005652:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005656:	81a3      	strheq	r3, [r4, #12]
 8005658:	bf18      	it	ne
 800565a:	81a3      	strhne	r3, [r4, #12]
 800565c:	bd10      	pop	{r4, pc}

0800565e <__sclose>:
 800565e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005662:	f000 b8d3 	b.w	800580c <_close_r>
	...

08005668 <__swbuf_r>:
 8005668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566a:	460e      	mov	r6, r1
 800566c:	4614      	mov	r4, r2
 800566e:	4605      	mov	r5, r0
 8005670:	b118      	cbz	r0, 800567a <__swbuf_r+0x12>
 8005672:	6983      	ldr	r3, [r0, #24]
 8005674:	b90b      	cbnz	r3, 800567a <__swbuf_r+0x12>
 8005676:	f7ff fa27 	bl	8004ac8 <__sinit>
 800567a:	4b21      	ldr	r3, [pc, #132]	; (8005700 <__swbuf_r+0x98>)
 800567c:	429c      	cmp	r4, r3
 800567e:	d12a      	bne.n	80056d6 <__swbuf_r+0x6e>
 8005680:	686c      	ldr	r4, [r5, #4]
 8005682:	69a3      	ldr	r3, [r4, #24]
 8005684:	60a3      	str	r3, [r4, #8]
 8005686:	89a3      	ldrh	r3, [r4, #12]
 8005688:	071a      	lsls	r2, r3, #28
 800568a:	d52e      	bpl.n	80056ea <__swbuf_r+0x82>
 800568c:	6923      	ldr	r3, [r4, #16]
 800568e:	b363      	cbz	r3, 80056ea <__swbuf_r+0x82>
 8005690:	6923      	ldr	r3, [r4, #16]
 8005692:	6820      	ldr	r0, [r4, #0]
 8005694:	1ac0      	subs	r0, r0, r3
 8005696:	6963      	ldr	r3, [r4, #20]
 8005698:	b2f6      	uxtb	r6, r6
 800569a:	4283      	cmp	r3, r0
 800569c:	4637      	mov	r7, r6
 800569e:	dc04      	bgt.n	80056aa <__swbuf_r+0x42>
 80056a0:	4621      	mov	r1, r4
 80056a2:	4628      	mov	r0, r5
 80056a4:	f000 f948 	bl	8005938 <_fflush_r>
 80056a8:	bb28      	cbnz	r0, 80056f6 <__swbuf_r+0x8e>
 80056aa:	68a3      	ldr	r3, [r4, #8]
 80056ac:	3b01      	subs	r3, #1
 80056ae:	60a3      	str	r3, [r4, #8]
 80056b0:	6823      	ldr	r3, [r4, #0]
 80056b2:	1c5a      	adds	r2, r3, #1
 80056b4:	6022      	str	r2, [r4, #0]
 80056b6:	701e      	strb	r6, [r3, #0]
 80056b8:	6963      	ldr	r3, [r4, #20]
 80056ba:	3001      	adds	r0, #1
 80056bc:	4283      	cmp	r3, r0
 80056be:	d004      	beq.n	80056ca <__swbuf_r+0x62>
 80056c0:	89a3      	ldrh	r3, [r4, #12]
 80056c2:	07db      	lsls	r3, r3, #31
 80056c4:	d519      	bpl.n	80056fa <__swbuf_r+0x92>
 80056c6:	2e0a      	cmp	r6, #10
 80056c8:	d117      	bne.n	80056fa <__swbuf_r+0x92>
 80056ca:	4621      	mov	r1, r4
 80056cc:	4628      	mov	r0, r5
 80056ce:	f000 f933 	bl	8005938 <_fflush_r>
 80056d2:	b190      	cbz	r0, 80056fa <__swbuf_r+0x92>
 80056d4:	e00f      	b.n	80056f6 <__swbuf_r+0x8e>
 80056d6:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <__swbuf_r+0x9c>)
 80056d8:	429c      	cmp	r4, r3
 80056da:	d101      	bne.n	80056e0 <__swbuf_r+0x78>
 80056dc:	68ac      	ldr	r4, [r5, #8]
 80056de:	e7d0      	b.n	8005682 <__swbuf_r+0x1a>
 80056e0:	4b09      	ldr	r3, [pc, #36]	; (8005708 <__swbuf_r+0xa0>)
 80056e2:	429c      	cmp	r4, r3
 80056e4:	bf08      	it	eq
 80056e6:	68ec      	ldreq	r4, [r5, #12]
 80056e8:	e7cb      	b.n	8005682 <__swbuf_r+0x1a>
 80056ea:	4621      	mov	r1, r4
 80056ec:	4628      	mov	r0, r5
 80056ee:	f000 f81f 	bl	8005730 <__swsetup_r>
 80056f2:	2800      	cmp	r0, #0
 80056f4:	d0cc      	beq.n	8005690 <__swbuf_r+0x28>
 80056f6:	f04f 37ff 	mov.w	r7, #4294967295
 80056fa:	4638      	mov	r0, r7
 80056fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056fe:	bf00      	nop
 8005700:	08005bd0 	.word	0x08005bd0
 8005704:	08005bf0 	.word	0x08005bf0
 8005708:	08005bb0 	.word	0x08005bb0

0800570c <_write_r>:
 800570c:	b538      	push	{r3, r4, r5, lr}
 800570e:	4c07      	ldr	r4, [pc, #28]	; (800572c <_write_r+0x20>)
 8005710:	4605      	mov	r5, r0
 8005712:	4608      	mov	r0, r1
 8005714:	4611      	mov	r1, r2
 8005716:	2200      	movs	r2, #0
 8005718:	6022      	str	r2, [r4, #0]
 800571a:	461a      	mov	r2, r3
 800571c:	f7fb ff55 	bl	80015ca <_write>
 8005720:	1c43      	adds	r3, r0, #1
 8005722:	d102      	bne.n	800572a <_write_r+0x1e>
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	b103      	cbz	r3, 800572a <_write_r+0x1e>
 8005728:	602b      	str	r3, [r5, #0]
 800572a:	bd38      	pop	{r3, r4, r5, pc}
 800572c:	20000298 	.word	0x20000298

08005730 <__swsetup_r>:
 8005730:	4b32      	ldr	r3, [pc, #200]	; (80057fc <__swsetup_r+0xcc>)
 8005732:	b570      	push	{r4, r5, r6, lr}
 8005734:	681d      	ldr	r5, [r3, #0]
 8005736:	4606      	mov	r6, r0
 8005738:	460c      	mov	r4, r1
 800573a:	b125      	cbz	r5, 8005746 <__swsetup_r+0x16>
 800573c:	69ab      	ldr	r3, [r5, #24]
 800573e:	b913      	cbnz	r3, 8005746 <__swsetup_r+0x16>
 8005740:	4628      	mov	r0, r5
 8005742:	f7ff f9c1 	bl	8004ac8 <__sinit>
 8005746:	4b2e      	ldr	r3, [pc, #184]	; (8005800 <__swsetup_r+0xd0>)
 8005748:	429c      	cmp	r4, r3
 800574a:	d10f      	bne.n	800576c <__swsetup_r+0x3c>
 800574c:	686c      	ldr	r4, [r5, #4]
 800574e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005752:	b29a      	uxth	r2, r3
 8005754:	0715      	lsls	r5, r2, #28
 8005756:	d42c      	bmi.n	80057b2 <__swsetup_r+0x82>
 8005758:	06d0      	lsls	r0, r2, #27
 800575a:	d411      	bmi.n	8005780 <__swsetup_r+0x50>
 800575c:	2209      	movs	r2, #9
 800575e:	6032      	str	r2, [r6, #0]
 8005760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005764:	81a3      	strh	r3, [r4, #12]
 8005766:	f04f 30ff 	mov.w	r0, #4294967295
 800576a:	e03e      	b.n	80057ea <__swsetup_r+0xba>
 800576c:	4b25      	ldr	r3, [pc, #148]	; (8005804 <__swsetup_r+0xd4>)
 800576e:	429c      	cmp	r4, r3
 8005770:	d101      	bne.n	8005776 <__swsetup_r+0x46>
 8005772:	68ac      	ldr	r4, [r5, #8]
 8005774:	e7eb      	b.n	800574e <__swsetup_r+0x1e>
 8005776:	4b24      	ldr	r3, [pc, #144]	; (8005808 <__swsetup_r+0xd8>)
 8005778:	429c      	cmp	r4, r3
 800577a:	bf08      	it	eq
 800577c:	68ec      	ldreq	r4, [r5, #12]
 800577e:	e7e6      	b.n	800574e <__swsetup_r+0x1e>
 8005780:	0751      	lsls	r1, r2, #29
 8005782:	d512      	bpl.n	80057aa <__swsetup_r+0x7a>
 8005784:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005786:	b141      	cbz	r1, 800579a <__swsetup_r+0x6a>
 8005788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800578c:	4299      	cmp	r1, r3
 800578e:	d002      	beq.n	8005796 <__swsetup_r+0x66>
 8005790:	4630      	mov	r0, r6
 8005792:	f7ff fd2d 	bl	80051f0 <_free_r>
 8005796:	2300      	movs	r3, #0
 8005798:	6363      	str	r3, [r4, #52]	; 0x34
 800579a:	89a3      	ldrh	r3, [r4, #12]
 800579c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057a0:	81a3      	strh	r3, [r4, #12]
 80057a2:	2300      	movs	r3, #0
 80057a4:	6063      	str	r3, [r4, #4]
 80057a6:	6923      	ldr	r3, [r4, #16]
 80057a8:	6023      	str	r3, [r4, #0]
 80057aa:	89a3      	ldrh	r3, [r4, #12]
 80057ac:	f043 0308 	orr.w	r3, r3, #8
 80057b0:	81a3      	strh	r3, [r4, #12]
 80057b2:	6923      	ldr	r3, [r4, #16]
 80057b4:	b94b      	cbnz	r3, 80057ca <__swsetup_r+0x9a>
 80057b6:	89a3      	ldrh	r3, [r4, #12]
 80057b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80057bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057c0:	d003      	beq.n	80057ca <__swsetup_r+0x9a>
 80057c2:	4621      	mov	r1, r4
 80057c4:	4630      	mov	r0, r6
 80057c6:	f000 f917 	bl	80059f8 <__smakebuf_r>
 80057ca:	89a2      	ldrh	r2, [r4, #12]
 80057cc:	f012 0301 	ands.w	r3, r2, #1
 80057d0:	d00c      	beq.n	80057ec <__swsetup_r+0xbc>
 80057d2:	2300      	movs	r3, #0
 80057d4:	60a3      	str	r3, [r4, #8]
 80057d6:	6963      	ldr	r3, [r4, #20]
 80057d8:	425b      	negs	r3, r3
 80057da:	61a3      	str	r3, [r4, #24]
 80057dc:	6923      	ldr	r3, [r4, #16]
 80057de:	b953      	cbnz	r3, 80057f6 <__swsetup_r+0xc6>
 80057e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80057e8:	d1ba      	bne.n	8005760 <__swsetup_r+0x30>
 80057ea:	bd70      	pop	{r4, r5, r6, pc}
 80057ec:	0792      	lsls	r2, r2, #30
 80057ee:	bf58      	it	pl
 80057f0:	6963      	ldrpl	r3, [r4, #20]
 80057f2:	60a3      	str	r3, [r4, #8]
 80057f4:	e7f2      	b.n	80057dc <__swsetup_r+0xac>
 80057f6:	2000      	movs	r0, #0
 80057f8:	e7f7      	b.n	80057ea <__swsetup_r+0xba>
 80057fa:	bf00      	nop
 80057fc:	2000000c 	.word	0x2000000c
 8005800:	08005bd0 	.word	0x08005bd0
 8005804:	08005bf0 	.word	0x08005bf0
 8005808:	08005bb0 	.word	0x08005bb0

0800580c <_close_r>:
 800580c:	b538      	push	{r3, r4, r5, lr}
 800580e:	4c06      	ldr	r4, [pc, #24]	; (8005828 <_close_r+0x1c>)
 8005810:	2300      	movs	r3, #0
 8005812:	4605      	mov	r5, r0
 8005814:	4608      	mov	r0, r1
 8005816:	6023      	str	r3, [r4, #0]
 8005818:	f7fb fef3 	bl	8001602 <_close>
 800581c:	1c43      	adds	r3, r0, #1
 800581e:	d102      	bne.n	8005826 <_close_r+0x1a>
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	b103      	cbz	r3, 8005826 <_close_r+0x1a>
 8005824:	602b      	str	r3, [r5, #0]
 8005826:	bd38      	pop	{r3, r4, r5, pc}
 8005828:	20000298 	.word	0x20000298

0800582c <__sflush_r>:
 800582c:	898a      	ldrh	r2, [r1, #12]
 800582e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005832:	4605      	mov	r5, r0
 8005834:	0710      	lsls	r0, r2, #28
 8005836:	460c      	mov	r4, r1
 8005838:	d458      	bmi.n	80058ec <__sflush_r+0xc0>
 800583a:	684b      	ldr	r3, [r1, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	dc05      	bgt.n	800584c <__sflush_r+0x20>
 8005840:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005842:	2b00      	cmp	r3, #0
 8005844:	dc02      	bgt.n	800584c <__sflush_r+0x20>
 8005846:	2000      	movs	r0, #0
 8005848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800584c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800584e:	2e00      	cmp	r6, #0
 8005850:	d0f9      	beq.n	8005846 <__sflush_r+0x1a>
 8005852:	2300      	movs	r3, #0
 8005854:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005858:	682f      	ldr	r7, [r5, #0]
 800585a:	6a21      	ldr	r1, [r4, #32]
 800585c:	602b      	str	r3, [r5, #0]
 800585e:	d032      	beq.n	80058c6 <__sflush_r+0x9a>
 8005860:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005862:	89a3      	ldrh	r3, [r4, #12]
 8005864:	075a      	lsls	r2, r3, #29
 8005866:	d505      	bpl.n	8005874 <__sflush_r+0x48>
 8005868:	6863      	ldr	r3, [r4, #4]
 800586a:	1ac0      	subs	r0, r0, r3
 800586c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800586e:	b10b      	cbz	r3, 8005874 <__sflush_r+0x48>
 8005870:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005872:	1ac0      	subs	r0, r0, r3
 8005874:	2300      	movs	r3, #0
 8005876:	4602      	mov	r2, r0
 8005878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800587a:	6a21      	ldr	r1, [r4, #32]
 800587c:	4628      	mov	r0, r5
 800587e:	47b0      	blx	r6
 8005880:	1c43      	adds	r3, r0, #1
 8005882:	89a3      	ldrh	r3, [r4, #12]
 8005884:	d106      	bne.n	8005894 <__sflush_r+0x68>
 8005886:	6829      	ldr	r1, [r5, #0]
 8005888:	291d      	cmp	r1, #29
 800588a:	d848      	bhi.n	800591e <__sflush_r+0xf2>
 800588c:	4a29      	ldr	r2, [pc, #164]	; (8005934 <__sflush_r+0x108>)
 800588e:	40ca      	lsrs	r2, r1
 8005890:	07d6      	lsls	r6, r2, #31
 8005892:	d544      	bpl.n	800591e <__sflush_r+0xf2>
 8005894:	2200      	movs	r2, #0
 8005896:	6062      	str	r2, [r4, #4]
 8005898:	04d9      	lsls	r1, r3, #19
 800589a:	6922      	ldr	r2, [r4, #16]
 800589c:	6022      	str	r2, [r4, #0]
 800589e:	d504      	bpl.n	80058aa <__sflush_r+0x7e>
 80058a0:	1c42      	adds	r2, r0, #1
 80058a2:	d101      	bne.n	80058a8 <__sflush_r+0x7c>
 80058a4:	682b      	ldr	r3, [r5, #0]
 80058a6:	b903      	cbnz	r3, 80058aa <__sflush_r+0x7e>
 80058a8:	6560      	str	r0, [r4, #84]	; 0x54
 80058aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058ac:	602f      	str	r7, [r5, #0]
 80058ae:	2900      	cmp	r1, #0
 80058b0:	d0c9      	beq.n	8005846 <__sflush_r+0x1a>
 80058b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058b6:	4299      	cmp	r1, r3
 80058b8:	d002      	beq.n	80058c0 <__sflush_r+0x94>
 80058ba:	4628      	mov	r0, r5
 80058bc:	f7ff fc98 	bl	80051f0 <_free_r>
 80058c0:	2000      	movs	r0, #0
 80058c2:	6360      	str	r0, [r4, #52]	; 0x34
 80058c4:	e7c0      	b.n	8005848 <__sflush_r+0x1c>
 80058c6:	2301      	movs	r3, #1
 80058c8:	4628      	mov	r0, r5
 80058ca:	47b0      	blx	r6
 80058cc:	1c41      	adds	r1, r0, #1
 80058ce:	d1c8      	bne.n	8005862 <__sflush_r+0x36>
 80058d0:	682b      	ldr	r3, [r5, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d0c5      	beq.n	8005862 <__sflush_r+0x36>
 80058d6:	2b1d      	cmp	r3, #29
 80058d8:	d001      	beq.n	80058de <__sflush_r+0xb2>
 80058da:	2b16      	cmp	r3, #22
 80058dc:	d101      	bne.n	80058e2 <__sflush_r+0xb6>
 80058de:	602f      	str	r7, [r5, #0]
 80058e0:	e7b1      	b.n	8005846 <__sflush_r+0x1a>
 80058e2:	89a3      	ldrh	r3, [r4, #12]
 80058e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058e8:	81a3      	strh	r3, [r4, #12]
 80058ea:	e7ad      	b.n	8005848 <__sflush_r+0x1c>
 80058ec:	690f      	ldr	r7, [r1, #16]
 80058ee:	2f00      	cmp	r7, #0
 80058f0:	d0a9      	beq.n	8005846 <__sflush_r+0x1a>
 80058f2:	0793      	lsls	r3, r2, #30
 80058f4:	680e      	ldr	r6, [r1, #0]
 80058f6:	bf08      	it	eq
 80058f8:	694b      	ldreq	r3, [r1, #20]
 80058fa:	600f      	str	r7, [r1, #0]
 80058fc:	bf18      	it	ne
 80058fe:	2300      	movne	r3, #0
 8005900:	eba6 0807 	sub.w	r8, r6, r7
 8005904:	608b      	str	r3, [r1, #8]
 8005906:	f1b8 0f00 	cmp.w	r8, #0
 800590a:	dd9c      	ble.n	8005846 <__sflush_r+0x1a>
 800590c:	4643      	mov	r3, r8
 800590e:	463a      	mov	r2, r7
 8005910:	6a21      	ldr	r1, [r4, #32]
 8005912:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005914:	4628      	mov	r0, r5
 8005916:	47b0      	blx	r6
 8005918:	2800      	cmp	r0, #0
 800591a:	dc06      	bgt.n	800592a <__sflush_r+0xfe>
 800591c:	89a3      	ldrh	r3, [r4, #12]
 800591e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005922:	81a3      	strh	r3, [r4, #12]
 8005924:	f04f 30ff 	mov.w	r0, #4294967295
 8005928:	e78e      	b.n	8005848 <__sflush_r+0x1c>
 800592a:	4407      	add	r7, r0
 800592c:	eba8 0800 	sub.w	r8, r8, r0
 8005930:	e7e9      	b.n	8005906 <__sflush_r+0xda>
 8005932:	bf00      	nop
 8005934:	20400001 	.word	0x20400001

08005938 <_fflush_r>:
 8005938:	b538      	push	{r3, r4, r5, lr}
 800593a:	690b      	ldr	r3, [r1, #16]
 800593c:	4605      	mov	r5, r0
 800593e:	460c      	mov	r4, r1
 8005940:	b1db      	cbz	r3, 800597a <_fflush_r+0x42>
 8005942:	b118      	cbz	r0, 800594c <_fflush_r+0x14>
 8005944:	6983      	ldr	r3, [r0, #24]
 8005946:	b90b      	cbnz	r3, 800594c <_fflush_r+0x14>
 8005948:	f7ff f8be 	bl	8004ac8 <__sinit>
 800594c:	4b0c      	ldr	r3, [pc, #48]	; (8005980 <_fflush_r+0x48>)
 800594e:	429c      	cmp	r4, r3
 8005950:	d109      	bne.n	8005966 <_fflush_r+0x2e>
 8005952:	686c      	ldr	r4, [r5, #4]
 8005954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005958:	b17b      	cbz	r3, 800597a <_fflush_r+0x42>
 800595a:	4621      	mov	r1, r4
 800595c:	4628      	mov	r0, r5
 800595e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005962:	f7ff bf63 	b.w	800582c <__sflush_r>
 8005966:	4b07      	ldr	r3, [pc, #28]	; (8005984 <_fflush_r+0x4c>)
 8005968:	429c      	cmp	r4, r3
 800596a:	d101      	bne.n	8005970 <_fflush_r+0x38>
 800596c:	68ac      	ldr	r4, [r5, #8]
 800596e:	e7f1      	b.n	8005954 <_fflush_r+0x1c>
 8005970:	4b05      	ldr	r3, [pc, #20]	; (8005988 <_fflush_r+0x50>)
 8005972:	429c      	cmp	r4, r3
 8005974:	bf08      	it	eq
 8005976:	68ec      	ldreq	r4, [r5, #12]
 8005978:	e7ec      	b.n	8005954 <_fflush_r+0x1c>
 800597a:	2000      	movs	r0, #0
 800597c:	bd38      	pop	{r3, r4, r5, pc}
 800597e:	bf00      	nop
 8005980:	08005bd0 	.word	0x08005bd0
 8005984:	08005bf0 	.word	0x08005bf0
 8005988:	08005bb0 	.word	0x08005bb0

0800598c <_lseek_r>:
 800598c:	b538      	push	{r3, r4, r5, lr}
 800598e:	4c07      	ldr	r4, [pc, #28]	; (80059ac <_lseek_r+0x20>)
 8005990:	4605      	mov	r5, r0
 8005992:	4608      	mov	r0, r1
 8005994:	4611      	mov	r1, r2
 8005996:	2200      	movs	r2, #0
 8005998:	6022      	str	r2, [r4, #0]
 800599a:	461a      	mov	r2, r3
 800599c:	f7fb fe58 	bl	8001650 <_lseek>
 80059a0:	1c43      	adds	r3, r0, #1
 80059a2:	d102      	bne.n	80059aa <_lseek_r+0x1e>
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	b103      	cbz	r3, 80059aa <_lseek_r+0x1e>
 80059a8:	602b      	str	r3, [r5, #0]
 80059aa:	bd38      	pop	{r3, r4, r5, pc}
 80059ac:	20000298 	.word	0x20000298

080059b0 <__swhatbuf_r>:
 80059b0:	b570      	push	{r4, r5, r6, lr}
 80059b2:	460e      	mov	r6, r1
 80059b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059b8:	2900      	cmp	r1, #0
 80059ba:	b096      	sub	sp, #88	; 0x58
 80059bc:	4614      	mov	r4, r2
 80059be:	461d      	mov	r5, r3
 80059c0:	da07      	bge.n	80059d2 <__swhatbuf_r+0x22>
 80059c2:	2300      	movs	r3, #0
 80059c4:	602b      	str	r3, [r5, #0]
 80059c6:	89b3      	ldrh	r3, [r6, #12]
 80059c8:	061a      	lsls	r2, r3, #24
 80059ca:	d410      	bmi.n	80059ee <__swhatbuf_r+0x3e>
 80059cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059d0:	e00e      	b.n	80059f0 <__swhatbuf_r+0x40>
 80059d2:	466a      	mov	r2, sp
 80059d4:	f000 f884 	bl	8005ae0 <_fstat_r>
 80059d8:	2800      	cmp	r0, #0
 80059da:	dbf2      	blt.n	80059c2 <__swhatbuf_r+0x12>
 80059dc:	9a01      	ldr	r2, [sp, #4]
 80059de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80059e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80059e6:	425a      	negs	r2, r3
 80059e8:	415a      	adcs	r2, r3
 80059ea:	602a      	str	r2, [r5, #0]
 80059ec:	e7ee      	b.n	80059cc <__swhatbuf_r+0x1c>
 80059ee:	2340      	movs	r3, #64	; 0x40
 80059f0:	2000      	movs	r0, #0
 80059f2:	6023      	str	r3, [r4, #0]
 80059f4:	b016      	add	sp, #88	; 0x58
 80059f6:	bd70      	pop	{r4, r5, r6, pc}

080059f8 <__smakebuf_r>:
 80059f8:	898b      	ldrh	r3, [r1, #12]
 80059fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059fc:	079d      	lsls	r5, r3, #30
 80059fe:	4606      	mov	r6, r0
 8005a00:	460c      	mov	r4, r1
 8005a02:	d507      	bpl.n	8005a14 <__smakebuf_r+0x1c>
 8005a04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	6123      	str	r3, [r4, #16]
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	6163      	str	r3, [r4, #20]
 8005a10:	b002      	add	sp, #8
 8005a12:	bd70      	pop	{r4, r5, r6, pc}
 8005a14:	ab01      	add	r3, sp, #4
 8005a16:	466a      	mov	r2, sp
 8005a18:	f7ff ffca 	bl	80059b0 <__swhatbuf_r>
 8005a1c:	9900      	ldr	r1, [sp, #0]
 8005a1e:	4605      	mov	r5, r0
 8005a20:	4630      	mov	r0, r6
 8005a22:	f7ff fc33 	bl	800528c <_malloc_r>
 8005a26:	b948      	cbnz	r0, 8005a3c <__smakebuf_r+0x44>
 8005a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a2c:	059a      	lsls	r2, r3, #22
 8005a2e:	d4ef      	bmi.n	8005a10 <__smakebuf_r+0x18>
 8005a30:	f023 0303 	bic.w	r3, r3, #3
 8005a34:	f043 0302 	orr.w	r3, r3, #2
 8005a38:	81a3      	strh	r3, [r4, #12]
 8005a3a:	e7e3      	b.n	8005a04 <__smakebuf_r+0xc>
 8005a3c:	4b0d      	ldr	r3, [pc, #52]	; (8005a74 <__smakebuf_r+0x7c>)
 8005a3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005a40:	89a3      	ldrh	r3, [r4, #12]
 8005a42:	6020      	str	r0, [r4, #0]
 8005a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a48:	81a3      	strh	r3, [r4, #12]
 8005a4a:	9b00      	ldr	r3, [sp, #0]
 8005a4c:	6163      	str	r3, [r4, #20]
 8005a4e:	9b01      	ldr	r3, [sp, #4]
 8005a50:	6120      	str	r0, [r4, #16]
 8005a52:	b15b      	cbz	r3, 8005a6c <__smakebuf_r+0x74>
 8005a54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a58:	4630      	mov	r0, r6
 8005a5a:	f000 f853 	bl	8005b04 <_isatty_r>
 8005a5e:	b128      	cbz	r0, 8005a6c <__smakebuf_r+0x74>
 8005a60:	89a3      	ldrh	r3, [r4, #12]
 8005a62:	f023 0303 	bic.w	r3, r3, #3
 8005a66:	f043 0301 	orr.w	r3, r3, #1
 8005a6a:	81a3      	strh	r3, [r4, #12]
 8005a6c:	89a3      	ldrh	r3, [r4, #12]
 8005a6e:	431d      	orrs	r5, r3
 8005a70:	81a5      	strh	r5, [r4, #12]
 8005a72:	e7cd      	b.n	8005a10 <__smakebuf_r+0x18>
 8005a74:	08004a91 	.word	0x08004a91

08005a78 <__ascii_mbtowc>:
 8005a78:	b082      	sub	sp, #8
 8005a7a:	b901      	cbnz	r1, 8005a7e <__ascii_mbtowc+0x6>
 8005a7c:	a901      	add	r1, sp, #4
 8005a7e:	b142      	cbz	r2, 8005a92 <__ascii_mbtowc+0x1a>
 8005a80:	b14b      	cbz	r3, 8005a96 <__ascii_mbtowc+0x1e>
 8005a82:	7813      	ldrb	r3, [r2, #0]
 8005a84:	600b      	str	r3, [r1, #0]
 8005a86:	7812      	ldrb	r2, [r2, #0]
 8005a88:	1c10      	adds	r0, r2, #0
 8005a8a:	bf18      	it	ne
 8005a8c:	2001      	movne	r0, #1
 8005a8e:	b002      	add	sp, #8
 8005a90:	4770      	bx	lr
 8005a92:	4610      	mov	r0, r2
 8005a94:	e7fb      	b.n	8005a8e <__ascii_mbtowc+0x16>
 8005a96:	f06f 0001 	mvn.w	r0, #1
 8005a9a:	e7f8      	b.n	8005a8e <__ascii_mbtowc+0x16>

08005a9c <__malloc_lock>:
 8005a9c:	4770      	bx	lr

08005a9e <__malloc_unlock>:
 8005a9e:	4770      	bx	lr

08005aa0 <_read_r>:
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	4c07      	ldr	r4, [pc, #28]	; (8005ac0 <_read_r+0x20>)
 8005aa4:	4605      	mov	r5, r0
 8005aa6:	4608      	mov	r0, r1
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	2200      	movs	r2, #0
 8005aac:	6022      	str	r2, [r4, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f7fb fd6e 	bl	8001590 <_read>
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	d102      	bne.n	8005abe <_read_r+0x1e>
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	b103      	cbz	r3, 8005abe <_read_r+0x1e>
 8005abc:	602b      	str	r3, [r5, #0]
 8005abe:	bd38      	pop	{r3, r4, r5, pc}
 8005ac0:	20000298 	.word	0x20000298

08005ac4 <__ascii_wctomb>:
 8005ac4:	b149      	cbz	r1, 8005ada <__ascii_wctomb+0x16>
 8005ac6:	2aff      	cmp	r2, #255	; 0xff
 8005ac8:	bf85      	ittet	hi
 8005aca:	238a      	movhi	r3, #138	; 0x8a
 8005acc:	6003      	strhi	r3, [r0, #0]
 8005ace:	700a      	strbls	r2, [r1, #0]
 8005ad0:	f04f 30ff 	movhi.w	r0, #4294967295
 8005ad4:	bf98      	it	ls
 8005ad6:	2001      	movls	r0, #1
 8005ad8:	4770      	bx	lr
 8005ada:	4608      	mov	r0, r1
 8005adc:	4770      	bx	lr
	...

08005ae0 <_fstat_r>:
 8005ae0:	b538      	push	{r3, r4, r5, lr}
 8005ae2:	4c07      	ldr	r4, [pc, #28]	; (8005b00 <_fstat_r+0x20>)
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	4605      	mov	r5, r0
 8005ae8:	4608      	mov	r0, r1
 8005aea:	4611      	mov	r1, r2
 8005aec:	6023      	str	r3, [r4, #0]
 8005aee:	f7fb fd94 	bl	800161a <_fstat>
 8005af2:	1c43      	adds	r3, r0, #1
 8005af4:	d102      	bne.n	8005afc <_fstat_r+0x1c>
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	b103      	cbz	r3, 8005afc <_fstat_r+0x1c>
 8005afa:	602b      	str	r3, [r5, #0]
 8005afc:	bd38      	pop	{r3, r4, r5, pc}
 8005afe:	bf00      	nop
 8005b00:	20000298 	.word	0x20000298

08005b04 <_isatty_r>:
 8005b04:	b538      	push	{r3, r4, r5, lr}
 8005b06:	4c06      	ldr	r4, [pc, #24]	; (8005b20 <_isatty_r+0x1c>)
 8005b08:	2300      	movs	r3, #0
 8005b0a:	4605      	mov	r5, r0
 8005b0c:	4608      	mov	r0, r1
 8005b0e:	6023      	str	r3, [r4, #0]
 8005b10:	f7fb fd93 	bl	800163a <_isatty>
 8005b14:	1c43      	adds	r3, r0, #1
 8005b16:	d102      	bne.n	8005b1e <_isatty_r+0x1a>
 8005b18:	6823      	ldr	r3, [r4, #0]
 8005b1a:	b103      	cbz	r3, 8005b1e <_isatty_r+0x1a>
 8005b1c:	602b      	str	r3, [r5, #0]
 8005b1e:	bd38      	pop	{r3, r4, r5, pc}
 8005b20:	20000298 	.word	0x20000298

08005b24 <_init>:
 8005b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b26:	bf00      	nop
 8005b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2a:	bc08      	pop	{r3}
 8005b2c:	469e      	mov	lr, r3
 8005b2e:	4770      	bx	lr

08005b30 <_fini>:
 8005b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b32:	bf00      	nop
 8005b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b36:	bc08      	pop	{r3}
 8005b38:	469e      	mov	lr, r3
 8005b3a:	4770      	bx	lr
